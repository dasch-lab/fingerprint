/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
  0%|          | 0/912 [00:00<?, ?it/s]Compiling libKeOpstorchac7f12ed31 in /home/s.joubbi/.cache/pykeops-1.4.1-cpython-38/build-libKeOpstorchac7f12ed31:
       formula: ArgKMin_Reduction(Sum(Square((Var(0,3,0) - Var(1,3,1)))),18,0)
       aliases: Var(0,3,0); Var(1,3,1); 
       dtype  : float32
... Generated /home/s.joubbi/.cache/pykeops-1.4.1-cpython-38/build-libKeOpstorchac7f12ed31/CMakeFiles/keopslibKeOpstorchac7f12ed31.dir/keops/core/./keopslibKeOpstorchac7f12ed31_generated_link_autodiff.cu.o successfully.
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/pykeops/torch/generic/generic_red.cpp: In function ‘array_t keops_binders::allocate_result_array_gpu(int*, int, short int) [with array_t = at::Tensor; _T = float]’:
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/pykeops/torch/generic/generic_red.cpp:72:63: warning: narrowing conversion of ‘Device_Id’ from ‘short int’ to ‘c10::DeviceIndex’ {aka ‘signed char’} [-Wnarrowing]
   72 |   return torch::empty(shape_out_array, at::device({at::kCUDA, Device_Id}).dtype(AT_kTYPE).requires_grad(true));
      |                                                               ^~~~~~~~~
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  0%|          | 1/912 [00:24<6:16:18, 24.78s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  0%|          | 2/912 [00:25<4:26:10, 17.55s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  0%|          | 3/912 [00:26<3:10:26, 12.57s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  0%|          | 4/912 [00:27<2:20:15,  9.27s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 5/912 [00:28<1:42:01,  6.75s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 6/912 [00:29<1:15:11,  4.98s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 7/912 [00:30<56:25,  3.74s/it]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 8/912 [00:31<43:35,  2.89s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 9/912 [00:32<34:02,  2.26s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 10/912 [00:33<28:43,  1.91s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|          | 11/912 [00:34<24:01,  1.60s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|▏         | 12/912 [00:34<19:51,  1.32s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  1%|▏         | 13/912 [00:35<16:55,  1.13s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 14/912 [00:36<15:44,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 15/912 [00:37<15:51,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 16/912 [00:38<14:24,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 17/912 [00:39<13:44,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 18/912 [00:40<17:24,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 19/912 [00:41<16:46,  1.13s/it]Done.
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 20/912 [00:42<14:48,  1.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 21/912 [00:43<14:13,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  2%|▏         | 22/912 [00:45<18:52,  1.27s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 23/912 [00:45<15:12,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 24/912 [00:46<15:04,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 25/912 [00:47<14:08,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 26/912 [00:48<12:56,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 27/912 [00:49<13:02,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 28/912 [00:50<12:39,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 29/912 [00:50<12:39,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 30/912 [00:51<12:02,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  3%|▎         | 31/912 [00:52<12:58,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▎         | 32/912 [00:53<11:55,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▎         | 33/912 [00:55<15:56,  1.09s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▎         | 34/912 [00:55<14:31,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 35/912 [00:57<17:12,  1.18s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 36/912 [00:58<16:11,  1.11s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 37/912 [01:00<18:18,  1.26s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 38/912 [01:00<16:55,  1.16s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 39/912 [01:01<15:25,  1.06s/it]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 40/912 [01:03<19:07,  1.32s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  4%|▍         | 41/912 [01:04<16:26,  1.13s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▍         | 42/912 [01:05<15:05,  1.04s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▍         | 43/912 [01:06<14:10,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▍         | 44/912 [01:06<13:34,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▍         | 45/912 [01:07<12:43,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▌         | 46/912 [01:08<13:19,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▌         | 47/912 [01:09<12:23,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▌         | 48/912 [01:10<13:03,  1.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▌         | 49/912 [01:11<12:37,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  5%|▌         | 50/912 [01:12<15:02,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 51/912 [01:13<14:49,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 52/912 [01:14<13:56,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 53/912 [01:15<14:10,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 54/912 [01:16<13:04,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 55/912 [01:17<12:37,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▌         | 56/912 [01:17<12:05,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▋         | 57/912 [01:18<13:15,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▋         | 58/912 [01:19<11:51,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  6%|▋         | 59/912 [01:20<11:56,  1.19it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 60/912 [01:21<12:14,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 61/912 [01:22<11:29,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 62/912 [01:22<11:59,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 63/912 [01:23<11:54,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 64/912 [01:24<13:01,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 65/912 [01:25<11:38,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 66/912 [01:26<11:31,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 67/912 [01:27<12:28,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  7%|▋         | 68/912 [01:28<12:03,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 69/912 [01:28<11:57,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 70/912 [01:29<12:16,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 71/912 [01:30<12:59,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 72/912 [01:31<11:26,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 73/912 [01:33<16:20,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 74/912 [01:34<17:40,  1.27s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 75/912 [01:36<19:41,  1.41s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 76/912 [01:37<17:04,  1.23s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  8%|▊         | 77/912 [01:38<14:48,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▊         | 78/912 [01:39<14:20,  1.03s/it]-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▊         | 79/912 [01:40<13:55,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 80/912 [01:41<16:12,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 81/912 [01:42<15:13,  1.10s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 82/912 [01:44<19:19,  1.40s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 83/912 [01:45<15:18,  1.11s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 84/912 [01:46<15:01,  1.09s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 85/912 [01:46<13:13,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
  9%|▉         | 86/912 [01:47<13:59,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|▉         | 87/912 [01:48<12:16,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|▉         | 88/912 [01:50<15:20,  1.12s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|▉         | 89/912 [01:51<14:23,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|▉         | 90/912 [01:51<13:34,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|▉         | 91/912 [01:52<12:32,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|█         | 92/912 [01:53<12:18,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|█         | 93/912 [01:54<12:28,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|█         | 94/912 [01:56<16:15,  1.19s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 10%|█         | 95/912 [01:57<14:25,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 96/912 [01:57<13:17,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 97/912 [01:58<12:36,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 98/912 [01:59<12:38,  1.07it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 99/912 [02:01<14:51,  1.10s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 100/912 [02:02<14:19,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 101/912 [02:03<14:21,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█         | 102/912 [02:03<13:02,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█▏        | 103/912 [02:04<12:25,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 11%|█▏        | 104/912 [02:05<11:40,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 105/912 [02:06<12:18,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 106/912 [02:07<12:04,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 107/912 [02:08<11:50,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 108/912 [02:09<11:48,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 109/912 [02:09<11:13,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 110/912 [02:10<11:08,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 111/912 [02:11<10:40,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 112/912 [02:12<11:30,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▏        | 113/912 [02:14<15:12,  1.14s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 12%|█▎        | 114/912 [02:14<13:14,  1.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 115/912 [02:15<12:38,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 116/912 [02:16<12:26,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 117/912 [02:17<12:16,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 118/912 [02:18<11:40,  1.13it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 119/912 [02:19<11:18,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 120/912 [02:19<11:12,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 121/912 [02:20<11:02,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 122/912 [02:22<13:59,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 13%|█▎        | 123/912 [02:23<13:01,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▎        | 124/912 [02:23<12:41,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▎        | 125/912 [02:24<12:22,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 126/912 [02:25<12:48,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 127/912 [02:26<11:54,  1.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 128/912 [02:27<11:28,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 129/912 [02:28<11:37,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 130/912 [02:29<11:30,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 131/912 [02:30<11:27,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 14%|█▍        | 132/912 [02:30<10:45,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▍        | 133/912 [02:32<14:43,  1.13s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▍        | 134/912 [02:34<17:53,  1.38s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▍        | 135/912 [02:35<15:09,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▍        | 136/912 [02:36<16:22,  1.27s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▌        | 137/912 [02:37<14:27,  1.12s/it]-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▌        | 138/912 [02:38<13:30,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▌        | 139/912 [02:39<13:59,  1.09s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▌        | 140/912 [02:40<12:31,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 15%|█▌        | 141/912 [02:41<14:56,  1.16s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 142/912 [02:42<13:12,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 143/912 [02:43<12:58,  1.01s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 144/912 [02:44<12:05,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 145/912 [02:45<12:01,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 146/912 [02:46<11:30,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 147/912 [02:47<11:30,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▌        | 148/912 [02:47<10:34,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▋        | 149/912 [02:48<11:41,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 16%|█▋        | 150/912 [02:49<10:34,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 151/912 [02:50<11:07,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 152/912 [02:51<10:42,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 153/912 [02:52<10:49,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 154/912 [02:53<13:50,  1.10s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 155/912 [02:54<12:52,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 156/912 [02:55<12:13,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 157/912 [02:56<11:38,  1.08it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 158/912 [02:57<11:22,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 17%|█▋        | 159/912 [02:59<15:02,  1.20s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 160/912 [03:00<16:39,  1.33s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 161/912 [03:01<14:34,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 162/912 [03:03<16:16,  1.30s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 163/912 [03:03<14:17,  1.14s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 164/912 [03:05<17:07,  1.37s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 165/912 [03:06<14:33,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 166/912 [03:07<13:28,  1.08s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 167/912 [03:08<14:54,  1.20s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 18%|█▊        | 168/912 [03:09<13:49,  1.11s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▊        | 169/912 [03:10<12:17,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▊        | 170/912 [03:11<11:58,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 171/912 [03:12<11:17,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 172/912 [03:13<11:07,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 173/912 [03:13<10:40,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 174/912 [03:14<10:55,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 175/912 [03:16<13:46,  1.12s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 176/912 [03:17<12:14,  1.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 19%|█▉        | 177/912 [03:18<11:50,  1.03it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|█▉        | 178/912 [03:19<12:03,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|█▉        | 179/912 [03:19<11:34,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|█▉        | 180/912 [03:20<11:18,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|█▉        | 181/912 [03:21<10:23,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|█▉        | 182/912 [03:22<09:57,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|██        | 183/912 [03:24<14:15,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|██        | 184/912 [03:25<14:39,  1.21s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|██        | 185/912 [03:26<13:32,  1.12s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 20%|██        | 186/912 [03:27<13:09,  1.09s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 187/912 [03:28<12:05,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 188/912 [03:29<11:16,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 189/912 [03:29<11:05,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 190/912 [03:30<10:36,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 191/912 [03:31<10:39,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 192/912 [03:32<10:18,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██        | 193/912 [03:33<10:14,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██▏       | 194/912 [03:34<10:14,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██▏       | 195/912 [03:35<10:27,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 21%|██▏       | 196/912 [03:35<10:22,  1.15it/s]-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 197/912 [03:36<10:06,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 198/912 [03:37<09:53,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 199/912 [03:38<09:37,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 200/912 [03:39<09:59,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 201/912 [03:40<13:24,  1.13s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 202/912 [03:42<15:07,  1.28s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 203/912 [03:44<16:47,  1.42s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 204/912 [03:45<14:37,  1.24s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 22%|██▏       | 205/912 [03:45<12:30,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 206/912 [03:47<16:00,  1.36s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 207/912 [03:48<13:01,  1.11s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 208/912 [03:49<12:23,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 209/912 [03:50<14:31,  1.24s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 210/912 [03:51<13:15,  1.13s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 211/912 [03:52<12:13,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 212/912 [03:54<13:38,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 213/912 [03:56<18:54,  1.62s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 23%|██▎       | 214/912 [03:57<15:52,  1.36s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▎       | 215/912 [03:58<13:43,  1.18s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▎       | 216/912 [03:59<12:26,  1.07s/it]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 217/912 [04:00<12:27,  1.08s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 218/912 [04:00<10:48,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 219/912 [04:01<10:38,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 220/912 [04:02<10:15,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 221/912 [04:03<10:11,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 222/912 [04:04<10:00,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 24%|██▍       | 223/912 [04:05<09:59,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▍       | 224/912 [04:06<10:05,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▍       | 225/912 [04:06<10:15,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▍       | 226/912 [04:08<12:45,  1.12s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▍       | 227/912 [04:09<11:56,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▌       | 228/912 [04:10<11:45,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▌       | 229/912 [04:11<10:30,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▌       | 230/912 [04:12<10:25,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▌       | 231/912 [04:12<09:56,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 25%|██▌       | 232/912 [04:14<12:09,  1.07s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 233/912 [04:15<12:00,  1.06s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 234/912 [04:16<10:56,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 235/912 [04:17<10:34,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 236/912 [04:17<10:22,  1.09it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 237/912 [04:18<10:04,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 238/912 [04:19<09:48,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▌       | 239/912 [04:20<09:40,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▋       | 240/912 [04:21<09:25,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 26%|██▋       | 241/912 [04:22<09:32,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 242/912 [04:22<09:18,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 243/912 [04:23<09:25,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 244/912 [04:24<09:13,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 245/912 [04:25<09:21,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 246/912 [04:26<08:56,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 247/912 [04:27<12:23,  1.12s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 248/912 [04:28<11:14,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 249/912 [04:29<10:31,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 27%|██▋       | 250/912 [04:30<10:26,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 251/912 [04:31<09:23,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 252/912 [04:32<10:13,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 253/912 [04:32<09:16,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 254/912 [04:33<09:46,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 255/912 [04:34<09:08,  1.20it/s]-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 256/912 [04:35<09:36,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 257/912 [04:37<12:47,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 258/912 [04:37<10:49,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 28%|██▊       | 259/912 [04:38<10:41,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▊       | 260/912 [04:39<10:07,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▊       | 261/912 [04:40<09:35,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▊       | 262/912 [04:41<09:06,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 263/912 [04:42<11:56,  1.10s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 264/912 [04:43<11:21,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 265/912 [04:44<10:47,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 266/912 [04:45<10:10,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 267/912 [04:46<09:44,  1.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 268/912 [04:47<09:24,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 29%|██▉       | 269/912 [04:48<09:22,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|██▉       | 270/912 [04:48<09:13,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|██▉       | 271/912 [04:49<09:26,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|██▉       | 272/912 [04:50<09:07,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|██▉       | 273/912 [04:51<09:23,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|███       | 274/912 [04:52<08:57,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|███       | 275/912 [04:53<09:10,  1.16it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|███       | 276/912 [04:53<08:23,  1.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|███       | 277/912 [04:54<08:28,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 30%|███       | 278/912 [04:55<08:48,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:269: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_indices = P1P2["batch"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:270: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_indices = P1P2["batch"] >= batch_size // 2
/disk1/fingerprint/dmasif/model.py:272: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p1_atom_indices = P1P2["batch_atoms"] < batch_size // 2
/disk1/fingerprint/dmasif/model.py:273: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  p2_atom_indices = P1P2["batch_atoms"] >= batch_size // 2
 31%|███       | 279/912 [04:56<09:48,  1.08it/s]