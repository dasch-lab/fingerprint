2024-04-20 16:45:38.647812: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-04-20 16:45:39.231020: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch_geometric/deprecation.py:26: UserWarning: 'data.DataLoader' is deprecated, use 'loader.DataLoader' instead
  warnings.warn(out)
  0%|          | 0/4613 [00:00<?, ?it/s]  0%|          | 1/4613 [00:01<2:24:38,  1.88s/it]  0%|          | 2/4613 [00:02<1:57:27,  1.53s/it]  0%|          | 3/4613 [00:03<1:42:26,  1.33s/it]  0%|          | 4/4613 [00:03<1:15:26,  1.02it/s]  0%|          | 5/4613 [00:04<1:08:28,  1.12it/s]  0%|          | 6/4613 [00:04<51:45,  1.48it/s]    0%|          | 7/4613 [00:05<53:30,  1.43it/s]  0%|          | 8/4613 [00:05<42:50,  1.79it/s]  0%|          | 9/4613 [00:06<45:09,  1.70it/s]  0%|          | 10/4613 [00:06<35:55,  2.14it/s]  0%|          | 11/4613 [00:07<43:36,  1.76it/s]  0%|          | 12/4613 [00:07<47:13,  1.62it/s]  0%|          | 13/4613 [00:07<36:44,  2.09it/s]  0%|          | 14/4613 [00:08<41:49,  1.83it/s]  0%|          | 15/4613 [00:09<48:27,  1.58it/s]  0%|          | 16/4613 [00:10<54:10,  1.41it/s]  0%|          | 17/4613 [00:10<42:13,  1.81it/s]  0%|          | 18/4613 [00:11<44:40,  1.71it/s]  0%|          | 19/4613 [00:12<53:15,  1.44it/s]  0%|          | 20/4613 [00:12<52:50,  1.45it/s]  0%|          | 21/4613 [00:13<40:17,  1.90it/s]  0%|          | 22/4613 [00:13<46:21,  1.65it/s]  0%|          | 23/4613 [00:14<52:22,  1.46it/s]  1%|          | 24/4613 [00:15<52:51,  1.45it/s]  1%|          | 25/4613 [00:15<42:27,  1.80it/s]  1%|          | 26/4613 [00:16<47:59,  1.59it/s]  1%|          | 27/4613 [00:17<50:07,  1.53it/s]  1%|          | 28/4613 [00:17<51:50,  1.47it/s]  1%|          | 29/4613 [00:18<40:46,  1.87it/s]  1%|          | 30/4613 [00:18<47:33,  1.61it/s]  1%|          | 31/4613 [00:19<49:44,  1.54it/s]  1%|          | 32/4613 [00:19<39:59,  1.91it/s]  1%|          | 33/4613 [00:20<45:48,  1.67it/s]  1%|          | 34/4613 [00:20<36:51,  2.07it/s]  1%|          | 35/4613 [00:21<41:00,  1.86it/s]  1%|          | 36/4613 [00:22<45:01,  1.69it/s]  1%|          | 37/4613 [00:22<35:36,  2.14it/s]  1%|          | 38/4613 [00:25<1:39:16,  1.30s/it]  1%|          | 39/4613 [00:26<1:25:12,  1.12s/it]  1%|          | 40/4613 [00:26<1:07:10,  1.13it/s]  1%|          | 41/4613 [00:27<1:00:57,  1.25it/s]  1%|          | 42/4613 [00:28<1:01:26,  1.24it/s]  1%|          | 43/4613 [00:28<46:14,  1.65it/s]    1%|          | 44/4613 [00:28<48:02,  1.58it/s]  1%|          | 45/4613 [00:29<37:42,  2.02it/s]  1%|          | 46/4613 [00:29<43:03,  1.77it/s]  1%|          | 47/4613 [00:29<33:09,  2.29it/s]  1%|          | 48/4613 [00:30<42:17,  1.80it/s]  1%|          | 49/4613 [00:31<46:22,  1.64it/s]  1%|          | 50/4613 [00:31<37:11,  2.05it/s]  1%|          | 51/4613 [00:33<1:00:09,  1.26it/s]  1%|          | 52/4613 [00:33<45:30,  1.67it/s]    1%|          | 53/4613 [00:34<47:43,  1.59it/s]  1%|          | 54/4613 [00:34<39:39,  1.92it/s]  1%|          | 55/4613 [00:35<46:21,  1.64it/s]  1%|          | 56/4613 [00:35<50:34,  1.50it/s]  1%|          | 57/4613 [00:36<50:55,  1.49it/s]  1%|▏         | 58/4613 [00:36<39:03,  1.94it/s]  1%|▏         | 59/4613 [00:37<43:26,  1.75it/s]  1%|▏         | 60/4613 [00:38<53:09,  1.43it/s]  1%|▏         | 61/4613 [00:39<56:08,  1.35it/s]  1%|▏         | 62/4613 [00:40<55:48,  1.36it/s]  1%|▏         | 63/4613 [00:40<42:25,  1.79it/s]  1%|▏         | 64/4613 [00:41<47:19,  1.60it/s]  1%|▏         | 65/4613 [00:41<50:22,  1.50it/s]  1%|▏         | 66/4613 [00:42<53:45,  1.41it/s]  1%|▏         | 67/4613 [00:42<40:54,  1.85it/s]  1%|▏         | 68/4613 [00:42<32:41,  2.32it/s]  1%|▏         | 69/4613 [00:43<37:33,  2.02it/s]  2%|▏         | 70/4613 [00:43<31:56,  2.37it/s]  2%|▏         | 71/4613 [00:45<53:51,  1.41it/s]  2%|▏         | 72/4613 [00:45<42:45,  1.77it/s]  2%|▏         | 73/4613 [00:46<47:43,  1.59it/s]  2%|▏         | 74/4613 [00:46<49:24,  1.53it/s]  2%|▏         | 75/4613 [00:47<38:53,  1.94it/s]  2%|▏         | 76/4613 [00:47<44:32,  1.70it/s]  2%|▏         | 77/4613 [00:48<50:00,  1.51it/s]  2%|▏         | 78/4613 [00:49<51:19,  1.47it/s]  2%|▏         | 79/4613 [00:49<39:06,  1.93it/s]  2%|▏         | 80/4613 [00:50<47:16,  1.60it/s]  2%|▏         | 81/4613 [00:51<53:49,  1.40it/s]  2%|▏         | 82/4613 [00:51<52:38,  1.43it/s]  2%|▏         | 83/4613 [00:53<1:12:37,  1.04it/s]  2%|▏         | 84/4613 [00:54<1:08:01,  1.11it/s]  2%|▏         | 85/4613 [00:54<52:21,  1.44it/s]    2%|▏         | 86/4613 [00:55<53:48,  1.40it/s]  2%|▏         | 87/4613 [00:55<43:16,  1.74it/s]  2%|▏         | 88/4613 [00:56<45:13,  1.67it/s]  2%|▏         | 89/4613 [00:57<50:26,  1.49it/s]  2%|▏         | 90/4613 [00:57<53:02,  1.42it/s]  2%|▏         | 91/4613 [00:58<42:05,  1.79it/s]  2%|▏         | 92/4613 [00:58<46:43,  1.61it/s]  2%|▏         | 93/4613 [00:59<50:06,  1.50it/s]  2%|▏         | 94/4613 [00:59<40:56,  1.84it/s]  2%|▏         | 95/4613 [01:00<42:34,  1.77it/s]  2%|▏         | 96/4613 [01:01<52:22,  1.44it/s]  2%|▏         | 97/4613 [01:02<51:29,  1.46it/s]  2%|▏         | 98/4613 [01:02<52:19,  1.44it/s]  2%|▏         | 99/4613 [01:03<54:35,  1.38it/s]  2%|▏         | 100/4613 [01:03<41:18,  1.82it/s]  2%|▏         | 101/4613 [01:03<33:02,  2.28it/s]  2%|▏         | 102/4613 [01:04<41:11,  1.82it/s]  2%|▏         | 103/4613 [01:05<44:44,  1.68it/s]  2%|▏         | 104/4613 [01:05<35:55,  2.09it/s]  2%|▏         | 105/4613 [01:06<40:50,  1.84it/s]  2%|▏         | 106/4613 [01:07<44:37,  1.68it/s]  2%|▏         | 107/4613 [01:07<35:49,  2.10it/s]  2%|▏         | 108/4613 [01:08<44:36,  1.68it/s]  2%|▏         | 109/4613 [01:08<46:46,  1.60it/s]  2%|▏         | 110/4613 [01:09<36:55,  2.03it/s]  2%|▏         | 111/4613 [01:09<42:06,  1.78it/s]  2%|▏         | 112/4613 [01:09<32:43,  2.29it/s]  2%|▏         | 113/4613 [01:11<57:08,  1.31it/s]  2%|▏         | 114/4613 [01:12<58:04,  1.29it/s]  2%|▏         | 115/4613 [01:12<48:07,  1.56it/s]  3%|▎         | 116/4613 [01:13<51:45,  1.45it/s]  3%|▎         | 117/4613 [01:14<54:41,  1.37it/s]  3%|▎         | 118/4613 [01:14<55:43,  1.34it/s]  3%|▎         | 119/4613 [01:15<56:56,  1.32it/s]  3%|▎         | 120/4613 [01:16<59:39,  1.26it/s]  3%|▎         | 121/4613 [01:17<1:00:36,  1.24it/s]  3%|▎         | 122/4613 [01:18<1:02:43,  1.19it/s]  3%|▎         | 123/4613 [01:19<1:02:26,  1.20it/s]  3%|▎         | 124/4613 [01:19<1:01:03,  1.23it/s]  3%|▎         | 125/4613 [01:20<48:52,  1.53it/s]    3%|▎         | 126/4613 [01:21<51:38,  1.45it/s]  3%|▎         | 127/4613 [01:21<51:16,  1.46it/s]  3%|▎         | 128/4613 [01:21<39:10,  1.91it/s]  3%|▎         | 129/4613 [01:22<44:08,  1.69it/s]  3%|▎         | 130/4613 [01:22<38:43,  1.93it/s]  3%|▎         | 131/4613 [01:23<46:34,  1.60it/s]  3%|▎         | 132/4613 [01:25<1:05:54,  1.13it/s]  3%|▎         | 133/4613 [01:27<1:24:43,  1.13s/it]  3%|▎         | 134/4613 [01:27<1:16:39,  1.03s/it]  3%|▎         | 135/4613 [01:28<59:11,  1.26it/s]    3%|▎         | 136/4613 [01:28<56:41,  1.32it/s]  3%|▎         | 137/4613 [01:29<55:16,  1.35it/s]  3%|▎         | 138/4613 [01:29<44:27,  1.68it/s]  3%|▎         | 139/4613 [01:30<49:40,  1.50it/s]  3%|▎         | 140/4613 [01:31<53:52,  1.38it/s]  3%|▎         | 141/4613 [01:32<53:00,  1.41it/s]  3%|▎         | 142/4613 [01:32<41:35,  1.79it/s]  3%|▎         | 143/4613 [01:33<48:50,  1.53it/s]  3%|▎         | 144/4613 [01:34<1:04:00,  1.16it/s]  3%|▎         | 145/4613 [01:34<52:07,  1.43it/s]    3%|▎         | 146/4613 [01:35<55:40,  1.34it/s]  3%|▎         | 147/4613 [01:36<56:00,  1.33it/s]  3%|▎         | 148/4613 [01:37<53:50,  1.38it/s]  3%|▎         | 149/4613 [01:37<58:04,  1.28it/s]  3%|▎         | 150/4613 [01:38<44:06,  1.69it/s]  3%|▎         | 151/4613 [01:38<46:01,  1.62it/s]  3%|▎         | 152/4613 [01:38<35:37,  2.09it/s]  3%|▎         | 153/4613 [01:39<41:14,  1.80it/s]  3%|▎         | 154/4613 [01:40<38:31,  1.93it/s]  3%|▎         | 155/4613 [01:40<41:08,  1.81it/s]  3%|▎         | 156/4613 [01:41<43:50,  1.69it/s]  3%|▎         | 157/4613 [01:41<33:39,  2.21it/s]  3%|▎         | 158/4613 [01:42<40:17,  1.84it/s]  3%|▎         | 159/4613 [01:42<33:36,  2.21it/s]  3%|▎         | 160/4613 [01:43<38:00,  1.95it/s]  3%|▎         | 161/4613 [01:44<48:36,  1.53it/s]  4%|▎         | 162/4613 [01:44<48:51,  1.52it/s]  4%|▎         | 163/4613 [01:45<38:10,  1.94it/s]  4%|▎         | 164/4613 [01:45<44:16,  1.67it/s]  4%|▎         | 165/4613 [01:46<47:37,  1.56it/s]  4%|▎         | 166/4613 [01:46<38:00,  1.95it/s]  4%|▎         | 167/4613 [01:47<42:01,  1.76it/s]  4%|▎         | 168/4613 [01:48<45:43,  1.62it/s]  4%|▎         | 169/4613 [01:48<38:43,  1.91it/s]  4%|▎         | 170/4613 [01:49<41:24,  1.79it/s]  4%|▎         | 171/4613 [01:49<32:48,  2.26it/s]  4%|▎         | 172/4613 [01:49<37:14,  1.99it/s]  4%|▍         | 173/4613 [01:50<29:23,  2.52it/s]  4%|▍         | 174/4613 [01:51<40:30,  1.83it/s]  4%|▍         | 175/4613 [01:51<45:36,  1.62it/s]  4%|▍         | 176/4613 [01:52<48:06,  1.54it/s]  4%|▍         | 177/4613 [01:52<39:12,  1.89it/s]  4%|▍         | 178/4613 [01:53<44:40,  1.65it/s]  4%|▍         | 179/4613 [01:54<47:52,  1.54it/s]  4%|▍         | 180/4613 [01:55<49:57,  1.48it/s]  4%|▍         | 181/4613 [01:55<41:41,  1.77it/s]  4%|▍         | 182/4613 [01:56<43:00,  1.72it/s]  4%|▍         | 183/4613 [01:56<49:01,  1.51it/s]  4%|▍         | 184/4613 [01:57<38:51,  1.90it/s]  4%|▍         | 185/4613 [01:57<41:15,  1.79it/s]  4%|▍         | 186/4613 [01:57<33:11,  2.22it/s]  4%|▍         | 187/4613 [01:58<40:02,  1.84it/s]  4%|▍         | 188/4613 [01:59<42:56,  1.72it/s]  4%|▍         | 189/4613 [01:59<36:18,  2.03it/s]  4%|▍         | 190/4613 [02:00<40:59,  1.80it/s]  4%|▍         | 191/4613 [02:00<32:40,  2.26it/s]  4%|▍         | 192/4613 [02:01<36:41,  2.01it/s]  4%|▍         | 193/4613 [02:01<32:01,  2.30it/s]  4%|▍         | 194/4613 [02:03<1:17:05,  1.05s/it]  4%|▍         | 195/4613 [02:04<1:11:15,  1.03it/s]  4%|▍         | 196/4613 [02:06<1:21:38,  1.11s/it]  4%|▍         | 197/4613 [02:06<1:01:46,  1.19it/s]  4%|▍         | 198/4613 [02:07<1:17:52,  1.06s/it]  4%|▍         | 199/4613 [02:08<1:11:28,  1.03it/s]  4%|▍         | 200/4613 [02:08<53:56,  1.36it/s]    4%|▍         | 201/4613 [02:09<54:52,  1.34it/s]  4%|▍         | 202/4613 [02:10<54:44,  1.34it/s]  4%|▍         | 203/4613 [02:10<41:57,  1.75it/s]  4%|▍         | 204/4613 [02:11<46:41,  1.57it/s]  4%|▍         | 205/4613 [02:12<48:35,  1.51it/s]  4%|▍         | 206/4613 [02:12<38:42,  1.90it/s]  4%|▍         | 207/4613 [02:13<44:51,  1.64it/s]  5%|▍         | 208/4613 [02:13<46:46,  1.57it/s]  5%|▍         | 209/4613 [02:13<36:08,  2.03it/s]  5%|▍         | 210/4613 [02:14<42:09,  1.74it/s]  5%|▍         | 211/4613 [02:15<46:06,  1.59it/s]  5%|▍         | 212/4613 [02:15<39:21,  1.86it/s]  5%|▍         | 213/4613 [02:17<58:53,  1.25it/s]  5%|▍         | 214/4613 [02:17<58:38,  1.25it/s]  5%|▍         | 215/4613 [02:18<44:39,  1.64it/s]  5%|▍         | 216/4613 [02:18<46:31,  1.58it/s]  5%|▍         | 217/4613 [02:19<40:07,  1.83it/s]  5%|▍         | 218/4613 [02:19<41:47,  1.75it/s]  5%|▍         | 219/4613 [02:20<47:14,  1.55it/s]  5%|▍         | 220/4613 [02:21<50:22,  1.45it/s]  5%|▍         | 221/4613 [02:22<54:54,  1.33it/s]  5%|▍         | 222/4613 [02:22<42:58,  1.70it/s]  5%|▍         | 223/4613 [02:23<45:44,  1.60it/s]  5%|▍         | 224/4613 [02:23<35:11,  2.08it/s]  5%|▍         | 225/4613 [02:24<42:17,  1.73it/s]  5%|▍         | 226/4613 [02:24<45:23,  1.61it/s]  5%|▍         | 227/4613 [02:25<35:05,  2.08it/s]  5%|▍         | 228/4613 [02:25<40:38,  1.80it/s]  5%|▍         | 229/4613 [02:25<32:06,  2.28it/s]  5%|▍         | 230/4613 [02:26<39:51,  1.83it/s]  5%|▌         | 231/4613 [02:26<32:55,  2.22it/s]  5%|▌         | 232/4613 [02:27<36:24,  2.01it/s]  5%|▌         | 233/4613 [02:27<31:09,  2.34it/s]  5%|▌         | 234/4613 [02:28<37:47,  1.93it/s]  5%|▌         | 235/4613 [02:29<42:53,  1.70it/s]  5%|▌         | 236/4613 [02:30<49:48,  1.46it/s]  5%|▌         | 237/4613 [02:30<49:37,  1.47it/s]  5%|▌         | 238/4613 [02:31<55:08,  1.32it/s]  5%|▌         | 239/4613 [02:32<57:34,  1.27it/s]  5%|▌         | 240/4613 [02:33<57:06,  1.28it/s]  5%|▌         | 241/4613 [02:34<56:12,  1.30it/s]  5%|▌         | 242/4613 [02:34<42:47,  1.70it/s]  5%|▌         | 243/4613 [02:35<44:22,  1.64it/s]  5%|▌         | 244/4613 [02:35<35:04,  2.08it/s]  5%|▌         | 245/4613 [02:35<38:52,  1.87it/s]  5%|▌         | 246/4613 [02:35<30:09,  2.41it/s]  5%|▌         | 247/4613 [02:37<52:23,  1.39it/s]  5%|▌         | 248/4613 [02:37<41:21,  1.76it/s]  5%|▌         | 249/4613 [02:39<1:02:57,  1.16it/s]  5%|▌         | 250/4613 [02:39<49:39,  1.46it/s]    5%|▌         | 251/4613 [02:40<51:42,  1.41it/s]  5%|▌         | 252/4613 [02:40<50:33,  1.44it/s]  5%|▌         | 253/4613 [02:41<38:42,  1.88it/s]  6%|▌         | 254/4613 [02:42<1:00:12,  1.21it/s]  6%|▌         | 255/4613 [02:42<46:04,  1.58it/s]    6%|▌         | 256/4613 [02:43<47:10,  1.54it/s]  6%|▌         | 257/4613 [02:44<49:42,  1.46it/s]  6%|▌         | 258/4613 [02:44<38:17,  1.90it/s]  6%|▌         | 259/4613 [02:45<46:34,  1.56it/s]  6%|▌         | 260/4613 [02:46<52:53,  1.37it/s]  6%|▌         | 261/4613 [02:46<50:55,  1.42it/s]  6%|▌         | 262/4613 [02:47<39:57,  1.81it/s]  6%|▌         | 263/4613 [02:47<42:30,  1.71it/s]  6%|▌         | 264/4613 [02:48<45:53,  1.58it/s]  6%|▌         | 265/4613 [02:48<35:42,  2.03it/s]  6%|▌         | 266/4613 [02:49<41:58,  1.73it/s]  6%|▌         | 267/4613 [02:50<48:08,  1.50it/s]  6%|▌         | 268/4613 [02:51<51:53,  1.40it/s]  6%|▌         | 269/4613 [02:51<53:53,  1.34it/s]  6%|▌         | 270/4613 [02:52<53:34,  1.35it/s]  6%|▌         | 271/4613 [02:52<41:49,  1.73it/s]  6%|▌         | 272/4613 [02:53<46:34,  1.55it/s]  6%|▌         | 273/4613 [02:54<48:47,  1.48it/s]  6%|▌         | 274/4613 [02:55<51:21,  1.41it/s]  6%|▌         | 275/4613 [02:55<41:59,  1.72it/s]  6%|▌         | 276/4613 [02:56<44:16,  1.63it/s]  6%|▌         | 277/4613 [02:56<48:02,  1.50it/s]  6%|▌         | 278/4613 [02:57<37:02,  1.95it/s]  6%|▌         | 279/4613 [02:57<43:19,  1.67it/s]  6%|▌         | 280/4613 [02:58<49:19,  1.46it/s]  6%|▌         | 281/4613 [02:59<50:03,  1.44it/s]  6%|▌         | 282/4613 [02:59<39:41,  1.82it/s]  6%|▌         | 283/4613 [03:00<42:37,  1.69it/s]  6%|▌         | 284/4613 [03:01<47:20,  1.52it/s]  6%|▌         | 285/4613 [03:01<36:21,  1.98it/s]  6%|▌         | 286/4613 [03:02<41:27,  1.74it/s]  6%|▌         | 287/4613 [03:02<46:02,  1.57it/s]  6%|▌         | 288/4613 [03:03<36:42,  1.96it/s]  6%|▋         | 289/4613 [03:03<42:26,  1.70it/s]  6%|▋         | 290/4613 [03:04<45:39,  1.58it/s]  6%|▋         | 291/4613 [03:05<50:24,  1.43it/s]  6%|▋         | 292/4613 [03:05<39:29,  1.82it/s]  6%|▋         | 293/4613 [03:06<45:08,  1.60it/s]  6%|▋         | 294/4613 [03:07<47:16,  1.52it/s]  6%|▋         | 295/4613 [03:07<38:26,  1.87it/s]  6%|▋         | 296/4613 [03:08<42:41,  1.69it/s]  6%|▋         | 297/4613 [03:08<45:46,  1.57it/s]  6%|▋         | 298/4613 [03:09<36:32,  1.97it/s]  6%|▋         | 299/4613 [03:09<40:32,  1.77it/s]  7%|▋         | 300/4613 [03:11<1:06:34,  1.08it/s]  7%|▋         | 301/4613 [03:12<1:01:14,  1.17it/s]  7%|▋         | 302/4613 [03:13<59:54,  1.20it/s]    7%|▋         | 303/4613 [03:13<48:44,  1.47it/s]  7%|▋         | 304/4613 [03:14<52:19,  1.37it/s]  7%|▋         | 305/4613 [03:14<50:28,  1.42it/s]  7%|▋         | 306/4613 [03:15<40:32,  1.77it/s]  7%|▋         | 307/4613 [03:15<43:29,  1.65it/s]  7%|▋         | 308/4613 [03:16<46:07,  1.56it/s]  7%|▋         | 309/4613 [03:16<38:57,  1.84it/s]  7%|▋         | 310/4613 [03:17<41:27,  1.73it/s]  7%|▋         | 311/4613 [03:17<32:54,  2.18it/s]  7%|▋         | 312/4613 [03:18<37:59,  1.89it/s]  7%|▋         | 313/4613 [03:19<42:08,  1.70it/s]  7%|▋         | 314/4613 [03:19<33:51,  2.12it/s]  7%|▋         | 315/4613 [03:20<39:21,  1.82it/s]  7%|▋         | 316/4613 [03:20<31:19,  2.29it/s]  7%|▋         | 317/4613 [03:21<52:59,  1.35it/s]  7%|▋         | 318/4613 [03:21<41:03,  1.74it/s]  7%|▋         | 319/4613 [03:22<43:36,  1.64it/s]  7%|▋         | 320/4613 [03:22<33:26,  2.14it/s]  7%|▋         | 321/4613 [03:23<40:54,  1.75it/s]  7%|▋         | 322/4613 [03:23<33:56,  2.11it/s]  7%|▋         | 323/4613 [03:24<37:05,  1.93it/s]  7%|▋         | 324/4613 [03:24<31:03,  2.30it/s]  7%|▋         | 325/4613 [03:25<38:27,  1.86it/s]  7%|▋         | 326/4613 [03:26<44:43,  1.60it/s]  7%|▋         | 327/4613 [03:26<36:29,  1.96it/s]  7%|▋         | 328/4613 [03:27<41:02,  1.74it/s]  7%|▋         | 329/4613 [03:27<43:23,  1.65it/s]  7%|▋         | 330/4613 [03:28<34:13,  2.09it/s]  7%|▋         | 331/4613 [03:28<41:02,  1.74it/s]  7%|▋         | 332/4613 [03:29<43:59,  1.62it/s]  7%|▋         | 333/4613 [03:29<35:27,  2.01it/s]  7%|▋         | 334/4613 [03:30<43:43,  1.63it/s]  7%|▋         | 335/4613 [03:31<48:41,  1.46it/s]  7%|▋         | 336/4613 [03:32<48:48,  1.46it/s]  7%|▋         | 337/4613 [03:32<37:33,  1.90it/s]  7%|▋         | 338/4613 [03:33<41:03,  1.74it/s]  7%|▋         | 339/4613 [03:33<31:53,  2.23it/s]  7%|▋         | 340/4613 [03:33<37:13,  1.91it/s]  7%|▋         | 341/4613 [03:34<49:29,  1.44it/s]  7%|▋         | 342/4613 [03:35<47:59,  1.48it/s]  7%|▋         | 343/4613 [03:36<51:38,  1.38it/s]  7%|▋         | 344/4613 [03:37<54:48,  1.30it/s]  7%|▋         | 345/4613 [03:38<54:15,  1.31it/s]  8%|▊         | 346/4613 [03:38<44:33,  1.60it/s]  8%|▊         | 347/4613 [03:39<50:41,  1.40it/s]  8%|▊         | 348/4613 [03:39<49:47,  1.43it/s]  8%|▊         | 349/4613 [03:41<1:10:45,  1.00it/s]  8%|▊         | 350/4613 [03:43<1:24:37,  1.19s/it]  8%|▊         | 351/4613 [03:43<1:03:47,  1.11it/s]  8%|▊         | 352/4613 [03:44<59:24,  1.20it/s]    8%|▊         | 353/4613 [03:45<1:00:34,  1.17it/s]  8%|▊         | 354/4613 [03:46<1:16:30,  1.08s/it]  8%|▊         | 355/4613 [03:46<57:16,  1.24it/s]    8%|▊         | 356/4613 [03:48<1:11:12,  1.00s/it]  8%|▊         | 357/4613 [03:48<52:43,  1.35it/s]    8%|▊         | 358/4613 [03:49<56:04,  1.26it/s]  8%|▊         | 359/4613 [03:50<54:06,  1.31it/s]  8%|▊         | 360/4613 [03:50<55:44,  1.27it/s]  8%|▊         | 361/4613 [03:51<43:15,  1.64it/s]  8%|▊         | 362/4613 [03:51<44:30,  1.59it/s]  8%|▊         | 363/4613 [03:51<35:53,  1.97it/s]  8%|▊         | 364/4613 [03:52<40:49,  1.73it/s]  8%|▊         | 365/4613 [03:54<1:02:51,  1.13it/s]  8%|▊         | 366/4613 [03:54<50:06,  1.41it/s]    8%|▊         | 367/4613 [03:55<49:34,  1.43it/s]  8%|▊         | 368/4613 [03:56<54:58,  1.29it/s]  8%|▊         | 369/4613 [03:56<52:44,  1.34it/s]  8%|▊         | 370/4613 [03:57<41:12,  1.72it/s]  8%|▊         | 371/4613 [03:57<45:16,  1.56it/s]  8%|▊         | 372/4613 [03:58<35:36,  1.98it/s]  8%|▊         | 373/4613 [03:58<39:17,  1.80it/s]  8%|▊         | 374/4613 [03:59<43:36,  1.62it/s]  8%|▊         | 375/4613 [04:00<49:16,  1.43it/s]  8%|▊         | 376/4613 [04:01<49:54,  1.41it/s]  8%|▊         | 377/4613 [04:03<1:14:20,  1.05s/it]  8%|▊         | 378/4613 [04:03<1:08:31,  1.03it/s]  8%|▊         | 379/4613 [04:03<51:47,  1.36it/s]    8%|▊         | 380/4613 [04:04<50:29,  1.40it/s]  8%|▊         | 381/4613 [04:04<38:57,  1.81it/s]  8%|▊         | 382/4613 [04:05<42:39,  1.65it/s]  8%|▊         | 383/4613 [04:05<36:49,  1.91it/s]  8%|▊         | 384/4613 [04:07<54:30,  1.29it/s]  8%|▊         | 385/4613 [04:07<44:32,  1.58it/s]  8%|▊         | 386/4613 [04:08<59:43,  1.18it/s]  8%|▊         | 387/4613 [04:09<45:38,  1.54it/s]  8%|▊         | 388/4613 [04:09<46:59,  1.50it/s]  8%|▊         | 389/4613 [04:09<36:03,  1.95it/s]  8%|▊         | 390/4613 [04:10<40:24,  1.74it/s]  8%|▊         | 391/4613 [04:10<32:51,  2.14it/s]  8%|▊         | 392/4613 [04:11<38:03,  1.85it/s]  9%|▊         | 393/4613 [04:12<42:25,  1.66it/s]  9%|▊         | 394/4613 [04:12<32:39,  2.15it/s]  9%|▊         | 395/4613 [04:12<27:25,  2.56it/s]  9%|▊         | 396/4613 [04:13<36:58,  1.90it/s]  9%|▊         | 397/4613 [04:14<39:58,  1.76it/s]  9%|▊         | 398/4613 [04:14<32:41,  2.15it/s]  9%|▊         | 399/4613 [04:15<36:41,  1.91it/s]  9%|▊         | 400/4613 [04:15<42:09,  1.67it/s]  9%|▊         | 401/4613 [04:16<33:38,  2.09it/s]  9%|▊         | 402/4613 [04:17<53:02,  1.32it/s]  9%|▊         | 403/4613 [04:17<40:38,  1.73it/s]  9%|▉         | 404/4613 [04:19<1:00:05,  1.17it/s]  9%|▉         | 405/4613 [04:19<59:17,  1.18it/s]    9%|▉         | 406/4613 [04:20<44:34,  1.57it/s]  9%|▉         | 407/4613 [04:20<35:45,  1.96it/s]  9%|▉         | 408/4613 [04:20<39:22,  1.78it/s]  9%|▉         | 409/4613 [04:21<47:42,  1.47it/s]  9%|▉         | 410/4613 [04:22<49:26,  1.42it/s]  9%|▉         | 411/4613 [04:23<51:25,  1.36it/s]  9%|▉         | 412/4613 [04:23<41:33,  1.68it/s]  9%|▉         | 413/4613 [04:24<44:51,  1.56it/s]  9%|▉         | 414/4613 [04:24<36:04,  1.94it/s]  9%|▉         | 415/4613 [04:25<40:50,  1.71it/s]  9%|▉         | 416/4613 [04:26<43:38,  1.60it/s]  9%|▉         | 417/4613 [04:26<46:02,  1.52it/s]  9%|▉         | 418/4613 [04:27<35:52,  1.95it/s]  9%|▉         | 419/4613 [04:27<40:33,  1.72it/s]  9%|▉         | 420/4613 [04:28<32:42,  2.14it/s]  9%|▉         | 421/4613 [04:28<39:19,  1.78it/s]  9%|▉         | 422/4613 [04:29<49:56,  1.40it/s]  9%|▉         | 423/4613 [04:30<48:10,  1.45it/s]  9%|▉         | 424/4613 [04:30<37:33,  1.86it/s]  9%|▉         | 425/4613 [04:31<42:01,  1.66it/s]  9%|▉         | 426/4613 [04:32<46:55,  1.49it/s]  9%|▉         | 427/4613 [04:33<49:04,  1.42it/s]  9%|▉         | 428/4613 [04:33<52:43,  1.32it/s]  9%|▉         | 429/4613 [04:34<54:27,  1.28it/s]  9%|▉         | 430/4613 [04:35<53:23,  1.31it/s]  9%|▉         | 431/4613 [04:35<42:40,  1.63it/s]  9%|▉         | 432/4613 [04:36<45:18,  1.54it/s]  9%|▉         | 433/4613 [04:37<47:10,  1.48it/s]  9%|▉         | 434/4613 [04:37<37:35,  1.85it/s]  9%|▉         | 435/4613 [04:38<42:21,  1.64it/s]  9%|▉         | 436/4613 [04:39<45:31,  1.53it/s]  9%|▉         | 437/4613 [04:39<35:58,  1.94it/s]  9%|▉         | 438/4613 [04:39<40:28,  1.72it/s] 10%|▉         | 439/4613 [04:40<45:10,  1.54it/s] 10%|▉         | 440/4613 [04:41<37:24,  1.86it/s] 10%|▉         | 441/4613 [04:41<39:24,  1.76it/s] 10%|▉         | 442/4613 [04:41<31:36,  2.20it/s] 10%|▉         | 443/4613 [04:42<38:10,  1.82it/s] 10%|▉         | 444/4613 [04:43<41:18,  1.68it/s] 10%|▉         | 445/4613 [04:43<33:19,  2.08it/s] 10%|▉         | 446/4613 [04:44<38:32,  1.80it/s] 10%|▉         | 447/4613 [04:44<31:00,  2.24it/s] 10%|▉         | 448/4613 [04:45<34:36,  2.01it/s] 10%|▉         | 449/4613 [04:45<27:31,  2.52it/s] 10%|▉         | 450/4613 [04:45<33:56,  2.04it/s] 10%|▉         | 451/4613 [04:46<26:48,  2.59it/s] 10%|▉         | 452/4613 [04:46<32:57,  2.10it/s] 10%|▉         | 453/4613 [04:47<41:29,  1.67it/s] 10%|▉         | 454/4613 [04:48<46:05,  1.50it/s] 10%|▉         | 455/4613 [04:48<36:05,  1.92it/s] 10%|▉         | 456/4613 [04:49<39:45,  1.74it/s] 10%|▉         | 457/4613 [04:50<43:44,  1.58it/s] 10%|▉         | 458/4613 [04:50<34:12,  2.02it/s] 10%|▉         | 459/4613 [04:51<39:27,  1.75it/s] 10%|▉         | 460/4613 [04:51<30:48,  2.25it/s] 10%|▉         | 461/4613 [04:52<38:14,  1.81it/s] 10%|█         | 462/4613 [04:52<42:32,  1.63it/s] 10%|█         | 463/4613 [04:53<34:38,  2.00it/s] 10%|█         | 464/4613 [04:53<38:38,  1.79it/s] 10%|█         | 465/4613 [04:54<42:40,  1.62it/s] 10%|█         | 466/4613 [04:55<49:27,  1.40it/s] 10%|█         | 467/4613 [04:55<38:57,  1.77it/s] 10%|█         | 468/4613 [04:56<55:49,  1.24it/s] 10%|█         | 469/4613 [04:57<55:01,  1.26it/s] 10%|█         | 470/4613 [04:57<42:25,  1.63it/s] 10%|█         | 471/4613 [04:58<46:55,  1.47it/s] 10%|█         | 472/4613 [04:58<36:55,  1.87it/s] 10%|█         | 473/4613 [04:59<39:10,  1.76it/s] 10%|█         | 474/4613 [04:59<32:01,  2.15it/s] 10%|█         | 475/4613 [05:00<38:28,  1.79it/s] 10%|█         | 476/4613 [05:01<41:18,  1.67it/s] 10%|█         | 477/4613 [05:01<33:47,  2.04it/s] 10%|█         | 478/4613 [05:02<37:11,  1.85it/s] 10%|█         | 479/4613 [05:02<31:13,  2.21it/s] 10%|█         | 480/4613 [05:03<49:57,  1.38it/s] 10%|█         | 481/4613 [05:03<37:40,  1.83it/s] 10%|█         | 482/4613 [05:04<29:58,  2.30it/s] 10%|█         | 483/4613 [05:04<35:57,  1.91it/s] 10%|█         | 484/4613 [05:05<29:17,  2.35it/s] 11%|█         | 485/4613 [05:05<34:31,  1.99it/s] 11%|█         | 486/4613 [05:06<40:30,  1.70it/s] 11%|█         | 487/4613 [05:07<43:05,  1.60it/s] 11%|█         | 488/4613 [05:07<35:40,  1.93it/s] 11%|█         | 489/4613 [05:08<40:24,  1.70it/s] 11%|█         | 490/4613 [05:08<32:43,  2.10it/s] 11%|█         | 491/4613 [05:09<36:03,  1.91it/s] 11%|█         | 492/4613 [05:09<41:59,  1.64it/s] 11%|█         | 493/4613 [05:10<32:10,  2.13it/s] 11%|█         | 494/4613 [05:10<36:31,  1.88it/s] 11%|█         | 495/4613 [05:11<42:35,  1.61it/s] 11%|█         | 496/4613 [05:13<1:19:46,  1.16s/it] 11%|█         | 497/4613 [05:14<59:45,  1.15it/s]   11%|█         | 498/4613 [05:14<55:34,  1.23it/s] 11%|█         | 499/4613 [05:15<42:52,  1.60it/s] 11%|█         | 500/4613 [05:15<46:59,  1.46it/s] 11%|█         | 501/4613 [05:16<49:02,  1.40it/s] 11%|█         | 502/4613 [05:16<37:53,  1.81it/s] 11%|█         | 503/4613 [05:17<30:57,  2.21it/s] 11%|█         | 504/4613 [05:17<38:04,  1.80it/s] 11%|█         | 505/4613 [05:18<42:26,  1.61it/s] 11%|█         | 506/4613 [05:19<47:02,  1.46it/s] 11%|█         | 507/4613 [05:20<49:15,  1.39it/s] 11%|█         | 508/4613 [05:21<53:00,  1.29it/s] 11%|█         | 509/4613 [05:21<52:20,  1.31it/s] 11%|█         | 510/4613 [05:22<41:15,  1.66it/s] 11%|█         | 511/4613 [05:22<43:10,  1.58it/s] 11%|█         | 512/4613 [05:22<33:33,  2.04it/s] 11%|█         | 513/4613 [05:23<37:18,  1.83it/s] 11%|█         | 514/4613 [05:23<30:03,  2.27it/s] 11%|█         | 515/4613 [05:24<35:06,  1.95it/s] 11%|█         | 516/4613 [05:24<28:18,  2.41it/s] 11%|█         | 517/4613 [05:26<48:11,  1.42it/s] 11%|█         | 518/4613 [05:26<40:08,  1.70it/s] 11%|█▏        | 519/4613 [05:27<41:34,  1.64it/s] 11%|█▏        | 520/4613 [05:27<45:38,  1.49it/s] 11%|█▏        | 521/4613 [05:29<1:03:57,  1.07it/s] 11%|█▏        | 522/4613 [05:29<49:03,  1.39it/s]   11%|█▏        | 523/4613 [05:30<50:38,  1.35it/s] 11%|█▏        | 524/4613 [05:31<50:26,  1.35it/s] 11%|█▏        | 525/4613 [05:32<54:44,  1.24it/s] 11%|█▏        | 526/4613 [05:32<52:14,  1.30it/s] 11%|█▏        | 527/4613 [05:33<58:01,  1.17it/s] 11%|█▏        | 528/4613 [05:34<54:10,  1.26it/s] 11%|█▏        | 529/4613 [05:34<41:00,  1.66it/s] 11%|█▏        | 530/4613 [05:35<45:10,  1.51it/s] 12%|█▏        | 531/4613 [05:36<47:52,  1.42it/s] 12%|█▏        | 532/4613 [05:36<40:30,  1.68it/s] 12%|█▏        | 533/4613 [05:38<58:01,  1.17it/s] 12%|█▏        | 534/4613 [05:38<45:00,  1.51it/s] 12%|█▏        | 535/4613 [05:38<44:54,  1.51it/s] 12%|█▏        | 536/4613 [05:39<47:21,  1.43it/s] 12%|█▏        | 537/4613 [05:40<51:28,  1.32it/s] 12%|█▏        | 538/4613 [05:40<38:58,  1.74it/s] 12%|█▏        | 539/4613 [05:41<42:06,  1.61it/s] 12%|█▏        | 540/4613 [05:41<35:41,  1.90it/s] 12%|█▏        | 541/4613 [05:42<41:55,  1.62it/s] 12%|█▏        | 542/4613 [05:43<42:46,  1.59it/s] 12%|█▏        | 543/4613 [05:44<45:43,  1.48it/s] 12%|█▏        | 544/4613 [05:45<51:33,  1.32it/s] 12%|█▏        | 545/4613 [05:45<54:03,  1.25it/s] 12%|█▏        | 546/4613 [05:46<54:28,  1.24it/s] 12%|█▏        | 547/4613 [05:47<54:18,  1.25it/s] 12%|█▏        | 548/4613 [05:47<42:17,  1.60it/s] 12%|█▏        | 549/4613 [05:48<41:59,  1.61it/s] 12%|█▏        | 550/4613 [05:49<47:30,  1.43it/s] 12%|█▏        | 551/4613 [05:49<47:32,  1.42it/s] 12%|█▏        | 552/4613 [05:50<51:09,  1.32it/s] 12%|█▏        | 553/4613 [05:51<39:17,  1.72it/s] 12%|█▏        | 554/4613 [05:51<41:12,  1.64it/s] 12%|█▏        | 555/4613 [05:51<32:52,  2.06it/s] 12%|█▏        | 556/4613 [05:52<38:02,  1.78it/s] 12%|█▏        | 557/4613 [05:52<29:40,  2.28it/s] 12%|█▏        | 558/4613 [05:53<37:02,  1.82it/s] 12%|█▏        | 559/4613 [05:54<40:58,  1.65it/s] 12%|█▏        | 560/4613 [05:54<32:12,  2.10it/s] 12%|█▏        | 561/4613 [05:55<36:30,  1.85it/s] 12%|█▏        | 562/4613 [05:56<43:39,  1.55it/s] 12%|█▏        | 563/4613 [05:56<34:46,  1.94it/s] 12%|█▏        | 564/4613 [05:56<38:08,  1.77it/s] 12%|█▏        | 565/4613 [05:57<31:33,  2.14it/s] 12%|█▏        | 566/4613 [05:57<34:24,  1.96it/s] 12%|█▏        | 567/4613 [05:58<39:28,  1.71it/s] 12%|█▏        | 568/4613 [05:58<31:54,  2.11it/s] 12%|█▏        | 569/4613 [05:59<40:01,  1.68it/s] 12%|█▏        | 570/4613 [06:00<41:01,  1.64it/s] 12%|█▏        | 571/4613 [06:00<32:47,  2.05it/s] 12%|█▏        | 572/4613 [06:01<36:03,  1.87it/s] 12%|█▏        | 573/4613 [06:02<43:10,  1.56it/s] 12%|█▏        | 574/4613 [06:02<43:47,  1.54it/s] 12%|█▏        | 575/4613 [06:02<33:37,  2.00it/s] 12%|█▏        | 576/4613 [06:03<38:18,  1.76it/s] 13%|█▎        | 577/4613 [06:03<30:04,  2.24it/s] 13%|█▎        | 578/4613 [06:04<40:08,  1.68it/s] 13%|█▎        | 579/4613 [06:05<44:16,  1.52it/s] 13%|█▎        | 580/4613 [06:06<43:56,  1.53it/s] 13%|█▎        | 581/4613 [06:06<33:44,  1.99it/s] 13%|█▎        | 582/4613 [06:07<41:59,  1.60it/s] 13%|█▎        | 583/4613 [06:07<44:05,  1.52it/s] 13%|█▎        | 584/4613 [06:08<45:56,  1.46it/s] 13%|█▎        | 585/4613 [06:08<37:40,  1.78it/s] 13%|█▎        | 586/4613 [06:09<44:46,  1.50it/s] 13%|█▎        | 587/4613 [06:10<46:43,  1.44it/s] 13%|█▎        | 588/4613 [06:11<47:34,  1.41it/s] 13%|█▎        | 589/4613 [06:11<38:07,  1.76it/s] 13%|█▎        | 590/4613 [06:12<39:28,  1.70it/s] 13%|█▎        | 591/4613 [06:12<31:20,  2.14it/s] 13%|█▎        | 592/4613 [06:13<36:55,  1.82it/s] 13%|█▎        | 593/4613 [06:13<40:38,  1.65it/s] 13%|█▎        | 594/4613 [06:14<34:07,  1.96it/s] 13%|█▎        | 595/4613 [06:15<40:09,  1.67it/s] 13%|█▎        | 596/4613 [06:15<41:34,  1.61it/s] 13%|█▎        | 597/4613 [06:16<46:51,  1.43it/s] 13%|█▎        | 598/4613 [06:17<46:26,  1.44it/s] 13%|█▎        | 599/4613 [06:18<49:33,  1.35it/s] 13%|█▎        | 600/4613 [06:18<41:21,  1.62it/s] 13%|█▎        | 601/4613 [06:19<41:26,  1.61it/s] 13%|█▎        | 602/4613 [06:19<45:00,  1.49it/s] 13%|█▎        | 603/4613 [06:20<35:46,  1.87it/s] 13%|█▎        | 604/4613 [06:20<38:38,  1.73it/s] 13%|█▎        | 605/4613 [06:20<30:49,  2.17it/s] 13%|█▎        | 606/4613 [06:21<34:58,  1.91it/s] 13%|█▎        | 607/4613 [06:22<41:11,  1.62it/s] 13%|█▎        | 608/4613 [06:23<45:45,  1.46it/s] 13%|█▎        | 609/4613 [06:23<35:22,  1.89it/s] 13%|█▎        | 610/4613 [06:24<38:31,  1.73it/s] 13%|█▎        | 611/4613 [06:24<31:34,  2.11it/s] 13%|█▎        | 612/4613 [06:25<35:49,  1.86it/s] 13%|█▎        | 613/4613 [06:25<28:30,  2.34it/s] 13%|█▎        | 614/4613 [06:26<34:56,  1.91it/s] 13%|█▎        | 615/4613 [06:26<40:08,  1.66it/s] 13%|█▎        | 616/4613 [06:27<44:20,  1.50it/s] 13%|█▎        | 617/4613 [06:27<37:51,  1.76it/s] 13%|█▎        | 618/4613 [06:28<41:29,  1.60it/s] 13%|█▎        | 619/4613 [06:29<42:53,  1.55it/s] 13%|█▎        | 620/4613 [06:29<33:28,  1.99it/s] 13%|█▎        | 621/4613 [06:30<36:43,  1.81it/s] 13%|█▎        | 622/4613 [06:30<31:18,  2.12it/s] 14%|█▎        | 623/4613 [06:31<36:37,  1.82it/s] 14%|█▎        | 624/4613 [06:31<39:20,  1.69it/s] 14%|█▎        | 625/4613 [06:32<32:53,  2.02it/s] 14%|█▎        | 626/4613 [06:32<36:17,  1.83it/s] 14%|█▎        | 627/4613 [06:33<40:53,  1.62it/s] 14%|█▎        | 628/4613 [06:34<46:48,  1.42it/s] 14%|█▎        | 629/4613 [06:34<37:14,  1.78it/s] 14%|█▎        | 630/4613 [06:35<42:00,  1.58it/s] 14%|█▎        | 631/4613 [06:36<42:56,  1.55it/s] 14%|█▎        | 632/4613 [06:36<33:54,  1.96it/s] 14%|█▎        | 633/4613 [06:37<38:24,  1.73it/s] 14%|█▎        | 634/4613 [06:37<40:33,  1.64it/s] 14%|█▍        | 635/4613 [06:38<34:52,  1.90it/s] 14%|█▍        | 636/4613 [06:38<39:19,  1.69it/s] 14%|█▍        | 637/4613 [06:39<40:55,  1.62it/s] 14%|█▍        | 638/4613 [06:40<46:41,  1.42it/s] 14%|█▍        | 639/4613 [06:41<48:55,  1.35it/s] 14%|█▍        | 640/4613 [06:42<51:53,  1.28it/s] 14%|█▍        | 641/4613 [06:42<38:56,  1.70it/s] 14%|█▍        | 642/4613 [06:43<40:46,  1.62it/s] 14%|█▍        | 643/4613 [06:43<32:52,  2.01it/s] 14%|█▍        | 644/4613 [06:44<39:42,  1.67it/s] 14%|█▍        | 645/4613 [06:44<41:54,  1.58it/s] 14%|█▍        | 646/4613 [06:45<33:19,  1.98it/s] 14%|█▍        | 647/4613 [06:45<36:19,  1.82it/s] 14%|█▍        | 648/4613 [06:45<28:48,  2.29it/s] 14%|█▍        | 649/4613 [06:46<37:44,  1.75it/s] 14%|█▍        | 650/4613 [06:47<40:27,  1.63it/s] 14%|█▍        | 651/4613 [06:47<32:30,  2.03it/s] 14%|█▍        | 652/4613 [06:48<36:48,  1.79it/s] 14%|█▍        | 653/4613 [06:49<40:09,  1.64it/s] 14%|█▍        | 654/4613 [06:49<31:28,  2.10it/s] 14%|█▍        | 655/4613 [06:50<39:05,  1.69it/s] 14%|█▍        | 656/4613 [06:50<43:48,  1.51it/s] 14%|█▍        | 657/4613 [06:51<44:12,  1.49it/s] 14%|█▍        | 658/4613 [06:51<34:16,  1.92it/s] 14%|█▍        | 659/4613 [06:52<28:48,  2.29it/s] 14%|█▍        | 660/4613 [06:53<46:55,  1.40it/s] 14%|█▍        | 661/4613 [06:53<37:06,  1.77it/s] 14%|█▍        | 662/4613 [06:54<41:13,  1.60it/s] 14%|█▍        | 663/4613 [06:56<1:01:08,  1.08it/s] 14%|█▍        | 664/4613 [06:57<1:19:48,  1.21s/it] 14%|█▍        | 665/4613 [06:58<1:10:48,  1.08s/it] 14%|█▍        | 666/4613 [06:59<1:05:00,  1.01it/s] 14%|█▍        | 667/4613 [06:59<49:54,  1.32it/s]   14%|█▍        | 668/4613 [07:00<51:19,  1.28it/s] 15%|█▍        | 669/4613 [07:01<51:05,  1.29it/s] 15%|█▍        | 670/4613 [07:01<38:44,  1.70it/s] 15%|█▍        | 671/4613 [07:02<44:11,  1.49it/s] 15%|█▍        | 672/4613 [07:03<47:20,  1.39it/s] 15%|█▍        | 673/4613 [07:03<48:56,  1.34it/s] 15%|█▍        | 674/4613 [07:04<47:47,  1.37it/s] 15%|█▍        | 675/4613 [07:04<36:42,  1.79it/s] 15%|█▍        | 676/4613 [07:05<32:53,  1.99it/s] 15%|█▍        | 677/4613 [07:05<33:18,  1.97it/s] 15%|█▍        | 678/4613 [07:06<37:35,  1.74it/s] 15%|█▍        | 679/4613 [07:07<44:10,  1.48it/s] 15%|█▍        | 680/4613 [07:07<35:03,  1.87it/s] 15%|█▍        | 681/4613 [07:08<41:34,  1.58it/s] 15%|█▍        | 682/4613 [07:09<41:42,  1.57it/s] 15%|█▍        | 683/4613 [07:09<44:09,  1.48it/s] 15%|█▍        | 684/4613 [07:10<35:07,  1.86it/s] 15%|█▍        | 685/4613 [07:10<37:58,  1.72it/s] 15%|█▍        | 686/4613 [07:10<29:32,  2.22it/s] 15%|█▍        | 687/4613 [07:11<34:13,  1.91it/s] 15%|█▍        | 688/4613 [07:13<59:34,  1.10it/s] 15%|█▍        | 689/4613 [07:14<54:53,  1.19it/s] 15%|█▍        | 690/4613 [07:14<42:48,  1.53it/s] 15%|█▍        | 691/4613 [07:14<43:50,  1.49it/s] 15%|█▌        | 692/4613 [07:15<45:39,  1.43it/s] 15%|█▌        | 693/4613 [07:15<35:27,  1.84it/s] 15%|█▌        | 694/4613 [07:16<38:26,  1.70it/s] 15%|█▌        | 695/4613 [07:16<32:01,  2.04it/s] 15%|█▌        | 696/4613 [07:17<35:53,  1.82it/s] 15%|█▌        | 697/4613 [07:18<40:47,  1.60it/s] 15%|█▌        | 698/4613 [07:18<35:29,  1.84it/s] 15%|█▌        | 699/4613 [07:19<37:25,  1.74it/s] 15%|█▌        | 700/4613 [07:20<40:37,  1.61it/s] 15%|█▌        | 701/4613 [07:20<33:44,  1.93it/s] 15%|█▌        | 702/4613 [07:21<54:18,  1.20it/s] 15%|█▌        | 703/4613 [07:22<52:35,  1.24it/s] 15%|█▌        | 704/4613 [07:22<41:15,  1.58it/s] 15%|█▌        | 705/4613 [07:23<43:48,  1.49it/s] 15%|█▌        | 706/4613 [07:25<58:45,  1.11it/s] 15%|█▌        | 707/4613 [07:25<45:31,  1.43it/s] 15%|█▌        | 708/4613 [07:26<59:44,  1.09it/s] 15%|█▌        | 709/4613 [07:26<44:34,  1.46it/s] 15%|█▌        | 710/4613 [07:27<49:15,  1.32it/s] 15%|█▌        | 711/4613 [07:28<46:30,  1.40it/s] 15%|█▌        | 712/4613 [07:28<35:17,  1.84it/s] 15%|█▌        | 713/4613 [07:29<37:57,  1.71it/s] 15%|█▌        | 714/4613 [07:30<42:50,  1.52it/s] 15%|█▌        | 715/4613 [07:30<32:53,  1.98it/s] 16%|█▌        | 716/4613 [07:31<39:06,  1.66it/s] 16%|█▌        | 717/4613 [07:31<43:01,  1.51it/s] 16%|█▌        | 718/4613 [07:32<45:42,  1.42it/s] 16%|█▌        | 719/4613 [07:33<47:09,  1.38it/s] 16%|█▌        | 720/4613 [07:33<35:40,  1.82it/s] 16%|█▌        | 721/4613 [07:34<41:20,  1.57it/s] 16%|█▌        | 722/4613 [07:35<44:13,  1.47it/s] 16%|█▌        | 723/4613 [07:35<34:33,  1.88it/s] 16%|█▌        | 724/4613 [07:36<38:59,  1.66it/s] 16%|█▌        | 725/4613 [07:36<31:52,  2.03it/s] 16%|█▌        | 726/4613 [07:37<36:12,  1.79it/s] 16%|█▌        | 727/4613 [07:37<42:02,  1.54it/s] 16%|█▌        | 728/4613 [07:38<42:50,  1.51it/s] 16%|█▌        | 729/4613 [07:39<45:34,  1.42it/s] 16%|█▌        | 730/4613 [07:39<37:59,  1.70it/s] 16%|█▌        | 731/4613 [07:40<41:53,  1.54it/s] 16%|█▌        | 732/4613 [07:41<43:10,  1.50it/s] 16%|█▌        | 733/4613 [07:42<45:49,  1.41it/s] 16%|█▌        | 734/4613 [07:42<47:17,  1.37it/s] 16%|█▌        | 735/4613 [07:43<35:43,  1.81it/s] 16%|█▌        | 736/4613 [07:43<39:55,  1.62it/s] 16%|█▌        | 737/4613 [07:44<42:15,  1.53it/s] 16%|█▌        | 738/4613 [07:44<34:31,  1.87it/s] 16%|█▌        | 739/4613 [07:45<39:38,  1.63it/s] 16%|█▌        | 740/4613 [07:46<40:45,  1.58it/s] 16%|█▌        | 741/4613 [07:46<31:18,  2.06it/s] 16%|█▌        | 742/4613 [07:46<25:11,  2.56it/s] 16%|█▌        | 743/4613 [07:47<33:48,  1.91it/s] 16%|█▌        | 744/4613 [07:48<37:50,  1.70it/s] 16%|█▌        | 745/4613 [07:48<41:02,  1.57it/s] 16%|█▌        | 746/4613 [07:49<31:34,  2.04it/s] 16%|█▌        | 747/4613 [07:49<38:33,  1.67it/s] 16%|█▌        | 748/4613 [07:50<40:38,  1.59it/s] 16%|█▌        | 749/4613 [07:51<44:07,  1.46it/s] 16%|█▋        | 750/4613 [07:51<36:05,  1.78it/s] 16%|█▋        | 751/4613 [07:52<37:52,  1.70it/s] 16%|█▋        | 752/4613 [07:52<30:49,  2.09it/s] 16%|█▋        | 753/4613 [07:53<35:16,  1.82it/s] 16%|█▋        | 754/4613 [07:54<39:31,  1.63it/s] 16%|█▋        | 755/4613 [07:54<43:38,  1.47it/s] 16%|█▋        | 756/4613 [07:55<36:55,  1.74it/s] 16%|█▋        | 757/4613 [07:56<52:39,  1.22it/s] 16%|█▋        | 758/4613 [07:57<52:30,  1.22it/s] 16%|█▋        | 759/4613 [07:58<54:29,  1.18it/s] 16%|█▋        | 760/4613 [07:58<41:02,  1.56it/s] 16%|█▋        | 761/4613 [07:59<43:07,  1.49it/s] 17%|█▋        | 762/4613 [08:00<46:48,  1.37it/s] 17%|█▋        | 763/4613 [08:00<37:26,  1.71it/s] 17%|█▋        | 764/4613 [08:01<40:26,  1.59it/s] 17%|█▋        | 765/4613 [08:01<41:16,  1.55it/s] 17%|█▋        | 766/4613 [08:02<44:40,  1.44it/s] 17%|█▋        | 767/4613 [08:03<51:31,  1.24it/s] 17%|█▋        | 768/4613 [08:04<53:50,  1.19it/s] 17%|█▋        | 769/4613 [08:05<50:35,  1.27it/s] 17%|█▋        | 770/4613 [08:05<50:31,  1.27it/s] 17%|█▋        | 771/4613 [08:06<51:21,  1.25it/s] 17%|█▋        | 772/4613 [08:07<50:58,  1.26it/s] 17%|█▋        | 773/4613 [08:07<41:19,  1.55it/s] 17%|█▋        | 774/4613 [08:08<40:49,  1.57it/s] 17%|█▋        | 775/4613 [08:09<44:07,  1.45it/s] 17%|█▋        | 776/4613 [08:09<35:14,  1.81it/s] 17%|█▋        | 777/4613 [08:10<38:25,  1.66it/s] 17%|█▋        | 778/4613 [08:11<59:13,  1.08it/s] 17%|█▋        | 779/4613 [08:12<46:04,  1.39it/s] 17%|█▋        | 780/4613 [08:13<47:45,  1.34it/s] 17%|█▋        | 781/4613 [08:13<50:42,  1.26it/s] 17%|█▋        | 782/4613 [08:15<1:01:12,  1.04it/s] 17%|█▋        | 783/4613 [08:15<46:28,  1.37it/s]   17%|█▋        | 784/4613 [08:17<1:05:58,  1.03s/it] 17%|█▋        | 785/4613 [08:17<58:13,  1.10it/s]   17%|█▋        | 786/4613 [08:18<45:00,  1.42it/s] 17%|█▋        | 787/4613 [08:18<44:40,  1.43it/s] 17%|█▋        | 788/4613 [08:19<46:07,  1.38it/s] 17%|█▋        | 789/4613 [08:20<48:27,  1.32it/s] 17%|█▋        | 790/4613 [08:21<48:34,  1.31it/s] 17%|█▋        | 791/4613 [08:21<37:01,  1.72it/s] 17%|█▋        | 792/4613 [08:22<41:10,  1.55it/s] 17%|█▋        | 793/4613 [08:22<43:09,  1.48it/s] 17%|█▋        | 794/4613 [08:23<46:04,  1.38it/s] 17%|█▋        | 795/4613 [08:24<47:33,  1.34it/s] 17%|█▋        | 796/4613 [08:24<39:45,  1.60it/s] 17%|█▋        | 797/4613 [08:25<39:56,  1.59it/s] 17%|█▋        | 798/4613 [08:25<32:16,  1.97it/s] 17%|█▋        | 799/4613 [08:27<51:14,  1.24it/s] 17%|█▋        | 800/4613 [08:27<40:05,  1.59it/s] 17%|█▋        | 801/4613 [08:28<41:52,  1.52it/s] 17%|█▋        | 802/4613 [08:28<43:28,  1.46it/s] 17%|█▋        | 803/4613 [08:29<45:37,  1.39it/s] 17%|█▋        | 804/4613 [08:29<35:37,  1.78it/s] 17%|█▋        | 805/4613 [08:30<37:33,  1.69it/s] 17%|█▋        | 806/4613 [08:31<40:26,  1.57it/s] 17%|█▋        | 807/4613 [08:31<31:44,  2.00it/s] 18%|█▊        | 808/4613 [08:32<38:21,  1.65it/s] 18%|█▊        | 809/4613 [08:32<39:54,  1.59it/s] 18%|█▊        | 810/4613 [08:33<32:08,  1.97it/s] 18%|█▊        | 811/4613 [08:33<35:46,  1.77it/s] 18%|█▊        | 812/4613 [08:34<27:42,  2.29it/s] 18%|█▊        | 813/4613 [08:34<34:46,  1.82it/s] 18%|█▊        | 814/4613 [08:35<37:22,  1.69it/s] 18%|█▊        | 815/4613 [08:35<32:56,  1.92it/s] 18%|█▊        | 816/4613 [08:37<54:39,  1.16it/s] 18%|█▊        | 817/4613 [08:38<50:53,  1.24it/s] 18%|█▊        | 818/4613 [08:38<49:57,  1.27it/s] 18%|█▊        | 819/4613 [08:39<38:22,  1.65it/s] 18%|█▊        | 820/4613 [08:40<43:08,  1.47it/s] 18%|█▊        | 821/4613 [08:40<42:53,  1.47it/s] 18%|█▊        | 822/4613 [08:41<45:30,  1.39it/s] 18%|█▊        | 823/4613 [08:42<51:02,  1.24it/s] 18%|█▊        | 824/4613 [08:43<48:26,  1.30it/s] 18%|█▊        | 825/4613 [08:43<39:29,  1.60it/s] 18%|█▊        | 826/4613 [08:44<40:23,  1.56it/s] 18%|█▊        | 827/4613 [08:45<1:02:19,  1.01it/s] 18%|█▊        | 828/4613 [08:46<55:54,  1.13it/s]   18%|█▊        | 829/4613 [08:46<42:33,  1.48it/s] 18%|█▊        | 830/4613 [08:47<42:59,  1.47it/s] 18%|█▊        | 831/4613 [08:47<32:55,  1.91it/s] 18%|█▊        | 832/4613 [08:48<36:55,  1.71it/s] 18%|█▊        | 833/4613 [08:48<31:22,  2.01it/s] 18%|█▊        | 834/4613 [08:49<46:58,  1.34it/s] 18%|█▊        | 835/4613 [08:50<37:01,  1.70it/s] 18%|█▊        | 836/4613 [08:50<39:34,  1.59it/s] 18%|█▊        | 837/4613 [08:51<30:34,  2.06it/s] 18%|█▊        | 838/4613 [08:52<49:15,  1.28it/s] 18%|█▊        | 839/4613 [08:52<37:48,  1.66it/s] 18%|█▊        | 840/4613 [08:53<40:18,  1.56it/s] 18%|█▊        | 841/4613 [08:53<31:43,  1.98it/s] 18%|█▊        | 842/4613 [08:54<35:06,  1.79it/s] 18%|█▊        | 843/4613 [08:55<40:52,  1.54it/s] 18%|█▊        | 844/4613 [08:55<41:38,  1.51it/s] 18%|█▊        | 845/4613 [08:56<33:38,  1.87it/s] 18%|█▊        | 846/4613 [08:56<38:03,  1.65it/s] 18%|█▊        | 847/4613 [08:57<44:15,  1.42it/s] 18%|█▊        | 848/4613 [08:59<1:00:32,  1.04it/s] 18%|█▊        | 849/4613 [09:00<55:44,  1.13it/s]   18%|█▊        | 850/4613 [09:00<42:23,  1.48it/s] 18%|█▊        | 851/4613 [09:01<45:02,  1.39it/s] 18%|█▊        | 852/4613 [09:01<46:04,  1.36it/s] 18%|█▊        | 853/4613 [09:03<1:00:09,  1.04it/s] 19%|█▊        | 854/4613 [09:04<57:42,  1.09it/s]   19%|█▊        | 855/4613 [09:04<44:39,  1.40it/s] 19%|█▊        | 856/4613 [09:05<47:55,  1.31it/s] 19%|█▊        | 857/4613 [09:06<46:19,  1.35it/s] 19%|█▊        | 858/4613 [09:06<46:23,  1.35it/s] 19%|█▊        | 859/4613 [09:06<36:58,  1.69it/s] 19%|█▊        | 860/4613 [09:07<38:34,  1.62it/s] 19%|█▊        | 861/4613 [09:07<29:29,  2.12it/s] 19%|█▊        | 862/4613 [09:08<33:45,  1.85it/s] 19%|█▊        | 863/4613 [09:08<27:25,  2.28it/s] 19%|█▊        | 864/4613 [09:09<33:42,  1.85it/s] 19%|█▉        | 865/4613 [09:10<38:11,  1.64it/s] 19%|█▉        | 866/4613 [09:10<29:39,  2.11it/s] 19%|█▉        | 867/4613 [09:11<33:58,  1.84it/s] 19%|█▉        | 868/4613 [09:11<26:50,  2.33it/s] 19%|█▉        | 869/4613 [09:12<32:44,  1.91it/s] 19%|█▉        | 870/4613 [09:12<26:00,  2.40it/s] 19%|█▉        | 871/4613 [09:12<30:43,  2.03it/s] 19%|█▉        | 872/4613 [09:13<26:03,  2.39it/s] 19%|█▉        | 873/4613 [09:13<31:42,  1.97it/s] 19%|█▉        | 874/4613 [09:14<35:23,  1.76it/s] 19%|█▉        | 875/4613 [09:14<31:08,  2.00it/s] 19%|█▉        | 876/4613 [09:15<34:23,  1.81it/s] 19%|█▉        | 877/4613 [09:16<39:02,  1.60it/s] 19%|█▉        | 878/4613 [09:17<41:06,  1.51it/s] 19%|█▉        | 879/4613 [09:17<31:35,  1.97it/s] 19%|█▉        | 880/4613 [09:17<35:25,  1.76it/s] 19%|█▉        | 881/4613 [09:18<30:44,  2.02it/s] 19%|█▉        | 882/4613 [09:18<33:08,  1.88it/s] 19%|█▉        | 883/4613 [09:19<38:24,  1.62it/s] 19%|█▉        | 884/4613 [09:20<41:37,  1.49it/s] 19%|█▉        | 885/4613 [09:20<31:32,  1.97it/s] 19%|█▉        | 886/4613 [09:20<26:29,  2.34it/s] 19%|█▉        | 887/4613 [09:21<30:33,  2.03it/s] 19%|█▉        | 888/4613 [09:22<36:01,  1.72it/s] 19%|█▉        | 889/4613 [09:23<41:41,  1.49it/s] 19%|█▉        | 890/4613 [09:23<43:24,  1.43it/s] 19%|█▉        | 891/4613 [09:24<46:07,  1.34it/s] 19%|█▉        | 892/4613 [09:25<36:41,  1.69it/s] 19%|█▉        | 893/4613 [09:25<40:49,  1.52it/s] 19%|█▉        | 894/4613 [09:26<43:14,  1.43it/s] 19%|█▉        | 895/4613 [09:27<47:06,  1.32it/s] 19%|█▉        | 896/4613 [09:28<47:31,  1.30it/s] 19%|█▉        | 897/4613 [09:28<36:40,  1.69it/s] 19%|█▉        | 898/4613 [09:29<38:37,  1.60it/s] 19%|█▉        | 899/4613 [09:29<31:00,  2.00it/s] 20%|█▉        | 900/4613 [09:30<33:49,  1.83it/s] 20%|█▉        | 901/4613 [09:30<37:15,  1.66it/s] 20%|█▉        | 902/4613 [09:31<44:48,  1.38it/s] 20%|█▉        | 903/4613 [09:32<46:22,  1.33it/s] 20%|█▉        | 904/4613 [09:33<47:37,  1.30it/s] 20%|█▉        | 905/4613 [09:34<48:52,  1.26it/s] 20%|█▉        | 906/4613 [09:35<51:36,  1.20it/s] 20%|█▉        | 907/4613 [09:35<48:35,  1.27it/s] 20%|█▉        | 908/4613 [09:36<49:13,  1.25it/s] 20%|█▉        | 909/4613 [09:37<47:55,  1.29it/s] 20%|█▉        | 910/4613 [09:37<37:51,  1.63it/s] 20%|█▉        | 911/4613 [09:38<39:32,  1.56it/s] 20%|█▉        | 912/4613 [09:39<43:56,  1.40it/s] 20%|█▉        | 913/4613 [09:39<43:58,  1.40it/s] 20%|█▉        | 914/4613 [09:40<33:51,  1.82it/s] 20%|█▉        | 915/4613 [09:40<37:15,  1.65it/s] 20%|█▉        | 916/4613 [09:41<30:08,  2.04it/s] 20%|█▉        | 917/4613 [09:41<33:25,  1.84it/s] 20%|█▉        | 918/4613 [09:42<38:30,  1.60it/s] 20%|█▉        | 919/4613 [09:44<59:44,  1.03it/s] 20%|█▉        | 920/4613 [09:44<45:45,  1.34it/s] 20%|█▉        | 921/4613 [09:45<44:12,  1.39it/s] 20%|█▉        | 922/4613 [09:45<44:27,  1.38it/s] 20%|██        | 923/4613 [09:46<34:07,  1.80it/s] 20%|██        | 924/4613 [09:46<36:30,  1.68it/s] 20%|██        | 925/4613 [09:47<42:53,  1.43it/s] 20%|██        | 926/4613 [09:47<32:58,  1.86it/s] 20%|██        | 927/4613 [09:48<35:27,  1.73it/s] 20%|██        | 928/4613 [09:48<27:58,  2.20it/s] 20%|██        | 929/4613 [09:49<31:52,  1.93it/s] 20%|██        | 930/4613 [09:49<24:54,  2.46it/s] 20%|██        | 931/4613 [09:50<31:04,  1.98it/s] 20%|██        | 932/4613 [09:50<24:41,  2.48it/s] 20%|██        | 933/4613 [09:52<1:03:44,  1.04s/it] 20%|██        | 934/4613 [09:53<58:15,  1.05it/s]   20%|██        | 935/4613 [09:54<53:56,  1.14it/s] 20%|██        | 936/4613 [09:54<43:36,  1.41it/s] 20%|██        | 937/4613 [09:55<43:46,  1.40it/s] 20%|██        | 938/4613 [09:56<44:28,  1.38it/s] 20%|██        | 939/4613 [09:57<50:26,  1.21it/s] 20%|██        | 940/4613 [09:58<51:48,  1.18it/s] 20%|██        | 941/4613 [09:58<47:49,  1.28it/s] 20%|██        | 942/4613 [09:59<47:52,  1.28it/s] 20%|██        | 943/4613 [10:00<48:35,  1.26it/s] 20%|██        | 944/4613 [10:00<37:57,  1.61it/s] 20%|██        | 945/4613 [10:01<40:51,  1.50it/s] 21%|██        | 946/4613 [10:02<40:48,  1.50it/s] 21%|██        | 947/4613 [10:02<31:55,  1.91it/s] 21%|██        | 948/4613 [10:03<36:26,  1.68it/s] 21%|██        | 949/4613 [10:03<39:12,  1.56it/s] 21%|██        | 950/4613 [10:04<32:38,  1.87it/s] 21%|██        | 951/4613 [10:04<36:21,  1.68it/s] 21%|██        | 952/4613 [10:05<39:27,  1.55it/s] 21%|██        | 953/4613 [10:06<43:31,  1.40it/s] 21%|██        | 954/4613 [10:07<43:32,  1.40it/s] 21%|██        | 955/4613 [10:07<34:37,  1.76it/s] 21%|██        | 956/4613 [10:08<37:35,  1.62it/s] 21%|██        | 957/4613 [10:08<30:36,  1.99it/s] 21%|██        | 958/4613 [10:09<33:15,  1.83it/s] 21%|██        | 959/4613 [10:09<38:11,  1.59it/s] 21%|██        | 960/4613 [10:09<29:52,  2.04it/s] 21%|██        | 961/4613 [10:10<34:14,  1.78it/s] 21%|██        | 962/4613 [10:11<38:28,  1.58it/s] 21%|██        | 963/4613 [10:11<29:58,  2.03it/s] 21%|██        | 964/4613 [10:12<33:38,  1.81it/s] 21%|██        | 965/4613 [10:12<28:17,  2.15it/s] 21%|██        | 966/4613 [10:13<33:27,  1.82it/s] 21%|██        | 967/4613 [10:15<52:57,  1.15it/s] 21%|██        | 968/4613 [10:15<50:03,  1.21it/s] 21%|██        | 969/4613 [10:15<39:09,  1.55it/s] 21%|██        | 970/4613 [10:16<39:42,  1.53it/s] 21%|██        | 971/4613 [10:16<30:27,  1.99it/s] 21%|██        | 972/4613 [10:17<34:07,  1.78it/s] 21%|██        | 973/4613 [10:17<26:23,  2.30it/s] 21%|██        | 974/4613 [10:18<30:45,  1.97it/s] 21%|██        | 975/4613 [10:19<37:56,  1.60it/s] 21%|██        | 976/4613 [10:19<40:53,  1.48it/s] 21%|██        | 977/4613 [10:20<31:16,  1.94it/s] 21%|██        | 978/4613 [10:20<35:12,  1.72it/s] 21%|██        | 979/4613 [10:22<59:03,  1.03it/s] 21%|██        | 980/4613 [10:23<53:45,  1.13it/s] 21%|██▏       | 981/4613 [10:23<42:59,  1.41it/s] 21%|██▏       | 982/4613 [10:24<43:15,  1.40it/s] 21%|██▏       | 983/4613 [10:25<45:58,  1.32it/s] 21%|██▏       | 984/4613 [10:26<45:37,  1.33it/s] 21%|██▏       | 985/4613 [10:26<45:32,  1.33it/s] 21%|██▏       | 986/4613 [10:27<45:17,  1.33it/s] 21%|██▏       | 987/4613 [10:27<35:28,  1.70it/s] 21%|██▏       | 988/4613 [10:28<40:04,  1.51it/s] 21%|██▏       | 989/4613 [10:29<40:11,  1.50it/s] 21%|██▏       | 990/4613 [10:29<32:22,  1.86it/s] 21%|██▏       | 991/4613 [10:30<37:59,  1.59it/s] 22%|██▏       | 992/4613 [10:30<38:10,  1.58it/s] 22%|██▏       | 993/4613 [10:31<41:55,  1.44it/s] 22%|██▏       | 994/4613 [10:31<32:12,  1.87it/s] 22%|██▏       | 995/4613 [10:33<49:53,  1.21it/s] 22%|██▏       | 996/4613 [10:39<2:22:39,  2.37s/it] 22%|██▏       | 997/4613 [10:39<1:42:48,  1.71s/it] 22%|██▏       | 998/4613 [10:40<1:26:52,  1.44s/it] 22%|██▏       | 999/4613 [10:41<1:13:09,  1.21s/it] 22%|██▏       | 1000/4613 [10:41<54:04,  1.11it/s]  22%|██▏       | 1001/4613 [10:42<52:15,  1.15it/s] 22%|██▏       | 1002/4613 [10:42<50:59,  1.18it/s] 22%|██▏       | 1003/4613 [10:43<41:09,  1.46it/s] 22%|██▏       | 1004/4613 [10:46<1:29:31,  1.49s/it] 22%|██▏       | 1005/4613 [10:47<1:15:45,  1.26s/it] 22%|██▏       | 1006/4613 [10:47<1:05:16,  1.09s/it] 22%|██▏       | 1007/4613 [10:48<49:24,  1.22it/s]   22%|██▏       | 1008/4613 [10:48<48:33,  1.24it/s] 22%|██▏       | 1009/4613 [10:49<47:54,  1.25it/s] 22%|██▏       | 1010/4613 [10:49<37:58,  1.58it/s] 22%|██▏       | 1011/4613 [10:50<39:39,  1.51it/s] 22%|██▏       | 1012/4613 [10:50<31:50,  1.88it/s] 22%|██▏       | 1013/4613 [10:51<35:40,  1.68it/s] 22%|██▏       | 1014/4613 [10:52<37:15,  1.61it/s] 22%|██▏       | 1015/4613 [10:54<59:42,  1.00it/s] 22%|██▏       | 1016/4613 [10:54<46:25,  1.29it/s] 22%|██▏       | 1017/4613 [10:55<44:01,  1.36it/s] 22%|██▏       | 1018/4613 [10:55<45:06,  1.33it/s] 22%|██▏       | 1019/4613 [10:56<35:49,  1.67it/s] 22%|██▏       | 1020/4613 [10:56<36:05,  1.66it/s] 22%|██▏       | 1021/4613 [10:57<38:46,  1.54it/s] 22%|██▏       | 1022/4613 [10:57<30:46,  1.95it/s] 22%|██▏       | 1023/4613 [10:58<35:17,  1.70it/s] 22%|██▏       | 1024/4613 [10:59<41:54,  1.43it/s] 22%|██▏       | 1025/4613 [11:00<40:58,  1.46it/s] 22%|██▏       | 1026/4613 [11:00<42:23,  1.41it/s] 22%|██▏       | 1027/4613 [11:01<32:45,  1.82it/s] 22%|██▏       | 1028/4613 [11:01<38:30,  1.55it/s] 22%|██▏       | 1029/4613 [11:02<41:21,  1.44it/s] 22%|██▏       | 1030/4613 [11:03<42:10,  1.42it/s] 22%|██▏       | 1031/4613 [11:04<46:59,  1.27it/s] 22%|██▏       | 1032/4613 [11:05<45:12,  1.32it/s] 22%|██▏       | 1033/4613 [11:05<44:40,  1.34it/s] 22%|██▏       | 1034/4613 [11:06<45:35,  1.31it/s] 22%|██▏       | 1035/4613 [11:06<34:29,  1.73it/s] 22%|██▏       | 1036/4613 [11:07<38:18,  1.56it/s] 22%|██▏       | 1037/4613 [11:08<41:39,  1.43it/s] 23%|██▎       | 1038/4613 [11:09<43:42,  1.36it/s] 23%|██▎       | 1039/4613 [11:10<44:28,  1.34it/s] 23%|██▎       | 1040/4613 [11:10<36:10,  1.65it/s] 23%|██▎       | 1041/4613 [11:10<37:54,  1.57it/s] 23%|██▎       | 1042/4613 [11:11<38:26,  1.55it/s] 23%|██▎       | 1043/4613 [11:12<42:42,  1.39it/s] 23%|██▎       | 1044/4613 [11:13<45:30,  1.31it/s] 23%|██▎       | 1045/4613 [11:13<36:22,  1.63it/s] 23%|██▎       | 1046/4613 [11:14<38:05,  1.56it/s] 23%|██▎       | 1047/4613 [11:15<43:14,  1.37it/s] 23%|██▎       | 1048/4613 [11:16<42:45,  1.39it/s] 23%|██▎       | 1049/4613 [11:16<46:27,  1.28it/s] 23%|██▎       | 1050/4613 [11:17<45:48,  1.30it/s] 23%|██▎       | 1051/4613 [11:17<34:42,  1.71it/s] 23%|██▎       | 1052/4613 [11:18<37:19,  1.59it/s] 23%|██▎       | 1053/4613 [11:18<29:46,  1.99it/s] 23%|██▎       | 1054/4613 [11:19<34:39,  1.71it/s] 23%|██▎       | 1055/4613 [11:20<37:41,  1.57it/s] 23%|██▎       | 1056/4613 [11:20<29:23,  2.02it/s] 23%|██▎       | 1057/4613 [11:21<36:45,  1.61it/s] 23%|██▎       | 1058/4613 [11:22<39:34,  1.50it/s] 23%|██▎       | 1059/4613 [11:22<39:07,  1.51it/s] 23%|██▎       | 1060/4613 [11:24<55:26,  1.07it/s] 23%|██▎       | 1061/4613 [11:24<42:38,  1.39it/s] 23%|██▎       | 1062/4613 [11:25<43:46,  1.35it/s] 23%|██▎       | 1063/4613 [11:26<42:25,  1.39it/s] 23%|██▎       | 1064/4613 [11:26<34:29,  1.72it/s] 23%|██▎       | 1065/4613 [11:27<36:20,  1.63it/s] 23%|██▎       | 1066/4613 [11:28<43:31,  1.36it/s] 23%|██▎       | 1067/4613 [11:28<42:57,  1.38it/s] 23%|██▎       | 1068/4613 [11:29<43:30,  1.36it/s] 23%|██▎       | 1069/4613 [11:29<33:43,  1.75it/s] 23%|██▎       | 1070/4613 [11:30<36:01,  1.64it/s] 23%|██▎       | 1071/4613 [11:31<39:17,  1.50it/s] 23%|██▎       | 1072/4613 [11:31<32:06,  1.84it/s] 23%|██▎       | 1073/4613 [11:32<48:43,  1.21it/s] 23%|██▎       | 1074/4613 [11:33<37:23,  1.58it/s] 23%|██▎       | 1075/4613 [11:33<38:50,  1.52it/s] 23%|██▎       | 1076/4613 [11:34<30:37,  1.93it/s] 23%|██▎       | 1077/4613 [11:34<36:43,  1.60it/s] 23%|██▎       | 1078/4613 [11:35<37:45,  1.56it/s] 23%|██▎       | 1079/4613 [11:36<40:09,  1.47it/s] 23%|██▎       | 1080/4613 [11:37<56:47,  1.04it/s] 23%|██▎       | 1081/4613 [11:38<55:01,  1.07it/s] 23%|██▎       | 1082/4613 [11:39<52:23,  1.12it/s] 23%|██▎       | 1083/4613 [11:39<41:04,  1.43it/s] 23%|██▎       | 1084/4613 [11:40<42:51,  1.37it/s] 24%|██▎       | 1085/4613 [11:41<41:55,  1.40it/s] 24%|██▎       | 1086/4613 [11:42<43:40,  1.35it/s] 24%|██▎       | 1087/4613 [11:42<33:50,  1.74it/s] 24%|██▎       | 1088/4613 [11:43<35:46,  1.64it/s] 24%|██▎       | 1089/4613 [11:43<40:25,  1.45it/s] 24%|██▎       | 1090/4613 [11:44<42:07,  1.39it/s] 24%|██▎       | 1091/4613 [11:45<41:48,  1.40it/s] 24%|██▎       | 1092/4613 [11:45<33:34,  1.75it/s] 24%|██▎       | 1093/4613 [11:46<35:58,  1.63it/s] 24%|██▎       | 1094/4613 [11:46<30:13,  1.94it/s] 24%|██▎       | 1095/4613 [11:47<31:45,  1.85it/s] 24%|██▍       | 1096/4613 [11:48<36:49,  1.59it/s] 24%|██▍       | 1097/4613 [11:48<39:37,  1.48it/s] 24%|██▍       | 1098/4613 [11:49<45:39,  1.28it/s] 24%|██▍       | 1099/4613 [11:50<46:39,  1.26it/s] 24%|██▍       | 1100/4613 [11:51<46:10,  1.27it/s] 24%|██▍       | 1101/4613 [11:51<35:31,  1.65it/s] 24%|██▍       | 1102/4613 [11:52<39:24,  1.48it/s] 24%|██▍       | 1103/4613 [11:53<41:03,  1.42it/s] 24%|██▍       | 1104/4613 [11:54<42:17,  1.38it/s] 24%|██▍       | 1105/4613 [11:54<44:28,  1.31it/s] 24%|██▍       | 1106/4613 [11:55<35:06,  1.66it/s] 24%|██▍       | 1107/4613 [11:55<39:39,  1.47it/s] 24%|██▍       | 1108/4613 [11:56<40:16,  1.45it/s] 24%|██▍       | 1109/4613 [11:57<40:03,  1.46it/s] 24%|██▍       | 1110/4613 [11:58<45:40,  1.28it/s] 24%|██▍       | 1111/4613 [11:59<44:05,  1.32it/s] 24%|██▍       | 1112/4613 [11:59<34:57,  1.67it/s] 24%|██▍       | 1113/4613 [11:59<35:48,  1.63it/s] 24%|██▍       | 1114/4613 [12:00<29:29,  1.98it/s] 24%|██▍       | 1115/4613 [12:00<34:26,  1.69it/s] 24%|██▍       | 1116/4613 [12:01<39:51,  1.46it/s] 24%|██▍       | 1117/4613 [12:02<40:36,  1.43it/s] 24%|██▍       | 1118/4613 [12:03<42:46,  1.36it/s] 24%|██▍       | 1119/4613 [12:03<33:57,  1.72it/s] 24%|██▍       | 1120/4613 [12:04<36:30,  1.59it/s] 24%|██▍       | 1121/4613 [12:05<39:57,  1.46it/s] 24%|██▍       | 1122/4613 [12:05<41:21,  1.41it/s] 24%|██▍       | 1123/4613 [12:06<31:45,  1.83it/s] 24%|██▍       | 1124/4613 [12:06<35:14,  1.65it/s] 24%|██▍       | 1125/4613 [12:07<27:48,  2.09it/s] 24%|██▍       | 1126/4613 [12:07<31:06,  1.87it/s] 24%|██▍       | 1127/4613 [12:08<36:45,  1.58it/s] 24%|██▍       | 1128/4613 [12:09<38:24,  1.51it/s] 24%|██▍       | 1129/4613 [12:09<29:22,  1.98it/s] 24%|██▍       | 1130/4613 [12:09<25:09,  2.31it/s] 25%|██▍       | 1131/4613 [12:10<31:25,  1.85it/s] 25%|██▍       | 1132/4613 [12:11<33:36,  1.73it/s] 25%|██▍       | 1133/4613 [12:11<36:57,  1.57it/s] 25%|██▍       | 1134/4613 [12:12<31:24,  1.85it/s] 25%|██▍       | 1135/4613 [12:13<34:20,  1.69it/s] 25%|██▍       | 1136/4613 [12:14<52:04,  1.11it/s] 25%|██▍       | 1137/4613 [12:15<49:50,  1.16it/s] 25%|██▍       | 1138/4613 [12:16<51:05,  1.13it/s] 25%|██▍       | 1139/4613 [12:17<47:38,  1.22it/s] 25%|██▍       | 1140/4613 [12:17<37:55,  1.53it/s] 25%|██▍       | 1141/4613 [12:17<38:26,  1.51it/s] 25%|██▍       | 1142/4613 [12:18<40:42,  1.42it/s] 25%|██▍       | 1143/4613 [12:18<30:59,  1.87it/s] 25%|██▍       | 1144/4613 [12:19<38:16,  1.51it/s] 25%|██▍       | 1145/4613 [12:20<42:02,  1.37it/s] 25%|██▍       | 1146/4613 [12:21<41:19,  1.40it/s] 25%|██▍       | 1147/4613 [12:22<42:45,  1.35it/s] 25%|██▍       | 1148/4613 [12:22<35:25,  1.63it/s] 25%|██▍       | 1149/4613 [12:23<39:12,  1.47it/s] 25%|██▍       | 1150/4613 [12:24<39:53,  1.45it/s] 25%|██▍       | 1151/4613 [12:24<30:58,  1.86it/s] 25%|██▍       | 1152/4613 [12:24<34:21,  1.68it/s] 25%|██▍       | 1153/4613 [12:25<38:36,  1.49it/s] 25%|██▌       | 1154/4613 [12:26<39:24,  1.46it/s] 25%|██▌       | 1155/4613 [12:26<30:17,  1.90it/s] 25%|██▌       | 1156/4613 [12:27<34:10,  1.69it/s] 25%|██▌       | 1157/4613 [12:29<55:33,  1.04it/s] 25%|██▌       | 1158/4613 [12:30<53:29,  1.08it/s] 25%|██▌       | 1159/4613 [12:30<50:53,  1.13it/s] 25%|██▌       | 1160/4613 [12:31<39:30,  1.46it/s] 25%|██▌       | 1161/4613 [12:31<40:32,  1.42it/s] 25%|██▌       | 1162/4613 [12:32<40:17,  1.43it/s] 25%|██▌       | 1163/4613 [12:32<33:45,  1.70it/s] 25%|██▌       | 1164/4613 [12:33<36:46,  1.56it/s] 25%|██▌       | 1165/4613 [12:34<39:12,  1.47it/s] 25%|██▌       | 1166/4613 [12:34<31:58,  1.80it/s] 25%|██▌       | 1167/4613 [12:35<36:30,  1.57it/s] 25%|██▌       | 1168/4613 [12:36<38:54,  1.48it/s] 25%|██▌       | 1169/4613 [12:37<39:58,  1.44it/s] 25%|██▌       | 1170/4613 [12:37<42:15,  1.36it/s] 25%|██▌       | 1171/4613 [12:38<33:43,  1.70it/s] 25%|██▌       | 1172/4613 [12:38<36:29,  1.57it/s] 25%|██▌       | 1173/4613 [12:40<50:40,  1.13it/s] 25%|██▌       | 1174/4613 [12:40<38:01,  1.51it/s] 25%|██▌       | 1175/4613 [12:41<39:26,  1.45it/s] 25%|██▌       | 1176/4613 [12:41<31:40,  1.81it/s] 26%|██▌       | 1177/4613 [12:42<47:23,  1.21it/s] 26%|██▌       | 1178/4613 [12:43<46:00,  1.24it/s] 26%|██▌       | 1179/4613 [12:43<35:15,  1.62it/s] 26%|██▌       | 1180/4613 [12:44<36:32,  1.57it/s] 26%|██▌       | 1181/4613 [12:44<28:42,  1.99it/s] 26%|██▌       | 1182/4613 [12:45<32:54,  1.74it/s] 26%|██▌       | 1183/4613 [12:46<36:34,  1.56it/s] 26%|██▌       | 1184/4613 [12:46<29:30,  1.94it/s] 26%|██▌       | 1185/4613 [12:47<31:25,  1.82it/s] 26%|██▌       | 1186/4613 [12:47<35:42,  1.60it/s] 26%|██▌       | 1187/4613 [12:48<27:31,  2.07it/s] 26%|██▌       | 1188/4613 [12:48<23:12,  2.46it/s] 26%|██▌       | 1189/4613 [12:49<28:41,  1.99it/s] 26%|██▌       | 1190/4613 [12:49<34:50,  1.64it/s] 26%|██▌       | 1191/4613 [12:50<36:11,  1.58it/s] 26%|██▌       | 1192/4613 [12:51<38:08,  1.49it/s] 26%|██▌       | 1193/4613 [12:51<31:13,  1.83it/s] 26%|██▌       | 1194/4613 [12:52<34:08,  1.67it/s] 26%|██▌       | 1195/4613 [12:53<36:55,  1.54it/s] 26%|██▌       | 1196/4613 [12:53<39:13,  1.45it/s] 26%|██▌       | 1197/4613 [12:54<32:14,  1.77it/s] 26%|██▌       | 1198/4613 [12:55<45:22,  1.25it/s] 26%|██▌       | 1199/4613 [12:55<34:50,  1.63it/s] 26%|██▌       | 1200/4613 [12:56<36:24,  1.56it/s] 26%|██▌       | 1201/4613 [12:56<28:20,  2.01it/s] 26%|██▌       | 1202/4613 [12:57<32:23,  1.75it/s] 26%|██▌       | 1203/4613 [12:58<36:11,  1.57it/s] 26%|██▌       | 1204/4613 [12:58<30:34,  1.86it/s] 26%|██▌       | 1205/4613 [12:59<33:54,  1.68it/s] 26%|██▌       | 1206/4613 [12:59<35:49,  1.59it/s] 26%|██▌       | 1207/4613 [13:00<30:18,  1.87it/s] 26%|██▌       | 1208/4613 [13:00<32:06,  1.77it/s] 26%|██▌       | 1209/4613 [13:00<25:57,  2.19it/s] 26%|██▌       | 1210/4613 [13:01<29:41,  1.91it/s] 26%|██▋       | 1211/4613 [13:02<34:26,  1.65it/s] 26%|██▋       | 1212/4613 [13:03<37:24,  1.52it/s] 26%|██▋       | 1213/4613 [13:03<31:27,  1.80it/s] 26%|██▋       | 1214/4613 [13:04<32:42,  1.73it/s] 26%|██▋       | 1215/4613 [13:04<35:46,  1.58it/s] 26%|██▋       | 1216/4613 [13:05<29:22,  1.93it/s] 26%|██▋       | 1217/4613 [13:05<31:40,  1.79it/s] 26%|██▋       | 1218/4613 [13:06<35:55,  1.57it/s] 26%|██▋       | 1219/4613 [13:06<30:23,  1.86it/s] 26%|██▋       | 1220/4613 [13:07<31:57,  1.77it/s] 26%|██▋       | 1221/4613 [13:08<35:25,  1.60it/s] 26%|██▋       | 1222/4613 [13:09<38:15,  1.48it/s] 27%|██▋       | 1223/4613 [13:09<29:17,  1.93it/s] 27%|██▋       | 1224/4613 [13:10<35:24,  1.60it/s] 27%|██▋       | 1225/4613 [13:10<36:10,  1.56it/s] 27%|██▋       | 1226/4613 [13:11<28:01,  2.01it/s] 27%|██▋       | 1227/4613 [13:11<32:02,  1.76it/s] 27%|██▋       | 1228/4613 [13:12<34:21,  1.64it/s] 27%|██▋       | 1229/4613 [13:12<26:22,  2.14it/s] 27%|██▋       | 1230/4613 [13:12<21:24,  2.63it/s] 27%|██▋       | 1231/4613 [13:13<26:47,  2.10it/s] 27%|██▋       | 1232/4613 [13:13<22:30,  2.50it/s] 27%|██▋       | 1233/4613 [13:14<27:02,  2.08it/s] 27%|██▋       | 1234/4613 [13:14<22:34,  2.49it/s] 27%|██▋       | 1235/4613 [13:16<54:10,  1.04it/s] 27%|██▋       | 1236/4613 [13:17<41:42,  1.35it/s] 27%|██▋       | 1237/4613 [13:17<40:29,  1.39it/s] 27%|██▋       | 1238/4613 [13:18<44:03,  1.28it/s] 27%|██▋       | 1239/4613 [13:19<46:08,  1.22it/s] 27%|██▋       | 1240/4613 [13:21<56:39,  1.01s/it] 27%|██▋       | 1241/4613 [13:21<43:11,  1.30it/s] 27%|██▋       | 1242/4613 [13:22<44:42,  1.26it/s] 27%|██▋       | 1243/4613 [13:22<42:13,  1.33it/s] 27%|██▋       | 1244/4613 [13:23<41:17,  1.36it/s] 27%|██▋       | 1245/4613 [13:25<56:20,  1.00s/it] 27%|██▋       | 1246/4613 [13:25<42:14,  1.33it/s] 27%|██▋       | 1247/4613 [13:26<43:09,  1.30it/s] 27%|██▋       | 1248/4613 [13:26<45:59,  1.22it/s] 27%|██▋       | 1249/4613 [13:27<47:50,  1.17it/s] 27%|██▋       | 1250/4613 [13:28<46:42,  1.20it/s] 27%|██▋       | 1251/4613 [13:29<47:07,  1.19it/s] 27%|██▋       | 1252/4613 [13:30<42:57,  1.30it/s] 27%|██▋       | 1253/4613 [13:30<42:12,  1.33it/s] 27%|██▋       | 1254/4613 [13:31<32:21,  1.73it/s] 27%|██▋       | 1255/4613 [13:31<36:53,  1.52it/s] 27%|██▋       | 1256/4613 [13:32<28:16,  1.98it/s] 27%|██▋       | 1257/4613 [13:32<32:06,  1.74it/s] 27%|██▋       | 1258/4613 [13:32<24:53,  2.25it/s] 27%|██▋       | 1259/4613 [13:33<29:44,  1.88it/s] 27%|██▋       | 1260/4613 [13:34<34:39,  1.61it/s] 27%|██▋       | 1261/4613 [13:35<37:31,  1.49it/s] 27%|██▋       | 1262/4613 [13:35<29:56,  1.87it/s] 27%|██▋       | 1263/4613 [13:36<33:58,  1.64it/s] 27%|██▋       | 1264/4613 [13:36<26:36,  2.10it/s] 27%|██▋       | 1265/4613 [13:37<31:40,  1.76it/s] 27%|██▋       | 1266/4613 [13:38<37:16,  1.50it/s] 27%|██▋       | 1267/4613 [13:38<39:52,  1.40it/s] 27%|██▋       | 1268/4613 [13:39<31:00,  1.80it/s] 28%|██▊       | 1269/4613 [13:39<32:30,  1.71it/s] 28%|██▊       | 1270/4613 [13:40<36:57,  1.51it/s] 28%|██▊       | 1271/4613 [13:40<28:48,  1.93it/s] 28%|██▊       | 1272/4613 [13:41<31:44,  1.75it/s] 28%|██▊       | 1273/4613 [13:41<25:52,  2.15it/s] 28%|██▊       | 1274/4613 [13:42<31:39,  1.76it/s] 28%|██▊       | 1275/4613 [13:43<35:38,  1.56it/s] 28%|██▊       | 1276/4613 [13:44<36:23,  1.53it/s] 28%|██▊       | 1277/4613 [13:44<38:48,  1.43it/s] 28%|██▊       | 1278/4613 [13:44<30:02,  1.85it/s] 28%|██▊       | 1279/4613 [13:45<24:21,  2.28it/s] 28%|██▊       | 1280/4613 [13:45<27:31,  2.02it/s] 28%|██▊       | 1281/4613 [13:46<32:16,  1.72it/s] 28%|██▊       | 1282/4613 [13:46<27:42,  2.00it/s] 28%|██▊       | 1283/4613 [13:47<33:43,  1.65it/s] 28%|██▊       | 1284/4613 [13:48<34:24,  1.61it/s] 28%|██▊       | 1285/4613 [13:49<49:59,  1.11it/s] 28%|██▊       | 1286/4613 [13:50<37:36,  1.47it/s] 28%|██▊       | 1287/4613 [13:50<37:44,  1.47it/s] 28%|██▊       | 1288/4613 [13:51<41:22,  1.34it/s] 28%|██▊       | 1289/4613 [13:52<44:07,  1.26it/s] 28%|██▊       | 1290/4613 [13:53<44:36,  1.24it/s] 28%|██▊       | 1291/4613 [13:53<33:46,  1.64it/s] 28%|██▊       | 1292/4613 [13:54<36:19,  1.52it/s] 28%|██▊       | 1293/4613 [13:54<27:37,  2.00it/s] 28%|██▊       | 1294/4613 [13:55<32:07,  1.72it/s] 28%|██▊       | 1295/4613 [13:56<36:03,  1.53it/s] 28%|██▊       | 1296/4613 [13:56<27:27,  2.01it/s] 28%|██▊       | 1297/4613 [13:56<30:12,  1.83it/s] 28%|██▊       | 1298/4613 [13:57<34:53,  1.58it/s] 28%|██▊       | 1299/4613 [13:57<26:51,  2.06it/s] 28%|██▊       | 1300/4613 [13:58<21:41,  2.55it/s] 28%|██▊       | 1301/4613 [13:58<26:14,  2.10it/s] 28%|██▊       | 1302/4613 [13:59<31:55,  1.73it/s] 28%|██▊       | 1303/4613 [14:01<47:59,  1.15it/s] 28%|██▊       | 1304/4613 [14:01<36:06,  1.53it/s] 28%|██▊       | 1305/4613 [14:01<28:50,  1.91it/s] 28%|██▊       | 1306/4613 [14:02<31:38,  1.74it/s] 28%|██▊       | 1307/4613 [14:02<36:11,  1.52it/s] 28%|██▊       | 1308/4613 [14:03<36:50,  1.50it/s] 28%|██▊       | 1309/4613 [14:04<31:06,  1.77it/s] 28%|██▊       | 1310/4613 [14:04<31:52,  1.73it/s] 28%|██▊       | 1311/4613 [14:04<25:51,  2.13it/s] 28%|██▊       | 1312/4613 [14:05<29:40,  1.85it/s] 28%|██▊       | 1313/4613 [14:05<24:28,  2.25it/s] 28%|██▊       | 1314/4613 [14:06<29:19,  1.87it/s] 29%|██▊       | 1315/4613 [14:07<32:35,  1.69it/s] 29%|██▊       | 1316/4613 [14:07<26:02,  2.11it/s] 29%|██▊       | 1317/4613 [14:08<30:46,  1.78it/s] 29%|██▊       | 1318/4613 [14:08<33:13,  1.65it/s] 29%|██▊       | 1319/4613 [14:09<25:52,  2.12it/s] 29%|██▊       | 1320/4613 [14:09<30:46,  1.78it/s] 29%|██▊       | 1321/4613 [14:10<25:00,  2.19it/s] 29%|██▊       | 1322/4613 [14:10<28:56,  1.89it/s] 29%|██▊       | 1323/4613 [14:11<31:45,  1.73it/s] 29%|██▊       | 1324/4613 [14:11<27:28,  1.99it/s] 29%|██▊       | 1325/4613 [14:12<29:44,  1.84it/s] 29%|██▊       | 1326/4613 [14:12<23:51,  2.30it/s] 29%|██▉       | 1327/4613 [14:13<28:47,  1.90it/s] 29%|██▉       | 1328/4613 [14:14<31:58,  1.71it/s] 29%|██▉       | 1329/4613 [14:14<24:39,  2.22it/s] 29%|██▉       | 1330/4613 [14:14<29:49,  1.83it/s] 29%|██▉       | 1331/4613 [14:15<23:48,  2.30it/s] 29%|██▉       | 1332/4613 [14:15<28:22,  1.93it/s] 29%|██▉       | 1333/4613 [14:16<23:29,  2.33it/s] 29%|██▉       | 1334/4613 [14:16<28:16,  1.93it/s] 29%|██▉       | 1335/4613 [14:19<1:01:23,  1.12s/it] 29%|██▉       | 1336/4613 [14:20<55:14,  1.01s/it]   29%|██▉       | 1337/4613 [14:20<51:41,  1.06it/s] 29%|██▉       | 1338/4613 [14:21<47:22,  1.15it/s] 29%|██▉       | 1339/4613 [14:21<35:45,  1.53it/s] 29%|██▉       | 1340/4613 [14:22<37:03,  1.47it/s] 29%|██▉       | 1341/4613 [14:22<29:40,  1.84it/s] 29%|██▉       | 1342/4613 [14:23<32:23,  1.68it/s] 29%|██▉       | 1343/4613 [14:24<36:47,  1.48it/s] 29%|██▉       | 1344/4613 [14:24<28:49,  1.89it/s] 29%|██▉       | 1345/4613 [14:25<30:56,  1.76it/s] 29%|██▉       | 1346/4613 [14:26<37:23,  1.46it/s] 29%|██▉       | 1347/4613 [14:26<36:46,  1.48it/s] 29%|██▉       | 1348/4613 [14:26<27:53,  1.95it/s] 29%|██▉       | 1349/4613 [14:27<31:55,  1.70it/s] 29%|██▉       | 1350/4613 [14:27<25:04,  2.17it/s] 29%|██▉       | 1351/4613 [14:28<31:39,  1.72it/s] 29%|██▉       | 1352/4613 [14:29<33:40,  1.61it/s] 29%|██▉       | 1353/4613 [14:30<36:17,  1.50it/s] 29%|██▉       | 1354/4613 [14:30<29:38,  1.83it/s] 29%|██▉       | 1355/4613 [14:31<31:41,  1.71it/s] 29%|██▉       | 1356/4613 [14:31<25:00,  2.17it/s] 29%|██▉       | 1357/4613 [14:31<29:56,  1.81it/s] 29%|██▉       | 1358/4613 [14:32<32:28,  1.67it/s] 29%|██▉       | 1359/4613 [14:32<27:26,  1.98it/s] 29%|██▉       | 1360/4613 [14:33<30:53,  1.76it/s] 30%|██▉       | 1361/4613 [14:34<34:05,  1.59it/s] 30%|██▉       | 1362/4613 [14:34<26:22,  2.05it/s] 30%|██▉       | 1363/4613 [14:36<43:10,  1.25it/s] 30%|██▉       | 1364/4613 [14:36<32:56,  1.64it/s] 30%|██▉       | 1365/4613 [14:37<35:48,  1.51it/s] 30%|██▉       | 1366/4613 [14:37<37:01,  1.46it/s] 30%|██▉       | 1367/4613 [14:38<39:52,  1.36it/s] 30%|██▉       | 1368/4613 [14:38<30:16,  1.79it/s] 30%|██▉       | 1369/4613 [14:39<35:51,  1.51it/s] 30%|██▉       | 1370/4613 [14:40<36:29,  1.48it/s] 30%|██▉       | 1371/4613 [14:41<38:38,  1.40it/s] 30%|██▉       | 1372/4613 [14:42<42:08,  1.28it/s] 30%|██▉       | 1373/4613 [14:42<32:52,  1.64it/s] 30%|██▉       | 1374/4613 [14:43<34:00,  1.59it/s] 30%|██▉       | 1375/4613 [14:43<35:11,  1.53it/s] 30%|██▉       | 1376/4613 [14:43<26:45,  2.02it/s] 30%|██▉       | 1377/4613 [14:44<21:31,  2.51it/s] 30%|██▉       | 1378/4613 [14:44<28:25,  1.90it/s] 30%|██▉       | 1379/4613 [14:45<32:41,  1.65it/s] 30%|██▉       | 1380/4613 [14:46<34:50,  1.55it/s] 30%|██▉       | 1381/4613 [14:46<27:36,  1.95it/s] 30%|██▉       | 1382/4613 [14:47<31:52,  1.69it/s] 30%|██▉       | 1383/4613 [14:48<35:27,  1.52it/s] 30%|███       | 1384/4613 [14:48<27:20,  1.97it/s] 30%|███       | 1385/4613 [14:49<29:41,  1.81it/s] 30%|███       | 1386/4613 [14:49<24:56,  2.16it/s] 30%|███       | 1387/4613 [14:50<29:37,  1.81it/s] 30%|███       | 1388/4613 [14:50<33:53,  1.59it/s] 30%|███       | 1389/4613 [14:51<35:24,  1.52it/s] 30%|███       | 1390/4613 [14:51<27:37,  1.94it/s] 30%|███       | 1391/4613 [14:52<30:34,  1.76it/s] 30%|███       | 1392/4613 [14:52<24:41,  2.17it/s] 30%|███       | 1393/4613 [14:54<42:04,  1.28it/s] 30%|███       | 1394/4613 [14:54<41:42,  1.29it/s] 30%|███       | 1395/4613 [14:55<31:25,  1.71it/s] 30%|███       | 1396/4613 [14:55<34:03,  1.57it/s] 30%|███       | 1397/4613 [14:56<26:26,  2.03it/s] 30%|███       | 1398/4613 [14:56<29:17,  1.83it/s] 30%|███       | 1399/4613 [14:56<22:40,  2.36it/s] 30%|███       | 1400/4613 [14:57<30:59,  1.73it/s] 30%|███       | 1401/4613 [14:58<32:16,  1.66it/s] 30%|███       | 1402/4613 [14:58<24:50,  2.15it/s] 30%|███       | 1403/4613 [14:59<30:45,  1.74it/s] 30%|███       | 1404/4613 [15:00<32:38,  1.64it/s] 30%|███       | 1405/4613 [15:00<27:30,  1.94it/s] 30%|███       | 1406/4613 [15:01<30:17,  1.76it/s] 31%|███       | 1407/4613 [15:01<23:37,  2.26it/s] 31%|███       | 1408/4613 [15:02<28:37,  1.87it/s] 31%|███       | 1409/4613 [15:02<23:45,  2.25it/s] 31%|███       | 1410/4613 [15:03<29:41,  1.80it/s] 31%|███       | 1411/4613 [15:03<32:34,  1.64it/s] 31%|███       | 1412/4613 [15:04<33:40,  1.58it/s] 31%|███       | 1413/4613 [15:04<26:20,  2.02it/s] 31%|███       | 1414/4613 [15:05<30:27,  1.75it/s] 31%|███       | 1415/4613 [15:05<24:20,  2.19it/s] 31%|███       | 1416/4613 [15:06<28:02,  1.90it/s] 31%|███       | 1417/4613 [15:06<22:41,  2.35it/s] 31%|███       | 1418/4613 [15:07<26:59,  1.97it/s] 31%|███       | 1419/4613 [15:07<21:48,  2.44it/s] 31%|███       | 1420/4613 [15:08<30:07,  1.77it/s] 31%|███       | 1421/4613 [15:08<31:48,  1.67it/s] 31%|███       | 1422/4613 [15:09<25:23,  2.09it/s] 31%|███       | 1423/4613 [15:09<29:07,  1.83it/s] 31%|███       | 1424/4613 [15:10<34:26,  1.54it/s] 31%|███       | 1425/4613 [15:11<36:52,  1.44it/s] 31%|███       | 1426/4613 [15:12<36:36,  1.45it/s] 31%|███       | 1427/4613 [15:13<40:54,  1.30it/s] 31%|███       | 1428/4613 [15:13<31:42,  1.67it/s] 31%|███       | 1429/4613 [15:14<33:41,  1.58it/s] 31%|███       | 1430/4613 [15:14<34:58,  1.52it/s] 31%|███       | 1431/4613 [15:14<26:46,  1.98it/s] 31%|███       | 1432/4613 [15:15<33:44,  1.57it/s] 31%|███       | 1433/4613 [15:16<36:09,  1.47it/s] 31%|███       | 1434/4613 [15:17<36:07,  1.47it/s] 31%|███       | 1435/4613 [15:17<28:09,  1.88it/s] 31%|███       | 1436/4613 [15:18<30:54,  1.71it/s] 31%|███       | 1437/4613 [15:18<25:57,  2.04it/s] 31%|███       | 1438/4613 [15:19<29:17,  1.81it/s] 31%|███       | 1439/4613 [15:19<31:03,  1.70it/s] 31%|███       | 1440/4613 [15:20<24:24,  2.17it/s] 31%|███       | 1441/4613 [15:20<30:50,  1.71it/s] 31%|███▏      | 1442/4613 [15:21<32:47,  1.61it/s] 31%|███▏      | 1443/4613 [15:21<25:57,  2.04it/s] 31%|███▏      | 1444/4613 [15:22<29:48,  1.77it/s] 31%|███▏      | 1445/4613 [15:22<24:16,  2.18it/s] 31%|███▏      | 1446/4613 [15:23<27:16,  1.94it/s] 31%|███▏      | 1447/4613 [15:24<32:08,  1.64it/s] 31%|███▏      | 1448/4613 [15:25<36:10,  1.46it/s] 31%|███▏      | 1449/4613 [15:25<38:56,  1.35it/s] 31%|███▏      | 1450/4613 [15:26<29:33,  1.78it/s] 31%|███▏      | 1451/4613 [15:26<31:45,  1.66it/s] 31%|███▏      | 1452/4613 [15:27<25:39,  2.05it/s] 31%|███▏      | 1453/4613 [15:27<31:50,  1.65it/s] 32%|███▏      | 1454/4613 [15:28<33:48,  1.56it/s] 32%|███▏      | 1455/4613 [15:28<27:18,  1.93it/s] 32%|███▏      | 1456/4613 [15:29<28:33,  1.84it/s] 32%|███▏      | 1457/4613 [15:29<23:17,  2.26it/s] 32%|███▏      | 1458/4613 [15:30<28:31,  1.84it/s] 32%|███▏      | 1459/4613 [15:31<30:55,  1.70it/s] 32%|███▏      | 1460/4613 [15:31<24:24,  2.15it/s] 32%|███▏      | 1461/4613 [15:32<30:32,  1.72it/s] 32%|███▏      | 1462/4613 [15:32<33:05,  1.59it/s] 32%|███▏      | 1463/4613 [15:33<38:05,  1.38it/s] 32%|███▏      | 1464/4613 [15:34<37:35,  1.40it/s] 32%|███▏      | 1465/4613 [15:35<41:53,  1.25it/s] 32%|███▏      | 1466/4613 [15:36<39:07,  1.34it/s] 32%|███▏      | 1467/4613 [15:36<30:14,  1.73it/s] 32%|███▏      | 1468/4613 [15:37<32:41,  1.60it/s] 32%|███▏      | 1469/4613 [15:37<34:40,  1.51it/s] 32%|███▏      | 1470/4613 [15:38<26:39,  1.96it/s] 32%|███▏      | 1471/4613 [15:38<32:09,  1.63it/s] 32%|███▏      | 1472/4613 [15:39<33:19,  1.57it/s] 32%|███▏      | 1473/4613 [15:39<26:08,  2.00it/s] 32%|███▏      | 1474/4613 [15:40<31:49,  1.64it/s] 32%|███▏      | 1475/4613 [15:41<36:12,  1.44it/s] 32%|███▏      | 1476/4613 [15:42<38:45,  1.35it/s] 32%|███▏      | 1477/4613 [15:43<38:50,  1.35it/s] 32%|███▏      | 1478/4613 [15:43<39:19,  1.33it/s] 32%|███▏      | 1479/4613 [15:44<30:53,  1.69it/s] 32%|███▏      | 1480/4613 [15:44<32:11,  1.62it/s] 32%|███▏      | 1481/4613 [15:44<25:56,  2.01it/s] 32%|███▏      | 1482/4613 [15:45<28:14,  1.85it/s] 32%|███▏      | 1483/4613 [15:45<22:23,  2.33it/s] 32%|███▏      | 1484/4613 [15:46<26:32,  1.96it/s] 32%|███▏      | 1485/4613 [15:47<31:06,  1.68it/s] 32%|███▏      | 1486/4613 [15:47<23:55,  2.18it/s] 32%|███▏      | 1487/4613 [15:48<28:07,  1.85it/s] 32%|███▏      | 1488/4613 [15:48<22:50,  2.28it/s] 32%|███▏      | 1489/4613 [15:49<28:44,  1.81it/s] 32%|███▏      | 1490/4613 [15:49<23:36,  2.20it/s] 32%|███▏      | 1491/4613 [15:50<27:20,  1.90it/s] 32%|███▏      | 1492/4613 [15:50<31:16,  1.66it/s] 32%|███▏      | 1493/4613 [15:51<35:52,  1.45it/s] 32%|███▏      | 1494/4613 [15:51<28:09,  1.85it/s] 32%|███▏      | 1495/4613 [15:52<33:55,  1.53it/s] 32%|███▏      | 1496/4613 [15:53<34:27,  1.51it/s] 32%|███▏      | 1497/4613 [15:54<36:23,  1.43it/s] 32%|███▏      | 1498/4613 [15:55<37:35,  1.38it/s] 32%|███▏      | 1499/4613 [15:56<40:11,  1.29it/s] 33%|███▎      | 1500/4613 [15:56<31:32,  1.64it/s] 33%|███▎      | 1501/4613 [15:56<32:24,  1.60it/s] 33%|███▎      | 1502/4613 [15:57<34:27,  1.50it/s] 33%|███▎      | 1503/4613 [15:57<26:29,  1.96it/s] 33%|███▎      | 1504/4613 [15:58<31:46,  1.63it/s] 33%|███▎      | 1505/4613 [15:59<33:27,  1.55it/s] 33%|███▎      | 1506/4613 [16:00<37:13,  1.39it/s] 33%|███▎      | 1507/4613 [16:00<29:05,  1.78it/s] 33%|███▎      | 1508/4613 [16:01<31:58,  1.62it/s] 33%|███▎      | 1509/4613 [16:01<33:15,  1.56it/s] 33%|███▎      | 1510/4613 [16:02<36:12,  1.43it/s] 33%|███▎      | 1511/4613 [16:02<27:34,  1.88it/s] 33%|███▎      | 1512/4613 [16:03<31:55,  1.62it/s] 33%|███▎      | 1513/4613 [16:04<34:38,  1.49it/s] 33%|███▎      | 1514/4613 [16:04<27:25,  1.88it/s] 33%|███▎      | 1515/4613 [16:05<31:35,  1.63it/s] 33%|███▎      | 1516/4613 [16:06<33:55,  1.52it/s] 33%|███▎      | 1517/4613 [16:07<35:43,  1.44it/s] 33%|███▎      | 1518/4613 [16:07<28:09,  1.83it/s] 33%|███▎      | 1519/4613 [16:07<30:27,  1.69it/s] 33%|███▎      | 1520/4613 [16:09<44:35,  1.16it/s] 33%|███▎      | 1521/4613 [16:09<36:42,  1.40it/s] 33%|███▎      | 1522/4613 [16:10<38:34,  1.34it/s] 33%|███▎      | 1523/4613 [16:11<39:17,  1.31it/s] 33%|███▎      | 1524/4613 [16:12<38:07,  1.35it/s] 33%|███▎      | 1525/4613 [16:12<39:24,  1.31it/s] 33%|███▎      | 1526/4613 [16:13<40:18,  1.28it/s] 33%|███▎      | 1527/4613 [16:13<30:58,  1.66it/s] 33%|███▎      | 1528/4613 [16:14<32:00,  1.61it/s] 33%|███▎      | 1529/4613 [16:14<24:45,  2.08it/s] 33%|███▎      | 1530/4613 [16:15<32:32,  1.58it/s] 33%|███▎      | 1531/4613 [16:16<34:57,  1.47it/s] 33%|███▎      | 1532/4613 [16:17<35:58,  1.43it/s] 33%|███▎      | 1533/4613 [16:18<36:52,  1.39it/s] 33%|███▎      | 1534/4613 [16:18<37:04,  1.38it/s] 33%|███▎      | 1535/4613 [16:19<41:06,  1.25it/s] 33%|███▎      | 1536/4613 [16:20<40:24,  1.27it/s] 33%|███▎      | 1537/4613 [16:20<32:08,  1.59it/s] 33%|███▎      | 1538/4613 [16:21<32:13,  1.59it/s] 33%|███▎      | 1539/4613 [16:22<33:51,  1.51it/s] 33%|███▎      | 1540/4613 [16:22<36:35,  1.40it/s] 33%|███▎      | 1541/4613 [16:23<37:40,  1.36it/s] 33%|███▎      | 1542/4613 [16:23<29:32,  1.73it/s] 33%|███▎      | 1543/4613 [16:24<32:52,  1.56it/s] 33%|███▎      | 1544/4613 [16:24<25:41,  1.99it/s] 33%|███▎      | 1545/4613 [16:25<29:54,  1.71it/s] 34%|███▎      | 1546/4613 [16:28<1:08:44,  1.34s/it] 34%|███▎      | 1547/4613 [16:28<50:18,  1.02it/s]   34%|███▎      | 1548/4613 [16:29<46:03,  1.11it/s] 34%|███▎      | 1549/4613 [16:29<35:40,  1.43it/s] 34%|███▎      | 1550/4613 [16:30<35:38,  1.43it/s] 34%|███▎      | 1551/4613 [16:31<36:37,  1.39it/s] 34%|███▎      | 1552/4613 [16:31<28:44,  1.77it/s] 34%|███▎      | 1553/4613 [16:32<30:53,  1.65it/s] 34%|███▎      | 1554/4613 [16:32<23:34,  2.16it/s] 34%|███▎      | 1555/4613 [16:33<28:00,  1.82it/s] 34%|███▎      | 1556/4613 [16:33<23:21,  2.18it/s] 34%|███▍      | 1557/4613 [16:34<25:49,  1.97it/s] 34%|███▍      | 1558/4613 [16:34<30:09,  1.69it/s] 34%|███▍      | 1559/4613 [16:35<25:44,  1.98it/s] 34%|███▍      | 1560/4613 [16:35<27:16,  1.87it/s] 34%|███▍      | 1561/4613 [16:36<32:30,  1.56it/s] 34%|███▍      | 1562/4613 [16:37<34:52,  1.46it/s] 34%|███▍      | 1563/4613 [16:37<27:49,  1.83it/s] 34%|███▍      | 1564/4613 [16:38<29:24,  1.73it/s] 34%|███▍      | 1565/4613 [16:38<23:28,  2.16it/s] 34%|███▍      | 1566/4613 [16:39<27:35,  1.84it/s] 34%|███▍      | 1567/4613 [16:40<31:22,  1.62it/s] 34%|███▍      | 1568/4613 [16:40<24:14,  2.09it/s] 34%|███▍      | 1569/4613 [16:40<27:21,  1.85it/s] 34%|███▍      | 1570/4613 [16:41<22:29,  2.26it/s] 34%|███▍      | 1571/4613 [16:41<26:23,  1.92it/s] 34%|███▍      | 1572/4613 [16:42<31:32,  1.61it/s] 34%|███▍      | 1573/4613 [16:42<25:43,  1.97it/s] 34%|███▍      | 1574/4613 [16:43<27:31,  1.84it/s] 34%|███▍      | 1575/4613 [16:44<32:11,  1.57it/s] 34%|███▍      | 1576/4613 [16:45<33:51,  1.49it/s] 34%|███▍      | 1577/4613 [16:45<36:04,  1.40it/s] 34%|███▍      | 1578/4613 [16:46<38:51,  1.30it/s] 34%|███▍      | 1579/4613 [16:47<38:45,  1.30it/s] 34%|███▍      | 1580/4613 [16:47<30:41,  1.65it/s] 34%|███▍      | 1581/4613 [16:48<31:37,  1.60it/s] 34%|███▍      | 1582/4613 [16:49<34:52,  1.45it/s] 34%|███▍      | 1583/4613 [16:49<27:16,  1.85it/s] 34%|███▍      | 1584/4613 [16:50<29:11,  1.73it/s] 34%|███▍      | 1585/4613 [16:50<33:03,  1.53it/s] 34%|███▍      | 1586/4613 [16:51<27:30,  1.83it/s] 34%|███▍      | 1587/4613 [16:51<29:02,  1.74it/s] 34%|███▍      | 1588/4613 [16:54<1:00:25,  1.20s/it] 34%|███▍      | 1589/4613 [16:55<53:15,  1.06s/it]   34%|███▍      | 1590/4613 [16:56<50:57,  1.01s/it] 34%|███▍      | 1591/4613 [16:56<38:49,  1.30it/s] 35%|███▍      | 1592/4613 [16:57<37:54,  1.33it/s] 35%|███▍      | 1593/4613 [16:57<39:16,  1.28it/s] 35%|███▍      | 1594/4613 [16:58<41:40,  1.21it/s] 35%|███▍      | 1595/4613 [16:59<38:30,  1.31it/s] 35%|███▍      | 1596/4613 [16:59<30:48,  1.63it/s] 35%|███▍      | 1597/4613 [17:00<32:41,  1.54it/s] 35%|███▍      | 1598/4613 [17:01<34:44,  1.45it/s] 35%|███▍      | 1599/4613 [17:02<37:06,  1.35it/s] 35%|███▍      | 1600/4613 [17:02<37:37,  1.33it/s] 35%|███▍      | 1601/4613 [17:03<38:29,  1.30it/s] 35%|███▍      | 1602/4613 [17:04<39:19,  1.28it/s] 35%|███▍      | 1603/4613 [17:05<39:14,  1.28it/s] 35%|███▍      | 1604/4613 [17:06<39:59,  1.25it/s] 35%|███▍      | 1605/4613 [17:06<32:50,  1.53it/s] 35%|███▍      | 1606/4613 [17:07<32:45,  1.53it/s] 35%|███▍      | 1607/4613 [17:07<25:43,  1.95it/s] 35%|███▍      | 1608/4613 [17:08<29:47,  1.68it/s] 35%|███▍      | 1609/4613 [17:08<32:10,  1.56it/s] 35%|███▍      | 1610/4613 [17:09<24:57,  2.01it/s] 35%|███▍      | 1611/4613 [17:09<29:19,  1.71it/s] 35%|███▍      | 1612/4613 [17:10<33:49,  1.48it/s] 35%|███▍      | 1613/4613 [17:12<48:19,  1.03it/s] 35%|███▍      | 1614/4613 [17:12<36:56,  1.35it/s] 35%|███▌      | 1615/4613 [17:13<37:46,  1.32it/s] 35%|███▌      | 1616/4613 [17:14<36:22,  1.37it/s] 35%|███▌      | 1617/4613 [17:14<36:52,  1.35it/s] 35%|███▌      | 1618/4613 [17:15<37:31,  1.33it/s] 35%|███▌      | 1619/4613 [17:15<28:46,  1.73it/s] 35%|███▌      | 1620/4613 [17:16<33:09,  1.50it/s] 35%|███▌      | 1621/4613 [17:17<33:06,  1.51it/s] 35%|███▌      | 1622/4613 [17:17<26:48,  1.86it/s] 35%|███▌      | 1623/4613 [17:18<40:07,  1.24it/s] 35%|███▌      | 1624/4613 [17:19<30:17,  1.64it/s] 35%|███▌      | 1625/4613 [17:19<32:32,  1.53it/s] 35%|███▌      | 1626/4613 [17:20<26:08,  1.90it/s] 35%|███▌      | 1627/4613 [17:20<27:56,  1.78it/s] 35%|███▌      | 1628/4613 [17:21<30:42,  1.62it/s] 35%|███▌      | 1629/4613 [17:22<33:55,  1.47it/s] 35%|███▌      | 1630/4613 [17:22<26:20,  1.89it/s] 35%|███▌      | 1631/4613 [17:23<28:46,  1.73it/s] 35%|███▌      | 1632/4613 [17:24<32:23,  1.53it/s] 35%|███▌      | 1633/4613 [17:24<28:08,  1.76it/s] 35%|███▌      | 1634/4613 [17:25<31:15,  1.59it/s] 35%|███▌      | 1635/4613 [17:25<32:28,  1.53it/s] 35%|███▌      | 1636/4613 [17:26<35:48,  1.39it/s] 35%|███▌      | 1637/4613 [17:27<37:23,  1.33it/s] 36%|███▌      | 1638/4613 [17:27<28:04,  1.77it/s] 36%|███▌      | 1639/4613 [17:28<33:10,  1.49it/s] 36%|███▌      | 1640/4613 [17:29<33:17,  1.49it/s] 36%|███▌      | 1641/4613 [17:29<26:13,  1.89it/s] 36%|███▌      | 1642/4613 [17:30<31:42,  1.56it/s] 36%|███▌      | 1643/4613 [17:31<33:54,  1.46it/s] 36%|███▌      | 1644/4613 [17:31<34:16,  1.44it/s] 36%|███▌      | 1645/4613 [17:32<35:33,  1.39it/s] 36%|███▌      | 1646/4613 [17:32<28:29,  1.74it/s] 36%|███▌      | 1647/4613 [17:33<29:29,  1.68it/s] 36%|███▌      | 1648/4613 [17:33<22:47,  2.17it/s] 36%|███▌      | 1649/4613 [17:34<28:34,  1.73it/s] 36%|███▌      | 1650/4613 [17:35<30:24,  1.62it/s] 36%|███▌      | 1651/4613 [17:36<46:25,  1.06it/s] 36%|███▌      | 1652/4613 [17:37<34:53,  1.41it/s] 36%|███▌      | 1653/4613 [17:37<34:23,  1.43it/s] 36%|███▌      | 1654/4613 [17:37<26:42,  1.85it/s] 36%|███▌      | 1655/4613 [17:38<28:26,  1.73it/s] 36%|███▌      | 1656/4613 [17:38<23:03,  2.14it/s] 36%|███▌      | 1657/4613 [17:39<27:04,  1.82it/s] 36%|███▌      | 1658/4613 [17:39<22:02,  2.23it/s] 36%|███▌      | 1659/4613 [17:40<25:34,  1.92it/s] 36%|███▌      | 1660/4613 [17:41<28:22,  1.73it/s] 36%|███▌      | 1661/4613 [17:41<22:06,  2.23it/s] 36%|███▌      | 1662/4613 [17:42<26:31,  1.85it/s] 36%|███▌      | 1663/4613 [17:42<21:01,  2.34it/s] 36%|███▌      | 1664/4613 [17:43<28:58,  1.70it/s] 36%|███▌      | 1665/4613 [17:43<30:13,  1.63it/s] 36%|███▌      | 1666/4613 [17:44<33:38,  1.46it/s] 36%|███▌      | 1667/4613 [17:44<25:35,  1.92it/s] 36%|███▌      | 1668/4613 [17:45<29:12,  1.68it/s] 36%|███▌      | 1669/4613 [17:45<24:39,  1.99it/s] 36%|███▌      | 1670/4613 [17:46<28:12,  1.74it/s] 36%|███▌      | 1671/4613 [17:47<30:29,  1.61it/s] 36%|███▌      | 1672/4613 [17:47<24:28,  2.00it/s] 36%|███▋      | 1673/4613 [17:48<27:05,  1.81it/s] 36%|███▋      | 1674/4613 [17:48<21:59,  2.23it/s] 36%|███▋      | 1675/4613 [17:49<27:05,  1.81it/s] 36%|███▋      | 1676/4613 [17:50<29:45,  1.64it/s] 36%|███▋      | 1677/4613 [17:50<32:43,  1.50it/s] 36%|███▋      | 1678/4613 [17:51<25:38,  1.91it/s] 36%|███▋      | 1679/4613 [17:51<27:03,  1.81it/s] 36%|███▋      | 1680/4613 [17:52<30:39,  1.59it/s] 36%|███▋      | 1681/4613 [17:52<23:22,  2.09it/s] 36%|███▋      | 1682/4613 [17:53<27:15,  1.79it/s] 36%|███▋      | 1683/4613 [17:53<23:23,  2.09it/s] 37%|███▋      | 1684/4613 [17:54<27:48,  1.76it/s] 37%|███▋      | 1685/4613 [17:55<41:36,  1.17it/s] 37%|███▋      | 1686/4613 [17:56<31:43,  1.54it/s] 37%|███▋      | 1687/4613 [17:56<33:34,  1.45it/s] 37%|███▋      | 1688/4613 [17:57<33:30,  1.45it/s] 37%|███▋      | 1689/4613 [17:58<35:11,  1.39it/s] 37%|███▋      | 1690/4613 [17:58<27:50,  1.75it/s] 37%|███▋      | 1691/4613 [17:59<30:28,  1.60it/s] 37%|███▋      | 1692/4613 [18:00<32:50,  1.48it/s] 37%|███▋      | 1693/4613 [18:00<25:22,  1.92it/s] 37%|███▋      | 1694/4613 [18:00<27:16,  1.78it/s] 37%|███▋      | 1695/4613 [18:01<23:06,  2.11it/s] 37%|███▋      | 1696/4613 [18:01<26:41,  1.82it/s] 37%|███▋      | 1697/4613 [18:02<29:44,  1.63it/s] 37%|███▋      | 1698/4613 [18:03<32:27,  1.50it/s] 37%|███▋      | 1699/4613 [18:04<34:34,  1.40it/s] 37%|███▋      | 1700/4613 [18:04<26:14,  1.85it/s] 37%|███▋      | 1701/4613 [18:05<29:55,  1.62it/s] 37%|███▋      | 1702/4613 [18:05<23:23,  2.07it/s] 37%|███▋      | 1703/4613 [18:06<26:57,  1.80it/s] 37%|███▋      | 1704/4613 [18:06<22:04,  2.20it/s] 37%|███▋      | 1705/4613 [18:07<28:11,  1.72it/s] 37%|███▋      | 1706/4613 [18:07<30:32,  1.59it/s] 37%|███▋      | 1707/4613 [18:08<35:35,  1.36it/s] 37%|███▋      | 1708/4613 [18:09<35:39,  1.36it/s] 37%|███▋      | 1709/4613 [18:10<34:51,  1.39it/s] 37%|███▋      | 1710/4613 [18:10<26:28,  1.83it/s] 37%|███▋      | 1711/4613 [18:11<28:32,  1.69it/s] 37%|███▋      | 1712/4613 [18:12<32:05,  1.51it/s] 37%|███▋      | 1713/4613 [18:12<26:46,  1.80it/s] 37%|███▋      | 1714/4613 [18:13<28:28,  1.70it/s] 37%|███▋      | 1715/4613 [18:13<31:42,  1.52it/s] 37%|███▋      | 1716/4613 [18:14<25:15,  1.91it/s] 37%|███▋      | 1717/4613 [18:14<27:36,  1.75it/s] 37%|███▋      | 1718/4613 [18:14<22:03,  2.19it/s] 37%|███▋      | 1719/4613 [18:15<25:11,  1.91it/s] 37%|███▋      | 1720/4613 [18:15<21:30,  2.24it/s] 37%|███▋      | 1721/4613 [18:16<26:07,  1.84it/s] 37%|███▋      | 1722/4613 [18:17<31:34,  1.53it/s] 37%|███▋      | 1723/4613 [18:18<33:40,  1.43it/s] 37%|███▋      | 1724/4613 [18:19<33:09,  1.45it/s] 37%|███▋      | 1725/4613 [18:21<57:48,  1.20s/it] 37%|███▋      | 1726/4613 [18:21<42:57,  1.12it/s] 37%|███▋      | 1727/4613 [18:22<39:49,  1.21it/s] 37%|███▋      | 1728/4613 [18:22<38:27,  1.25it/s] 37%|███▋      | 1729/4613 [18:23<29:04,  1.65it/s] 38%|███▊      | 1730/4613 [18:23<31:39,  1.52it/s] 38%|███▊      | 1731/4613 [18:24<32:39,  1.47it/s] 38%|███▊      | 1732/4613 [18:24<24:42,  1.94it/s] 38%|███▊      | 1733/4613 [18:25<20:45,  2.31it/s] 38%|███▊      | 1734/4613 [18:26<35:02,  1.37it/s] 38%|███▊      | 1735/4613 [18:26<26:39,  1.80it/s] 38%|███▊      | 1736/4613 [18:28<38:48,  1.24it/s] 38%|███▊      | 1737/4613 [18:28<29:08,  1.64it/s] 38%|███▊      | 1738/4613 [18:28<23:57,  2.00it/s] 38%|███▊      | 1739/4613 [18:29<26:53,  1.78it/s] 38%|███▊      | 1740/4613 [18:29<28:36,  1.67it/s] 38%|███▊      | 1741/4613 [18:29<22:26,  2.13it/s] 38%|███▊      | 1742/4613 [18:30<27:26,  1.74it/s] 38%|███▊      | 1743/4613 [18:32<42:24,  1.13it/s] 38%|███▊      | 1744/4613 [18:33<41:16,  1.16it/s] 38%|███▊      | 1745/4613 [18:34<40:58,  1.17it/s] 38%|███▊      | 1746/4613 [18:34<31:15,  1.53it/s] 38%|███▊      | 1747/4613 [18:34<24:40,  1.94it/s] 38%|███▊      | 1748/4613 [18:35<26:10,  1.82it/s] 38%|███▊      | 1749/4613 [18:35<29:21,  1.63it/s] 38%|███▊      | 1750/4613 [18:35<22:44,  2.10it/s] 38%|███▊      | 1751/4613 [18:36<25:56,  1.84it/s] 38%|███▊      | 1752/4613 [18:36<21:19,  2.24it/s] 38%|███▊      | 1753/4613 [18:37<25:51,  1.84it/s] 38%|███▊      | 1754/4613 [18:38<28:06,  1.70it/s] 38%|███▊      | 1755/4613 [18:39<32:03,  1.49it/s] 38%|███▊      | 1756/4613 [18:39<25:41,  1.85it/s] 38%|███▊      | 1757/4613 [18:40<38:54,  1.22it/s] 38%|███▊      | 1758/4613 [18:41<29:15,  1.63it/s] 38%|███▊      | 1759/4613 [18:41<30:36,  1.55it/s] 38%|███▊      | 1760/4613 [18:41<24:24,  1.95it/s] 38%|███▊      | 1761/4613 [18:42<26:26,  1.80it/s] 38%|███▊      | 1762/4613 [18:42<20:38,  2.30it/s] 38%|███▊      | 1763/4613 [18:43<25:26,  1.87it/s] 38%|███▊      | 1764/4613 [18:43<20:41,  2.29it/s] 38%|███▊      | 1765/4613 [18:44<23:29,  2.02it/s] 38%|███▊      | 1766/4613 [18:45<29:25,  1.61it/s] 38%|███▊      | 1767/4613 [18:46<30:54,  1.53it/s] 38%|███▊      | 1768/4613 [18:46<34:14,  1.39it/s] 38%|███▊      | 1769/4613 [18:47<26:51,  1.76it/s] 38%|███▊      | 1770/4613 [18:47<28:23,  1.67it/s] 38%|███▊      | 1771/4613 [18:48<32:48,  1.44it/s] 38%|███▊      | 1772/4613 [18:48<26:33,  1.78it/s] 38%|███▊      | 1773/4613 [18:49<28:17,  1.67it/s] 38%|███▊      | 1774/4613 [18:50<30:09,  1.57it/s] 38%|███▊      | 1775/4613 [18:50<23:14,  2.04it/s] 38%|███▊      | 1776/4613 [18:51<26:38,  1.77it/s] 39%|███▊      | 1777/4613 [18:52<30:28,  1.55it/s] 39%|███▊      | 1778/4613 [18:52<24:02,  1.97it/s] 39%|███▊      | 1779/4613 [18:53<28:00,  1.69it/s] 39%|███▊      | 1780/4613 [18:53<30:36,  1.54it/s] 39%|███▊      | 1781/4613 [18:54<32:42,  1.44it/s] 39%|███▊      | 1782/4613 [18:54<26:25,  1.79it/s] 39%|███▊      | 1783/4613 [18:55<29:24,  1.60it/s] 39%|███▊      | 1784/4613 [18:56<30:36,  1.54it/s] 39%|███▊      | 1785/4613 [18:57<33:03,  1.43it/s] 39%|███▊      | 1786/4613 [18:57<25:28,  1.85it/s] 39%|███▊      | 1787/4613 [18:58<27:50,  1.69it/s] 39%|███▉      | 1788/4613 [18:58<30:54,  1.52it/s] 39%|███▉      | 1789/4613 [18:59<25:33,  1.84it/s] 39%|███▉      | 1790/4613 [18:59<28:18,  1.66it/s] 39%|███▉      | 1791/4613 [19:00<29:35,  1.59it/s] 39%|███▉      | 1792/4613 [19:00<24:10,  1.94it/s] 39%|███▉      | 1793/4613 [19:01<29:09,  1.61it/s] 39%|███▉      | 1794/4613 [19:02<30:42,  1.53it/s] 39%|███▉      | 1795/4613 [19:03<31:44,  1.48it/s] 39%|███▉      | 1796/4613 [19:03<25:58,  1.81it/s] 39%|███▉      | 1797/4613 [19:04<27:47,  1.69it/s] 39%|███▉      | 1798/4613 [19:05<45:06,  1.04it/s] 39%|███▉      | 1799/4613 [19:06<41:26,  1.13it/s] 39%|███▉      | 1800/4613 [19:06<32:14,  1.45it/s] 39%|███▉      | 1801/4613 [19:07<32:07,  1.46it/s] 39%|███▉      | 1802/4613 [19:08<36:56,  1.27it/s] 39%|███▉      | 1803/4613 [19:09<34:52,  1.34it/s] 39%|███▉      | 1804/4613 [19:09<35:20,  1.32it/s] 39%|███▉      | 1805/4613 [19:10<27:18,  1.71it/s] 39%|███▉      | 1806/4613 [19:10<29:25,  1.59it/s] 39%|███▉      | 1807/4613 [19:11<32:59,  1.42it/s] 39%|███▉      | 1808/4613 [19:12<33:26,  1.40it/s] 39%|███▉      | 1809/4613 [19:12<26:25,  1.77it/s] 39%|███▉      | 1810/4613 [19:13<29:07,  1.60it/s] 39%|███▉      | 1811/4613 [19:14<32:00,  1.46it/s] 39%|███▉      | 1812/4613 [19:14<25:28,  1.83it/s] 39%|███▉      | 1813/4613 [19:15<26:59,  1.73it/s] 39%|███▉      | 1814/4613 [19:15<29:04,  1.60it/s] 39%|███▉      | 1815/4613 [19:16<22:26,  2.08it/s] 39%|███▉      | 1816/4613 [19:16<27:28,  1.70it/s] 39%|███▉      | 1817/4613 [19:17<24:04,  1.94it/s] 39%|███▉      | 1818/4613 [19:18<34:51,  1.34it/s] 39%|███▉      | 1819/4613 [19:18<26:32,  1.75it/s] 39%|███▉      | 1820/4613 [19:19<28:54,  1.61it/s] 39%|███▉      | 1821/4613 [19:19<23:43,  1.96it/s] 39%|███▉      | 1822/4613 [19:20<27:40,  1.68it/s] 40%|███▉      | 1823/4613 [19:21<29:05,  1.60it/s] 40%|███▉      | 1824/4613 [19:21<30:26,  1.53it/s] 40%|███▉      | 1825/4613 [19:22<25:05,  1.85it/s] 40%|███▉      | 1826/4613 [19:22<27:23,  1.70it/s] 40%|███▉      | 1827/4613 [19:23<30:56,  1.50it/s] 40%|███▉      | 1828/4613 [19:24<31:46,  1.46it/s] 40%|███▉      | 1829/4613 [19:25<34:30,  1.34it/s] 40%|███▉      | 1830/4613 [19:26<35:18,  1.31it/s] 40%|███▉      | 1831/4613 [19:26<26:59,  1.72it/s] 40%|███▉      | 1832/4613 [19:27<29:35,  1.57it/s] 40%|███▉      | 1833/4613 [19:27<32:30,  1.43it/s] 40%|███▉      | 1834/4613 [19:28<25:37,  1.81it/s] 40%|███▉      | 1835/4613 [19:28<26:47,  1.73it/s] 40%|███▉      | 1836/4613 [19:30<43:30,  1.06it/s] 40%|███▉      | 1837/4613 [19:31<40:44,  1.14it/s] 40%|███▉      | 1838/4613 [19:31<30:25,  1.52it/s] 40%|███▉      | 1839/4613 [19:32<30:31,  1.51it/s] 40%|███▉      | 1840/4613 [19:32<24:14,  1.91it/s] 40%|███▉      | 1841/4613 [19:33<26:40,  1.73it/s] 40%|███▉      | 1842/4613 [19:33<21:23,  2.16it/s] 40%|███▉      | 1843/4613 [19:34<25:51,  1.79it/s] 40%|███▉      | 1844/4613 [19:34<28:24,  1.62it/s] 40%|███▉      | 1845/4613 [19:35<29:26,  1.57it/s] 40%|████      | 1846/4613 [19:35<24:24,  1.89it/s] 40%|████      | 1847/4613 [19:36<26:49,  1.72it/s] 40%|████      | 1848/4613 [19:36<21:47,  2.11it/s] 40%|████      | 1849/4613 [19:37<26:56,  1.71it/s] 40%|████      | 1850/4613 [19:38<27:24,  1.68it/s] 40%|████      | 1851/4613 [19:38<30:53,  1.49it/s] 40%|████      | 1852/4613 [19:39<24:04,  1.91it/s] 40%|████      | 1853/4613 [19:39<26:19,  1.75it/s] 40%|████      | 1854/4613 [19:40<22:12,  2.07it/s] 40%|████      | 1855/4613 [19:40<24:36,  1.87it/s] 40%|████      | 1856/4613 [19:41<30:20,  1.51it/s] 40%|████      | 1857/4613 [19:42<30:48,  1.49it/s] 40%|████      | 1858/4613 [19:42<24:33,  1.87it/s] 40%|████      | 1859/4613 [19:45<1:00:24,  1.32s/it] 40%|████      | 1860/4613 [19:46<46:20,  1.01s/it]   40%|████      | 1861/4613 [19:46<41:44,  1.10it/s] 40%|████      | 1862/4613 [19:47<39:09,  1.17it/s] 40%|████      | 1863/4613 [19:47<31:21,  1.46it/s] 40%|████      | 1864/4613 [19:48<33:19,  1.38it/s] 40%|████      | 1865/4613 [19:49<33:12,  1.38it/s] 40%|████      | 1866/4613 [19:49<32:36,  1.40it/s] 40%|████      | 1867/4613 [19:50<25:59,  1.76it/s] 40%|████      | 1868/4613 [19:50<27:32,  1.66it/s] 41%|████      | 1869/4613 [19:51<30:36,  1.49it/s] 41%|████      | 1870/4613 [19:51<24:20,  1.88it/s] 41%|████      | 1871/4613 [19:52<30:10,  1.51it/s] 41%|████      | 1872/4613 [19:53<30:37,  1.49it/s] 41%|████      | 1873/4613 [19:54<33:58,  1.34it/s] 41%|████      | 1874/4613 [19:55<33:14,  1.37it/s] 41%|████      | 1875/4613 [19:56<36:44,  1.24it/s] 41%|████      | 1876/4613 [19:57<37:17,  1.22it/s] 41%|████      | 1877/4613 [19:57<36:46,  1.24it/s] 41%|████      | 1878/4613 [19:58<37:08,  1.23it/s] 41%|████      | 1879/4613 [19:58<27:59,  1.63it/s] 41%|████      | 1880/4613 [19:59<30:08,  1.51it/s] 41%|████      | 1881/4613 [20:00<31:42,  1.44it/s] 41%|████      | 1882/4613 [20:00<24:28,  1.86it/s] 41%|████      | 1883/4613 [20:01<28:22,  1.60it/s] 41%|████      | 1884/4613 [20:02<29:40,  1.53it/s] 41%|████      | 1885/4613 [20:02<22:40,  2.01it/s] 41%|████      | 1886/4613 [20:02<25:44,  1.77it/s] 41%|████      | 1887/4613 [20:03<29:13,  1.55it/s] 41%|████      | 1888/4613 [20:04<31:27,  1.44it/s] 41%|████      | 1889/4613 [20:04<24:03,  1.89it/s] 41%|████      | 1890/4613 [20:05<28:03,  1.62it/s] 41%|████      | 1891/4613 [20:06<28:45,  1.58it/s] 41%|████      | 1892/4613 [20:07<32:57,  1.38it/s] 41%|████      | 1893/4613 [20:07<25:12,  1.80it/s] 41%|████      | 1894/4613 [20:07<26:57,  1.68it/s] 41%|████      | 1895/4613 [20:08<20:55,  2.16it/s] 41%|████      | 1896/4613 [20:08<24:26,  1.85it/s] 41%|████      | 1897/4613 [20:09<19:31,  2.32it/s] 41%|████      | 1898/4613 [20:09<22:58,  1.97it/s] 41%|████      | 1899/4613 [20:09<19:02,  2.37it/s] 41%|████      | 1900/4613 [20:10<23:39,  1.91it/s] 41%|████      | 1901/4613 [20:10<19:07,  2.36it/s] 41%|████      | 1902/4613 [20:11<22:30,  2.01it/s] 41%|████▏     | 1903/4613 [20:11<19:17,  2.34it/s] 41%|████▏     | 1904/4613 [20:12<22:08,  2.04it/s] 41%|████▏     | 1905/4613 [20:13<25:55,  1.74it/s] 41%|████▏     | 1906/4613 [20:14<39:39,  1.14it/s] 41%|████▏     | 1907/4613 [20:15<30:48,  1.46it/s] 41%|████▏     | 1908/4613 [20:16<40:56,  1.10it/s] 41%|████▏     | 1909/4613 [20:16<31:18,  1.44it/s] 41%|████▏     | 1910/4613 [20:17<32:37,  1.38it/s] 41%|████▏     | 1911/4613 [20:18<33:04,  1.36it/s] 41%|████▏     | 1912/4613 [20:18<33:05,  1.36it/s] 41%|████▏     | 1913/4613 [20:19<27:21,  1.64it/s] 41%|████▏     | 1914/4613 [20:19<28:17,  1.59it/s] 42%|████▏     | 1915/4613 [20:20<29:31,  1.52it/s] 42%|████▏     | 1916/4613 [20:21<31:55,  1.41it/s] 42%|████▏     | 1917/4613 [20:21<25:50,  1.74it/s] 42%|████▏     | 1918/4613 [20:22<26:50,  1.67it/s] 42%|████▏     | 1919/4613 [20:23<30:16,  1.48it/s] 42%|████▏     | 1920/4613 [20:24<31:46,  1.41it/s] 42%|████▏     | 1921/4613 [20:26<57:12,  1.28s/it] 42%|████▏     | 1922/4613 [20:26<42:08,  1.06it/s] 42%|████▏     | 1923/4613 [20:27<38:58,  1.15it/s] 42%|████▏     | 1924/4613 [20:27<29:13,  1.53it/s] 42%|████▏     | 1925/4613 [20:28<32:03,  1.40it/s] 42%|████▏     | 1926/4613 [20:29<31:57,  1.40it/s] 42%|████▏     | 1927/4613 [20:29<25:30,  1.76it/s] 42%|████▏     | 1928/4613 [20:30<28:59,  1.54it/s] 42%|████▏     | 1929/4613 [20:31<41:02,  1.09it/s] 42%|████▏     | 1930/4613 [20:32<38:23,  1.16it/s] 42%|████▏     | 1931/4613 [20:32<29:12,  1.53it/s] 42%|████▏     | 1932/4613 [20:33<30:20,  1.47it/s] 42%|████▏     | 1933/4613 [20:33<24:17,  1.84it/s] 42%|████▏     | 1934/4613 [20:34<28:48,  1.55it/s] 42%|████▏     | 1935/4613 [20:35<38:08,  1.17it/s] 42%|████▏     | 1936/4613 [20:36<38:21,  1.16it/s] 42%|████▏     | 1937/4613 [20:36<29:19,  1.52it/s] 42%|████▏     | 1938/4613 [20:37<30:15,  1.47it/s] 42%|████▏     | 1939/4613 [20:38<31:01,  1.44it/s] 42%|████▏     | 1940/4613 [20:38<24:30,  1.82it/s] 42%|████▏     | 1941/4613 [20:39<27:16,  1.63it/s] 42%|████▏     | 1942/4613 [20:39<21:47,  2.04it/s] 42%|████▏     | 1943/4613 [20:40<25:03,  1.78it/s] 42%|████▏     | 1944/4613 [20:41<27:59,  1.59it/s] 42%|████▏     | 1945/4613 [20:41<22:46,  1.95it/s] 42%|████▏     | 1946/4613 [20:42<25:21,  1.75it/s] 42%|████▏     | 1947/4613 [20:42<27:22,  1.62it/s] 42%|████▏     | 1948/4613 [20:44<40:51,  1.09it/s] 42%|████▏     | 1949/4613 [20:44<30:43,  1.45it/s] 42%|████▏     | 1950/4613 [20:45<31:14,  1.42it/s] 42%|████▏     | 1951/4613 [20:46<33:19,  1.33it/s] 42%|████▏     | 1952/4613 [20:46<33:47,  1.31it/s] 42%|████▏     | 1953/4613 [20:47<25:51,  1.71it/s] 42%|████▏     | 1954/4613 [20:47<28:10,  1.57it/s] 42%|████▏     | 1955/4613 [20:48<29:20,  1.51it/s] 42%|████▏     | 1956/4613 [20:48<22:26,  1.97it/s] 42%|████▏     | 1957/4613 [20:49<27:45,  1.59it/s] 42%|████▏     | 1958/4613 [20:49<21:20,  2.07it/s] 42%|████▏     | 1959/4613 [20:50<25:13,  1.75it/s] 42%|████▏     | 1960/4613 [20:51<27:58,  1.58it/s] 43%|████▎     | 1961/4613 [20:51<23:28,  1.88it/s] 43%|████▎     | 1962/4613 [20:52<25:16,  1.75it/s] 43%|████▎     | 1963/4613 [20:53<29:15,  1.51it/s] 43%|████▎     | 1964/4613 [20:53<29:34,  1.49it/s] 43%|████▎     | 1965/4613 [20:55<41:48,  1.06it/s] 43%|████▎     | 1966/4613 [20:56<40:24,  1.09it/s] 43%|████▎     | 1967/4613 [20:56<30:54,  1.43it/s] 43%|████▎     | 1968/4613 [20:57<31:21,  1.41it/s] 43%|████▎     | 1969/4613 [20:57<24:44,  1.78it/s] 43%|████▎     | 1970/4613 [20:58<27:25,  1.61it/s] 43%|████▎     | 1971/4613 [20:58<28:13,  1.56it/s] 43%|████▎     | 1972/4613 [20:59<22:34,  1.95it/s] 43%|████▎     | 1973/4613 [21:00<34:20,  1.28it/s] 43%|████▎     | 1974/4613 [21:00<26:07,  1.68it/s] 43%|████▎     | 1975/4613 [21:01<28:27,  1.54it/s] 43%|████▎     | 1976/4613 [21:02<30:19,  1.45it/s] 43%|████▎     | 1977/4613 [21:02<23:52,  1.84it/s] 43%|████▎     | 1978/4613 [21:03<25:15,  1.74it/s] 43%|████▎     | 1979/4613 [21:03<19:48,  2.22it/s] 43%|████▎     | 1980/4613 [21:04<23:50,  1.84it/s] 43%|████▎     | 1981/4613 [21:04<19:35,  2.24it/s] 43%|████▎     | 1982/4613 [21:05<25:20,  1.73it/s] 43%|████▎     | 1983/4613 [21:05<27:24,  1.60it/s] 43%|████▎     | 1984/4613 [21:06<27:51,  1.57it/s] 43%|████▎     | 1985/4613 [21:06<21:41,  2.02it/s] 43%|████▎     | 1986/4613 [21:07<27:24,  1.60it/s] 43%|████▎     | 1987/4613 [21:08<28:03,  1.56it/s] 43%|████▎     | 1988/4613 [21:09<31:20,  1.40it/s] 43%|████▎     | 1989/4613 [21:10<33:02,  1.32it/s] 43%|████▎     | 1990/4613 [21:10<31:52,  1.37it/s] 43%|████▎     | 1991/4613 [21:10<24:33,  1.78it/s] 43%|████▎     | 1992/4613 [21:11<27:55,  1.56it/s] 43%|████▎     | 1993/4613 [21:12<28:28,  1.53it/s] 43%|████▎     | 1994/4613 [21:12<23:01,  1.90it/s] 43%|████▎     | 1995/4613 [21:13<26:58,  1.62it/s] 43%|████▎     | 1996/4613 [21:14<28:44,  1.52it/s] 43%|████▎     | 1997/4613 [21:15<32:31,  1.34it/s] 43%|████▎     | 1998/4613 [21:15<31:28,  1.39it/s] 43%|████▎     | 1999/4613 [21:16<25:48,  1.69it/s] 43%|████▎     | 2000/4613 [21:16<26:33,  1.64it/s] 43%|████▎     | 2001/4613 [21:17<28:14,  1.54it/s] 43%|████▎     | 2002/4613 [21:17<21:26,  2.03it/s] 43%|████▎     | 2003/4613 [21:17<17:42,  2.46it/s] 43%|████▎     | 2004/4613 [21:18<21:05,  2.06it/s] 43%|████▎     | 2005/4613 [21:19<24:32,  1.77it/s] 43%|████▎     | 2006/4613 [21:20<28:16,  1.54it/s] 44%|████▎     | 2007/4613 [21:20<22:49,  1.90it/s] 44%|████▎     | 2008/4613 [21:21<25:05,  1.73it/s] 44%|████▎     | 2009/4613 [21:21<19:47,  2.19it/s] 44%|████▎     | 2010/4613 [21:21<23:01,  1.88it/s] 44%|████▎     | 2011/4613 [21:22<28:22,  1.53it/s] 44%|████▎     | 2012/4613 [21:23<22:28,  1.93it/s] 44%|████▎     | 2013/4613 [21:23<24:10,  1.79it/s] 44%|████▎     | 2014/4613 [21:24<28:51,  1.50it/s] 44%|████▎     | 2015/4613 [21:25<29:01,  1.49it/s] 44%|████▎     | 2016/4613 [21:27<44:35,  1.03s/it] 44%|████▎     | 2017/4613 [21:28<43:50,  1.01s/it] 44%|████▎     | 2018/4613 [21:28<40:56,  1.06it/s] 44%|████▍     | 2019/4613 [21:29<38:26,  1.12it/s] 44%|████▍     | 2020/4613 [21:30<36:05,  1.20it/s] 44%|████▍     | 2021/4613 [21:30<28:13,  1.53it/s] 44%|████▍     | 2022/4613 [21:31<30:05,  1.44it/s] 44%|████▍     | 2023/4613 [21:32<30:59,  1.39it/s] 44%|████▍     | 2024/4613 [21:32<24:14,  1.78it/s] 44%|████▍     | 2025/4613 [21:33<26:01,  1.66it/s] 44%|████▍     | 2026/4613 [21:33<28:18,  1.52it/s] 44%|████▍     | 2027/4613 [21:34<30:07,  1.43it/s] 44%|████▍     | 2028/4613 [21:35<35:51,  1.20it/s] 44%|████▍     | 2029/4613 [21:36<33:40,  1.28it/s] 44%|████▍     | 2030/4613 [21:36<25:45,  1.67it/s] 44%|████▍     | 2031/4613 [21:37<26:51,  1.60it/s] 44%|████▍     | 2032/4613 [21:37<21:07,  2.04it/s] 44%|████▍     | 2033/4613 [21:38<24:08,  1.78it/s] 44%|████▍     | 2034/4613 [21:39<26:49,  1.60it/s] 44%|████▍     | 2035/4613 [21:39<20:32,  2.09it/s] 44%|████▍     | 2036/4613 [21:39<24:04,  1.78it/s] 44%|████▍     | 2037/4613 [21:40<26:27,  1.62it/s] 44%|████▍     | 2038/4613 [21:40<20:42,  2.07it/s] 44%|████▍     | 2039/4613 [21:41<25:36,  1.67it/s] 44%|████▍     | 2040/4613 [21:42<26:46,  1.60it/s] 44%|████▍     | 2041/4613 [21:42<20:55,  2.05it/s] 44%|████▍     | 2042/4613 [21:43<24:50,  1.72it/s] 44%|████▍     | 2043/4613 [21:44<36:22,  1.18it/s] 44%|████▍     | 2044/4613 [21:45<29:37,  1.45it/s] 44%|████▍     | 2045/4613 [21:47<50:41,  1.18s/it] 44%|████▍     | 2046/4613 [21:48<44:38,  1.04s/it] 44%|████▍     | 2047/4613 [21:49<41:52,  1.02it/s] 44%|████▍     | 2048/4613 [21:49<31:44,  1.35it/s] 44%|████▍     | 2049/4613 [21:49<31:07,  1.37it/s] 44%|████▍     | 2050/4613 [21:50<24:16,  1.76it/s] 44%|████▍     | 2051/4613 [21:50<25:45,  1.66it/s] 44%|████▍     | 2052/4613 [21:51<28:04,  1.52it/s] 45%|████▍     | 2053/4613 [21:51<21:42,  1.97it/s] 45%|████▍     | 2054/4613 [21:52<23:44,  1.80it/s] 45%|████▍     | 2055/4613 [21:52<19:30,  2.19it/s] 45%|████▍     | 2056/4613 [21:53<24:49,  1.72it/s] 45%|████▍     | 2057/4613 [21:54<26:31,  1.61it/s] 45%|████▍     | 2058/4613 [21:55<28:47,  1.48it/s] 45%|████▍     | 2059/4613 [21:55<22:05,  1.93it/s] 45%|████▍     | 2060/4613 [21:56<34:19,  1.24it/s] 45%|████▍     | 2061/4613 [21:56<26:05,  1.63it/s] 45%|████▍     | 2062/4613 [21:57<28:05,  1.51it/s] 45%|████▍     | 2063/4613 [21:57<23:00,  1.85it/s] 45%|████▍     | 2064/4613 [21:59<35:16,  1.20it/s] 45%|████▍     | 2065/4613 [22:00<33:44,  1.26it/s] 45%|████▍     | 2066/4613 [22:00<25:24,  1.67it/s] 45%|████▍     | 2067/4613 [22:00<26:54,  1.58it/s] 45%|████▍     | 2068/4613 [22:01<21:05,  2.01it/s] 45%|████▍     | 2069/4613 [22:01<23:58,  1.77it/s] 45%|████▍     | 2070/4613 [22:02<20:04,  2.11it/s] 45%|████▍     | 2071/4613 [22:02<23:22,  1.81it/s] 45%|████▍     | 2072/4613 [22:03<18:59,  2.23it/s] 45%|████▍     | 2073/4613 [22:03<21:30,  1.97it/s] 45%|████▍     | 2074/4613 [22:04<24:42,  1.71it/s] 45%|████▍     | 2075/4613 [22:05<28:22,  1.49it/s] 45%|████▌     | 2076/4613 [22:05<23:52,  1.77it/s] 45%|████▌     | 2077/4613 [22:06<25:44,  1.64it/s] 45%|████▌     | 2078/4613 [22:07<28:03,  1.51it/s] 45%|████▌     | 2079/4613 [22:07<29:34,  1.43it/s] 45%|████▌     | 2080/4613 [22:08<31:28,  1.34it/s] 45%|████▌     | 2081/4613 [22:08<24:38,  1.71it/s] 45%|████▌     | 2082/4613 [22:09<25:29,  1.65it/s] 45%|████▌     | 2083/4613 [22:10<27:37,  1.53it/s] 45%|████▌     | 2084/4613 [22:11<30:57,  1.36it/s] 45%|████▌     | 2085/4613 [22:12<31:38,  1.33it/s] 45%|████▌     | 2086/4613 [22:12<25:14,  1.67it/s] 45%|████▌     | 2087/4613 [22:13<27:00,  1.56it/s] 45%|████▌     | 2088/4613 [22:13<28:38,  1.47it/s] 45%|████▌     | 2089/4613 [22:14<21:59,  1.91it/s] 45%|████▌     | 2090/4613 [22:14<24:35,  1.71it/s] 45%|████▌     | 2091/4613 [22:15<27:37,  1.52it/s] 45%|████▌     | 2092/4613 [22:16<29:53,  1.41it/s] 45%|████▌     | 2093/4613 [22:17<31:36,  1.33it/s] 45%|████▌     | 2094/4613 [22:18<33:06,  1.27it/s] 45%|████▌     | 2095/4613 [22:18<33:09,  1.27it/s] 45%|████▌     | 2096/4613 [22:19<25:32,  1.64it/s] 45%|████▌     | 2097/4613 [22:19<28:01,  1.50it/s] 45%|████▌     | 2098/4613 [22:20<29:25,  1.42it/s] 46%|████▌     | 2099/4613 [22:21<32:10,  1.30it/s] 46%|████▌     | 2100/4613 [22:22<30:58,  1.35it/s] 46%|████▌     | 2101/4613 [22:23<32:44,  1.28it/s] 46%|████▌     | 2102/4613 [22:23<25:06,  1.67it/s] 46%|████▌     | 2103/4613 [22:24<27:24,  1.53it/s] 46%|████▌     | 2104/4613 [22:24<27:44,  1.51it/s] 46%|████▌     | 2105/4613 [22:25<33:47,  1.24it/s] 46%|████▌     | 2106/4613 [22:26<32:23,  1.29it/s] 46%|████▌     | 2107/4613 [22:27<31:53,  1.31it/s] 46%|████▌     | 2108/4613 [22:27<24:13,  1.72it/s] 46%|████▌     | 2109/4613 [22:28<27:16,  1.53it/s] 46%|████▌     | 2110/4613 [22:28<21:30,  1.94it/s] 46%|████▌     | 2111/4613 [22:29<23:20,  1.79it/s] 46%|████▌     | 2112/4613 [22:30<27:10,  1.53it/s] 46%|████▌     | 2113/4613 [22:30<20:57,  1.99it/s] 46%|████▌     | 2114/4613 [22:30<23:46,  1.75it/s] 46%|████▌     | 2115/4613 [22:31<26:38,  1.56it/s] 46%|████▌     | 2116/4613 [22:31<20:26,  2.04it/s] 46%|████▌     | 2117/4613 [22:32<23:21,  1.78it/s] 46%|████▌     | 2118/4613 [22:33<20:41,  2.01it/s] 46%|████▌     | 2119/4613 [22:33<23:29,  1.77it/s] 46%|████▌     | 2120/4613 [22:34<26:57,  1.54it/s] 46%|████▌     | 2121/4613 [22:35<27:18,  1.52it/s] 46%|████▌     | 2122/4613 [22:35<21:21,  1.94it/s] 46%|████▌     | 2123/4613 [22:36<25:11,  1.65it/s] 46%|████▌     | 2124/4613 [22:37<27:30,  1.51it/s] 46%|████▌     | 2125/4613 [22:38<32:28,  1.28it/s] 46%|████▌     | 2126/4613 [22:38<31:40,  1.31it/s] 46%|████▌     | 2127/4613 [22:39<33:20,  1.24it/s] 46%|████▌     | 2128/4613 [22:39<26:02,  1.59it/s] 46%|████▌     | 2129/4613 [22:40<27:41,  1.49it/s] 46%|████▌     | 2130/4613 [22:41<29:30,  1.40it/s] 46%|████▌     | 2131/4613 [22:42<32:00,  1.29it/s] 46%|████▌     | 2132/4613 [22:43<31:28,  1.31it/s] 46%|████▌     | 2133/4613 [22:43<31:07,  1.33it/s] 46%|████▋     | 2134/4613 [22:44<24:11,  1.71it/s] 46%|████▋     | 2135/4613 [22:46<44:49,  1.09s/it] 46%|████▋     | 2136/4613 [22:46<33:36,  1.23it/s] 46%|████▋     | 2137/4613 [22:47<32:14,  1.28it/s] 46%|████▋     | 2138/4613 [22:48<41:14,  1.00it/s] 46%|████▋     | 2139/4613 [22:49<32:46,  1.26it/s] 46%|████▋     | 2140/4613 [22:49<31:55,  1.29it/s] 46%|████▋     | 2141/4613 [22:50<31:48,  1.30it/s] 46%|████▋     | 2142/4613 [22:50<25:14,  1.63it/s] 46%|████▋     | 2143/4613 [22:51<25:49,  1.59it/s] 46%|████▋     | 2144/4613 [22:51<20:50,  1.97it/s] 46%|████▋     | 2145/4613 [22:52<22:52,  1.80it/s] 47%|████▋     | 2146/4613 [22:52<18:35,  2.21it/s] 47%|████▋     | 2147/4613 [22:53<22:09,  1.86it/s] 47%|████▋     | 2148/4613 [22:54<24:22,  1.69it/s] 47%|████▋     | 2149/4613 [22:54<18:49,  2.18it/s] 47%|████▋     | 2150/4613 [22:54<21:56,  1.87it/s] 47%|████▋     | 2151/4613 [22:55<18:17,  2.24it/s] 47%|████▋     | 2152/4613 [22:55<21:06,  1.94it/s] 47%|████▋     | 2153/4613 [22:56<24:27,  1.68it/s] 47%|████▋     | 2154/4613 [22:56<19:52,  2.06it/s] 47%|████▋     | 2155/4613 [22:58<32:33,  1.26it/s] 47%|████▋     | 2156/4613 [22:59<32:44,  1.25it/s] 47%|████▋     | 2157/4613 [22:59<32:13,  1.27it/s] 47%|████▋     | 2158/4613 [23:00<24:53,  1.64it/s] 47%|████▋     | 2159/4613 [23:00<25:38,  1.60it/s] 47%|████▋     | 2160/4613 [23:00<20:27,  2.00it/s] 47%|████▋     | 2161/4613 [23:01<23:02,  1.77it/s] 47%|████▋     | 2162/4613 [23:01<18:51,  2.17it/s] 47%|████▋     | 2163/4613 [23:02<22:11,  1.84it/s] 47%|████▋     | 2164/4613 [23:03<24:17,  1.68it/s] 47%|████▋     | 2165/4613 [23:03<20:43,  1.97it/s] 47%|████▋     | 2166/4613 [23:04<23:28,  1.74it/s] 47%|████▋     | 2167/4613 [23:05<26:41,  1.53it/s] 47%|████▋     | 2168/4613 [23:05<26:57,  1.51it/s] 47%|████▋     | 2169/4613 [23:06<22:14,  1.83it/s] 47%|████▋     | 2170/4613 [23:06<23:47,  1.71it/s] 47%|████▋     | 2171/4613 [23:07<18:28,  2.20it/s] 47%|████▋     | 2172/4613 [23:08<34:17,  1.19it/s] 47%|████▋     | 2173/4613 [23:09<33:52,  1.20it/s] 47%|████▋     | 2174/4613 [23:11<43:43,  1.08s/it] 47%|████▋     | 2175/4613 [23:11<39:21,  1.03it/s] 47%|████▋     | 2176/4613 [23:12<29:12,  1.39it/s] 47%|████▋     | 2177/4613 [23:12<29:04,  1.40it/s] 47%|████▋     | 2178/4613 [23:13<23:57,  1.69it/s] 47%|████▋     | 2179/4613 [23:13<25:14,  1.61it/s] 47%|████▋     | 2180/4613 [23:14<28:06,  1.44it/s] 47%|████▋     | 2181/4613 [23:15<29:09,  1.39it/s] 47%|████▋     | 2182/4613 [23:16<28:57,  1.40it/s] 47%|████▋     | 2183/4613 [23:16<22:48,  1.78it/s] 47%|████▋     | 2184/4613 [23:16<24:05,  1.68it/s] 47%|████▋     | 2185/4613 [23:17<18:47,  2.15it/s] 47%|████▋     | 2186/4613 [23:17<23:17,  1.74it/s] 47%|████▋     | 2187/4613 [23:18<25:02,  1.61it/s] 47%|████▋     | 2188/4613 [23:18<19:22,  2.09it/s] 47%|████▋     | 2189/4613 [23:19<22:49,  1.77it/s] 47%|████▋     | 2190/4613 [23:21<37:07,  1.09it/s] 47%|████▋     | 2191/4613 [23:21<28:22,  1.42it/s] 48%|████▊     | 2192/4613 [23:22<27:58,  1.44it/s] 48%|████▊     | 2193/4613 [23:22<21:34,  1.87it/s] 48%|████▊     | 2194/4613 [23:23<24:31,  1.64it/s] 48%|████▊     | 2195/4613 [23:23<26:11,  1.54it/s] 48%|████▊     | 2196/4613 [23:24<21:07,  1.91it/s] 48%|████▊     | 2197/4613 [23:24<23:58,  1.68it/s] 48%|████▊     | 2198/4613 [23:25<19:00,  2.12it/s] 48%|████▊     | 2199/4613 [23:25<21:32,  1.87it/s] 48%|████▊     | 2200/4613 [23:26<24:26,  1.65it/s] 48%|████▊     | 2201/4613 [23:28<37:10,  1.08it/s] 48%|████▊     | 2202/4613 [23:28<27:35,  1.46it/s] 48%|████▊     | 2203/4613 [23:29<27:58,  1.44it/s] 48%|████▊     | 2204/4613 [23:29<21:16,  1.89it/s] 48%|████▊     | 2205/4613 [23:29<23:15,  1.73it/s] 48%|████▊     | 2206/4613 [23:30<18:01,  2.23it/s] 48%|████▊     | 2207/4613 [23:30<15:33,  2.58it/s] 48%|████▊     | 2208/4613 [23:30<18:13,  2.20it/s] 48%|████▊     | 2209/4613 [23:31<15:07,  2.65it/s] 48%|████▊     | 2210/4613 [23:31<20:58,  1.91it/s] 48%|████▊     | 2211/4613 [23:32<26:24,  1.52it/s] 48%|████▊     | 2212/4613 [23:33<26:13,  1.53it/s] 48%|████▊     | 2213/4613 [23:33<20:16,  1.97it/s] 48%|████▊     | 2214/4613 [23:34<22:48,  1.75it/s] 48%|████▊     | 2215/4613 [23:34<18:26,  2.17it/s] 48%|████▊     | 2216/4613 [23:35<22:23,  1.78it/s] 48%|████▊     | 2217/4613 [23:36<26:51,  1.49it/s] 48%|████▊     | 2218/4613 [23:37<27:40,  1.44it/s] 48%|████▊     | 2219/4613 [23:38<29:38,  1.35it/s] 48%|████▊     | 2220/4613 [23:38<28:55,  1.38it/s] 48%|████▊     | 2221/4613 [23:38<22:15,  1.79it/s] 48%|████▊     | 2222/4613 [23:39<23:55,  1.67it/s] 48%|████▊     | 2223/4613 [23:40<26:23,  1.51it/s] 48%|████▊     | 2224/4613 [23:40<20:35,  1.93it/s] 48%|████▊     | 2225/4613 [23:41<23:06,  1.72it/s] 48%|████▊     | 2226/4613 [23:41<17:59,  2.21it/s] 48%|████▊     | 2227/4613 [23:42<22:57,  1.73it/s] 48%|████▊     | 2228/4613 [23:44<36:20,  1.09it/s] 48%|████▊     | 2229/4613 [23:44<34:55,  1.14it/s] 48%|████▊     | 2230/4613 [23:45<37:58,  1.05it/s] 48%|████▊     | 2231/4613 [23:46<36:55,  1.07it/s] 48%|████▊     | 2232/4613 [23:47<36:11,  1.10it/s] 48%|████▊     | 2233/4613 [23:48<33:14,  1.19it/s] 48%|████▊     | 2234/4613 [23:48<25:40,  1.54it/s] 48%|████▊     | 2235/4613 [23:49<26:21,  1.50it/s] 48%|████▊     | 2236/4613 [23:50<28:39,  1.38it/s] 48%|████▊     | 2237/4613 [23:50<28:23,  1.39it/s] 49%|████▊     | 2238/4613 [23:57<1:38:33,  2.49s/it] 49%|████▊     | 2239/4613 [23:57<1:10:55,  1.79s/it] 49%|████▊     | 2240/4613 [23:57<51:57,  1.31s/it]   49%|████▊     | 2241/4613 [23:58<44:04,  1.11s/it] 49%|████▊     | 2242/4613 [23:59<40:45,  1.03s/it] 49%|████▊     | 2243/4613 [23:59<30:42,  1.29it/s] 49%|████▊     | 2244/4613 [24:00<29:07,  1.36it/s] 49%|████▊     | 2245/4613 [24:00<25:11,  1.57it/s] 49%|████▊     | 2246/4613 [24:01<25:23,  1.55it/s] 49%|████▊     | 2247/4613 [24:01<26:29,  1.49it/s] 49%|████▊     | 2248/4613 [24:02<27:57,  1.41it/s] 49%|████▉     | 2249/4613 [24:02<22:54,  1.72it/s] 49%|████▉     | 2250/4613 [24:03<25:17,  1.56it/s] 49%|████▉     | 2251/4613 [24:04<25:32,  1.54it/s] 49%|████▉     | 2252/4613 [24:04<20:17,  1.94it/s] 49%|████▉     | 2253/4613 [24:05<23:07,  1.70it/s] 49%|████▉     | 2254/4613 [24:06<26:11,  1.50it/s] 49%|████▉     | 2255/4613 [24:07<27:19,  1.44it/s] 49%|████▉     | 2256/4613 [24:07<27:03,  1.45it/s] 49%|████▉     | 2257/4613 [24:07<22:05,  1.78it/s] 49%|████▉     | 2258/4613 [24:09<32:59,  1.19it/s] 49%|████▉     | 2259/4613 [24:10<32:26,  1.21it/s] 49%|████▉     | 2260/4613 [24:10<24:53,  1.58it/s] 49%|████▉     | 2261/4613 [24:11<26:09,  1.50it/s] 49%|████▉     | 2262/4613 [24:11<27:04,  1.45it/s] 49%|████▉     | 2263/4613 [24:12<21:39,  1.81it/s] 49%|████▉     | 2264/4613 [24:13<32:35,  1.20it/s] 49%|████▉     | 2265/4613 [24:14<31:32,  1.24it/s] 49%|████▉     | 2266/4613 [24:14<24:27,  1.60it/s] 49%|████▉     | 2267/4613 [24:15<26:00,  1.50it/s] 49%|████▉     | 2268/4613 [24:16<26:25,  1.48it/s] 49%|████▉     | 2269/4613 [24:16<20:29,  1.91it/s] 49%|████▉     | 2270/4613 [24:16<17:06,  2.28it/s] 49%|████▉     | 2271/4613 [24:17<28:05,  1.39it/s] 49%|████▉     | 2272/4613 [24:18<21:48,  1.79it/s] 49%|████▉     | 2273/4613 [24:18<23:39,  1.65it/s] 49%|████▉     | 2274/4613 [24:19<25:57,  1.50it/s] 49%|████▉     | 2275/4613 [24:19<20:55,  1.86it/s] 49%|████▉     | 2276/4613 [24:21<31:18,  1.24it/s] 49%|████▉     | 2277/4613 [24:22<31:42,  1.23it/s] 49%|████▉     | 2278/4613 [24:22<23:58,  1.62it/s] 49%|████▉     | 2279/4613 [24:22<24:51,  1.56it/s] 49%|████▉     | 2280/4613 [24:23<18:59,  2.05it/s] 49%|████▉     | 2281/4613 [24:23<22:16,  1.74it/s] 49%|████▉     | 2282/4613 [24:24<26:20,  1.47it/s] 49%|████▉     | 2283/4613 [24:25<29:03,  1.34it/s] 50%|████▉     | 2284/4613 [24:26<28:21,  1.37it/s] 50%|████▉     | 2285/4613 [24:26<23:50,  1.63it/s] 50%|████▉     | 2286/4613 [24:27<23:48,  1.63it/s] 50%|████▉     | 2287/4613 [24:28<26:19,  1.47it/s] 50%|████▉     | 2288/4613 [24:28<27:43,  1.40it/s] 50%|████▉     | 2289/4613 [24:29<22:30,  1.72it/s] 50%|████▉     | 2290/4613 [24:29<25:22,  1.53it/s] 50%|████▉     | 2291/4613 [24:30<26:18,  1.47it/s] 50%|████▉     | 2292/4613 [24:31<26:36,  1.45it/s] 50%|████▉     | 2293/4613 [24:32<28:16,  1.37it/s] 50%|████▉     | 2294/4613 [24:33<30:23,  1.27it/s] 50%|████▉     | 2295/4613 [24:33<23:33,  1.64it/s] 50%|████▉     | 2296/4613 [24:34<32:37,  1.18it/s] 50%|████▉     | 2297/4613 [24:34<24:52,  1.55it/s] 50%|████▉     | 2298/4613 [24:35<25:26,  1.52it/s] 50%|████▉     | 2299/4613 [24:35<19:21,  1.99it/s] 50%|████▉     | 2300/4613 [24:36<16:25,  2.35it/s] 50%|████▉     | 2301/4613 [24:37<27:58,  1.38it/s] 50%|████▉     | 2302/4613 [24:38<28:33,  1.35it/s] 50%|████▉     | 2303/4613 [24:38<21:40,  1.78it/s] 50%|████▉     | 2304/4613 [24:38<17:39,  2.18it/s] 50%|████▉     | 2305/4613 [24:39<28:05,  1.37it/s] 50%|████▉     | 2306/4613 [24:40<22:31,  1.71it/s] 50%|█████     | 2307/4613 [24:40<23:52,  1.61it/s] 50%|█████     | 2308/4613 [24:41<18:54,  2.03it/s] 50%|█████     | 2309/4613 [24:41<21:37,  1.78it/s] 50%|█████     | 2310/4613 [24:42<24:56,  1.54it/s] 50%|█████     | 2311/4613 [24:43<25:13,  1.52it/s] 50%|█████     | 2312/4613 [24:43<20:10,  1.90it/s] 50%|█████     | 2313/4613 [24:44<22:30,  1.70it/s] 50%|█████     | 2314/4613 [24:44<17:52,  2.14it/s] 50%|█████     | 2315/4613 [24:45<20:31,  1.87it/s] 50%|█████     | 2316/4613 [24:46<24:36,  1.56it/s] 50%|█████     | 2317/4613 [24:46<25:29,  1.50it/s] 50%|█████     | 2318/4613 [24:47<20:24,  1.87it/s] 50%|█████     | 2319/4613 [24:47<22:14,  1.72it/s] 50%|█████     | 2320/4613 [24:48<23:49,  1.60it/s] 50%|█████     | 2321/4613 [24:49<26:41,  1.43it/s] 50%|█████     | 2322/4613 [24:49<20:12,  1.89it/s] 50%|█████     | 2323/4613 [24:50<22:38,  1.69it/s] 50%|█████     | 2324/4613 [24:50<17:50,  2.14it/s] 50%|█████     | 2325/4613 [24:51<20:58,  1.82it/s] 50%|█████     | 2326/4613 [24:51<23:40,  1.61it/s] 50%|█████     | 2327/4613 [24:52<19:46,  1.93it/s] 50%|█████     | 2328/4613 [24:52<22:20,  1.70it/s] 50%|█████     | 2329/4613 [24:53<25:13,  1.51it/s] 51%|█████     | 2330/4613 [24:54<25:51,  1.47it/s] 51%|█████     | 2331/4613 [24:54<19:55,  1.91it/s] 51%|█████     | 2332/4613 [24:55<23:14,  1.64it/s] 51%|█████     | 2333/4613 [24:56<25:09,  1.51it/s] 51%|█████     | 2334/4613 [24:56<21:03,  1.80it/s] 51%|█████     | 2335/4613 [24:57<22:33,  1.68it/s] 51%|█████     | 2336/4613 [24:57<18:04,  2.10it/s] 51%|█████     | 2337/4613 [24:58<21:28,  1.77it/s] 51%|█████     | 2338/4613 [24:58<22:43,  1.67it/s] 51%|█████     | 2339/4613 [24:59<17:55,  2.12it/s] 51%|█████     | 2340/4613 [24:59<20:29,  1.85it/s] 51%|█████     | 2341/4613 [25:00<23:25,  1.62it/s] 51%|█████     | 2342/4613 [25:00<19:30,  1.94it/s] 51%|█████     | 2343/4613 [25:01<23:25,  1.61it/s] 51%|█████     | 2344/4613 [25:02<24:01,  1.57it/s] 51%|█████     | 2345/4613 [25:02<18:28,  2.05it/s] 51%|█████     | 2346/4613 [25:03<21:32,  1.75it/s] 51%|█████     | 2347/4613 [25:03<23:13,  1.63it/s] 51%|█████     | 2348/4613 [25:04<19:40,  1.92it/s] 51%|█████     | 2349/4613 [25:04<21:16,  1.77it/s] 51%|█████     | 2350/4613 [25:05<16:39,  2.26it/s] 51%|█████     | 2351/4613 [25:05<19:24,  1.94it/s] 51%|█████     | 2352/4613 [25:06<16:05,  2.34it/s] 51%|█████     | 2353/4613 [25:06<19:05,  1.97it/s] 51%|█████     | 2354/4613 [25:07<22:14,  1.69it/s] 51%|█████     | 2355/4613 [25:08<25:10,  1.50it/s] 51%|█████     | 2356/4613 [25:09<27:33,  1.37it/s] 51%|█████     | 2357/4613 [25:09<26:53,  1.40it/s] 51%|█████     | 2358/4613 [25:10<20:46,  1.81it/s] 51%|█████     | 2359/4613 [25:12<41:34,  1.11s/it] 51%|█████     | 2360/4613 [25:13<37:45,  1.01s/it] 51%|█████     | 2361/4613 [25:13<28:50,  1.30it/s] 51%|█████     | 2362/4613 [25:14<28:13,  1.33it/s] 51%|█████     | 2363/4613 [25:14<23:06,  1.62it/s] 51%|█████     | 2364/4613 [25:15<25:23,  1.48it/s] 51%|█████▏    | 2365/4613 [25:15<24:59,  1.50it/s] 51%|█████▏    | 2366/4613 [25:16<26:33,  1.41it/s] 51%|█████▏    | 2367/4613 [25:16<21:17,  1.76it/s] 51%|█████▏    | 2368/4613 [25:17<22:54,  1.63it/s] 51%|█████▏    | 2369/4613 [25:18<24:07,  1.55it/s] 51%|█████▏    | 2370/4613 [25:18<19:21,  1.93it/s] 51%|█████▏    | 2371/4613 [25:19<21:00,  1.78it/s] 51%|█████▏    | 2372/4613 [25:19<18:18,  2.04it/s] 51%|█████▏    | 2373/4613 [25:20<20:16,  1.84it/s] 51%|█████▏    | 2374/4613 [25:21<23:39,  1.58it/s] 51%|█████▏    | 2375/4613 [25:21<24:36,  1.52it/s] 52%|█████▏    | 2376/4613 [25:22<19:50,  1.88it/s] 52%|█████▏    | 2377/4613 [25:23<31:23,  1.19it/s] 52%|█████▏    | 2378/4613 [25:24<30:04,  1.24it/s] 52%|█████▏    | 2379/4613 [25:24<24:11,  1.54it/s] 52%|█████▏    | 2380/4613 [25:25<24:14,  1.54it/s] 52%|█████▏    | 2381/4613 [25:25<18:57,  1.96it/s] 52%|█████▏    | 2382/4613 [25:26<21:29,  1.73it/s] 52%|█████▏    | 2383/4613 [25:27<24:07,  1.54it/s] 52%|█████▏    | 2384/4613 [25:27<19:08,  1.94it/s] 52%|█████▏    | 2385/4613 [25:27<21:24,  1.73it/s] 52%|█████▏    | 2386/4613 [25:28<23:23,  1.59it/s] 52%|█████▏    | 2387/4613 [25:28<17:53,  2.07it/s] 52%|█████▏    | 2388/4613 [25:29<22:02,  1.68it/s] 52%|█████▏    | 2389/4613 [25:29<17:50,  2.08it/s] 52%|█████▏    | 2390/4613 [25:30<19:29,  1.90it/s] 52%|█████▏    | 2391/4613 [25:31<22:29,  1.65it/s] 52%|█████▏    | 2392/4613 [25:31<18:30,  2.00it/s] 52%|█████▏    | 2393/4613 [25:32<20:26,  1.81it/s] 52%|█████▏    | 2394/4613 [25:33<22:56,  1.61it/s] 52%|█████▏    | 2395/4613 [25:33<24:23,  1.52it/s] 52%|█████▏    | 2396/4613 [25:33<18:45,  1.97it/s] 52%|█████▏    | 2397/4613 [25:34<22:12,  1.66it/s] 52%|█████▏    | 2398/4613 [25:34<17:32,  2.11it/s] 52%|█████▏    | 2399/4613 [25:35<20:14,  1.82it/s] 52%|█████▏    | 2400/4613 [25:36<22:11,  1.66it/s] 52%|█████▏    | 2401/4613 [25:36<17:52,  2.06it/s] 52%|█████▏    | 2402/4613 [25:37<20:49,  1.77it/s] 52%|█████▏    | 2403/4613 [25:38<23:21,  1.58it/s] 52%|█████▏    | 2404/4613 [25:39<25:21,  1.45it/s] 52%|█████▏    | 2405/4613 [25:39<26:58,  1.36it/s] 52%|█████▏    | 2406/4613 [25:40<27:51,  1.32it/s] 52%|█████▏    | 2407/4613 [25:41<31:51,  1.15it/s] 52%|█████▏    | 2408/4613 [25:42<29:57,  1.23it/s] 52%|█████▏    | 2409/4613 [25:43<29:18,  1.25it/s] 52%|█████▏    | 2410/4613 [25:44<30:19,  1.21it/s] 52%|█████▏    | 2411/4613 [25:44<23:25,  1.57it/s] 52%|█████▏    | 2412/4613 [25:45<23:48,  1.54it/s] 52%|█████▏    | 2413/4613 [25:45<18:51,  1.94it/s] 52%|█████▏    | 2414/4613 [25:45<20:28,  1.79it/s] 52%|█████▏    | 2415/4613 [25:46<16:21,  2.24it/s] 52%|█████▏    | 2416/4613 [25:46<18:22,  1.99it/s] 52%|█████▏    | 2417/4613 [25:47<23:02,  1.59it/s] 52%|█████▏    | 2418/4613 [25:48<24:04,  1.52it/s] 52%|█████▏    | 2419/4613 [25:48<18:19,  1.99it/s] 52%|█████▏    | 2420/4613 [25:48<15:22,  2.38it/s] 52%|█████▏    | 2421/4613 [25:49<19:18,  1.89it/s] 53%|█████▎    | 2422/4613 [25:50<21:06,  1.73it/s] 53%|█████▎    | 2423/4613 [25:51<23:47,  1.53it/s] 53%|█████▎    | 2424/4613 [25:51<25:47,  1.41it/s] 53%|█████▎    | 2425/4613 [25:52<27:03,  1.35it/s] 53%|█████▎    | 2426/4613 [25:52<20:33,  1.77it/s] 53%|█████▎    | 2427/4613 [25:53<22:18,  1.63it/s] 53%|█████▎    | 2428/4613 [25:53<17:37,  2.07it/s] 53%|█████▎    | 2429/4613 [25:55<27:58,  1.30it/s] 53%|█████▎    | 2430/4613 [25:55<28:38,  1.27it/s] 53%|█████▎    | 2431/4613 [25:56<22:28,  1.62it/s] 53%|█████▎    | 2432/4613 [25:56<23:14,  1.56it/s] 53%|█████▎    | 2433/4613 [25:57<18:27,  1.97it/s] 53%|█████▎    | 2434/4613 [25:57<21:34,  1.68it/s] 53%|█████▎    | 2435/4613 [25:58<25:08,  1.44it/s] 53%|█████▎    | 2436/4613 [26:00<33:04,  1.10it/s] 53%|█████▎    | 2437/4613 [26:00<25:13,  1.44it/s] 53%|█████▎    | 2438/4613 [26:01<25:34,  1.42it/s] 53%|█████▎    | 2439/4613 [26:01<26:06,  1.39it/s] 53%|█████▎    | 2440/4613 [26:02<19:58,  1.81it/s] 53%|█████▎    | 2441/4613 [26:02<21:51,  1.66it/s] 53%|█████▎    | 2442/4613 [26:03<18:14,  1.98it/s] 53%|█████▎    | 2443/4613 [26:03<19:56,  1.81it/s] 53%|█████▎    | 2444/4613 [26:03<15:40,  2.31it/s] 53%|█████▎    | 2445/4613 [26:04<18:12,  1.99it/s] 53%|█████▎    | 2446/4613 [26:04<14:31,  2.49it/s] 53%|█████▎    | 2447/4613 [26:05<17:38,  2.05it/s] 53%|█████▎    | 2448/4613 [26:05<13:57,  2.59it/s] 53%|█████▎    | 2449/4613 [26:05<11:52,  3.04it/s] 53%|█████▎    | 2450/4613 [26:06<17:43,  2.03it/s] 53%|█████▎    | 2451/4613 [26:07<19:24,  1.86it/s] 53%|█████▎    | 2452/4613 [26:07<16:13,  2.22it/s] 53%|█████▎    | 2453/4613 [26:08<18:47,  1.92it/s] 53%|█████▎    | 2454/4613 [26:08<21:21,  1.68it/s] 53%|█████▎    | 2455/4613 [26:09<22:51,  1.57it/s] 53%|█████▎    | 2456/4613 [26:10<27:22,  1.31it/s] 53%|█████▎    | 2457/4613 [26:11<27:43,  1.30it/s] 53%|█████▎    | 2458/4613 [26:11<21:37,  1.66it/s] 53%|█████▎    | 2459/4613 [26:13<29:58,  1.20it/s] 53%|█████▎    | 2460/4613 [26:13<22:55,  1.57it/s] 53%|█████▎    | 2461/4613 [26:14<23:34,  1.52it/s] 53%|█████▎    | 2462/4613 [26:14<18:25,  1.95it/s] 53%|█████▎    | 2463/4613 [26:14<20:13,  1.77it/s] 53%|█████▎    | 2464/4613 [26:15<22:58,  1.56it/s] 53%|█████▎    | 2465/4613 [26:16<26:19,  1.36it/s] 53%|█████▎    | 2466/4613 [26:17<27:11,  1.32it/s] 53%|█████▎    | 2467/4613 [26:18<26:51,  1.33it/s] 54%|█████▎    | 2468/4613 [26:18<20:32,  1.74it/s] 54%|█████▎    | 2469/4613 [26:19<21:43,  1.64it/s] 54%|█████▎    | 2470/4613 [26:19<17:23,  2.05it/s] 54%|█████▎    | 2471/4613 [26:20<20:08,  1.77it/s] 54%|█████▎    | 2472/4613 [26:20<16:43,  2.13it/s] 54%|█████▎    | 2473/4613 [26:21<25:57,  1.37it/s] 54%|█████▎    | 2474/4613 [26:21<19:43,  1.81it/s] 54%|█████▎    | 2475/4613 [26:22<22:03,  1.62it/s] 54%|█████▎    | 2476/4613 [26:22<17:06,  2.08it/s] 54%|█████▎    | 2477/4613 [26:23<21:40,  1.64it/s] 54%|█████▎    | 2478/4613 [26:24<22:39,  1.57it/s] 54%|█████▎    | 2479/4613 [26:24<17:54,  1.99it/s] 54%|█████▍    | 2480/4613 [26:25<19:13,  1.85it/s] 54%|█████▍    | 2481/4613 [26:25<22:15,  1.60it/s] 54%|█████▍    | 2482/4613 [26:26<17:06,  2.08it/s] 54%|█████▍    | 2483/4613 [26:26<19:23,  1.83it/s] 54%|█████▍    | 2484/4613 [26:26<15:26,  2.30it/s] 54%|█████▍    | 2485/4613 [26:27<19:00,  1.87it/s] 54%|█████▍    | 2486/4613 [26:28<21:59,  1.61it/s] 54%|█████▍    | 2487/4613 [26:28<18:23,  1.93it/s] 54%|█████▍    | 2488/4613 [26:29<19:43,  1.80it/s] 54%|█████▍    | 2489/4613 [26:29<15:53,  2.23it/s] 54%|█████▍    | 2490/4613 [26:31<25:56,  1.36it/s] 54%|█████▍    | 2491/4613 [26:31<19:47,  1.79it/s] 54%|█████▍    | 2492/4613 [26:31<21:12,  1.67it/s] 54%|█████▍    | 2493/4613 [26:32<22:58,  1.54it/s] 54%|█████▍    | 2494/4613 [26:32<19:09,  1.84it/s] 54%|█████▍    | 2495/4613 [26:34<30:54,  1.14it/s] 54%|█████▍    | 2496/4613 [26:35<30:46,  1.15it/s] 54%|█████▍    | 2497/4613 [26:36<29:29,  1.20it/s] 54%|█████▍    | 2498/4613 [26:37<29:12,  1.21it/s] 54%|█████▍    | 2499/4613 [26:37<27:37,  1.28it/s] 54%|█████▍    | 2500/4613 [26:38<29:01,  1.21it/s] 54%|█████▍    | 2501/4613 [26:39<28:32,  1.23it/s] 54%|█████▍    | 2502/4613 [26:39<22:58,  1.53it/s] 54%|█████▍    | 2503/4613 [26:40<23:19,  1.51it/s] 54%|█████▍    | 2504/4613 [26:40<17:50,  1.97it/s] 54%|█████▍    | 2505/4613 [26:41<20:14,  1.74it/s] 54%|█████▍    | 2506/4613 [26:42<22:01,  1.59it/s] 54%|█████▍    | 2507/4613 [26:42<17:50,  1.97it/s] 54%|█████▍    | 2508/4613 [26:42<19:38,  1.79it/s] 54%|█████▍    | 2509/4613 [26:43<16:31,  2.12it/s] 54%|█████▍    | 2510/4613 [26:43<18:54,  1.85it/s] 54%|█████▍    | 2511/4613 [26:44<21:15,  1.65it/s] 54%|█████▍    | 2512/4613 [26:45<25:10,  1.39it/s] 54%|█████▍    | 2513/4613 [26:46<25:10,  1.39it/s] 54%|█████▍    | 2514/4613 [26:47<26:00,  1.35it/s] 55%|█████▍    | 2515/4613 [26:47<19:46,  1.77it/s] 55%|█████▍    | 2516/4613 [26:47<21:13,  1.65it/s] 55%|█████▍    | 2517/4613 [26:49<25:47,  1.35it/s] 55%|█████▍    | 2518/4613 [26:49<27:00,  1.29it/s] 55%|█████▍    | 2519/4613 [26:50<28:00,  1.25it/s] 55%|█████▍    | 2520/4613 [26:51<27:03,  1.29it/s] 55%|█████▍    | 2521/4613 [26:52<26:06,  1.34it/s] 55%|█████▍    | 2522/4613 [26:53<27:07,  1.28it/s] 55%|█████▍    | 2523/4613 [26:53<27:02,  1.29it/s] 55%|█████▍    | 2524/4613 [26:53<21:00,  1.66it/s] 55%|█████▍    | 2525/4613 [26:55<29:47,  1.17it/s] 55%|█████▍    | 2526/4613 [26:55<23:41,  1.47it/s] 55%|█████▍    | 2527/4613 [26:56<24:15,  1.43it/s] 55%|█████▍    | 2528/4613 [26:56<19:03,  1.82it/s] 55%|█████▍    | 2529/4613 [26:57<19:48,  1.75it/s] 55%|█████▍    | 2530/4613 [26:58<22:07,  1.57it/s] 55%|█████▍    | 2531/4613 [26:58<23:52,  1.45it/s] 55%|█████▍    | 2532/4613 [26:59<18:15,  1.90it/s] 55%|█████▍    | 2533/4613 [26:59<21:00,  1.65it/s] 55%|█████▍    | 2534/4613 [26:59<16:14,  2.13it/s] 55%|█████▍    | 2535/4613 [27:00<18:50,  1.84it/s] 55%|█████▍    | 2536/4613 [27:01<21:45,  1.59it/s] 55%|█████▍    | 2537/4613 [27:01<16:51,  2.05it/s] 55%|█████▌    | 2538/4613 [27:02<19:09,  1.81it/s] 55%|█████▌    | 2539/4613 [27:03<22:48,  1.52it/s] 55%|█████▌    | 2540/4613 [27:03<17:45,  1.95it/s] 55%|█████▌    | 2541/4613 [27:04<19:36,  1.76it/s] 55%|█████▌    | 2542/4613 [27:04<21:36,  1.60it/s] 55%|█████▌    | 2543/4613 [27:05<16:39,  2.07it/s] 55%|█████▌    | 2544/4613 [27:05<19:26,  1.77it/s] 55%|█████▌    | 2545/4613 [27:05<15:34,  2.21it/s] 55%|█████▌    | 2546/4613 [27:06<18:05,  1.90it/s] 55%|█████▌    | 2547/4613 [27:06<14:52,  2.32it/s] 55%|█████▌    | 2548/4613 [27:07<17:37,  1.95it/s] 55%|█████▌    | 2549/4613 [27:08<20:14,  1.70it/s] 55%|█████▌    | 2550/4613 [27:08<15:41,  2.19it/s] 55%|█████▌    | 2551/4613 [27:09<18:36,  1.85it/s] 55%|█████▌    | 2552/4613 [27:10<22:50,  1.50it/s] 55%|█████▌    | 2553/4613 [27:10<23:01,  1.49it/s] 55%|█████▌    | 2554/4613 [27:11<18:16,  1.88it/s] 55%|█████▌    | 2555/4613 [27:11<20:06,  1.71it/s] 55%|█████▌    | 2556/4613 [27:12<16:20,  2.10it/s] 55%|█████▌    | 2557/4613 [27:12<18:47,  1.82it/s] 55%|█████▌    | 2558/4613 [27:12<15:03,  2.27it/s] 55%|█████▌    | 2559/4613 [27:13<17:57,  1.91it/s] 55%|█████▌    | 2560/4613 [27:14<21:24,  1.60it/s] 56%|█████▌    | 2561/4613 [27:15<22:17,  1.53it/s] 56%|█████▌    | 2562/4613 [27:15<18:37,  1.84it/s] 56%|█████▌    | 2563/4613 [27:16<20:36,  1.66it/s] 56%|█████▌    | 2564/4613 [27:16<21:28,  1.59it/s] 56%|█████▌    | 2565/4613 [27:17<17:05,  2.00it/s] 56%|█████▌    | 2566/4613 [27:17<19:08,  1.78it/s] 56%|█████▌    | 2567/4613 [27:18<21:49,  1.56it/s] 56%|█████▌    | 2568/4613 [27:19<24:51,  1.37it/s] 56%|█████▌    | 2569/4613 [27:19<19:33,  1.74it/s] 56%|█████▌    | 2570/4613 [27:20<20:31,  1.66it/s] 56%|█████▌    | 2571/4613 [27:20<15:56,  2.14it/s] 56%|█████▌    | 2572/4613 [27:21<18:21,  1.85it/s] 56%|█████▌    | 2573/4613 [27:22<29:08,  1.17it/s] 56%|█████▌    | 2574/4613 [27:23<22:22,  1.52it/s] 56%|█████▌    | 2575/4613 [27:23<22:45,  1.49it/s] 56%|█████▌    | 2576/4613 [27:24<18:34,  1.83it/s] 56%|█████▌    | 2577/4613 [27:24<20:25,  1.66it/s] 56%|█████▌    | 2578/4613 [27:25<16:07,  2.10it/s] 56%|█████▌    | 2579/4613 [27:25<19:33,  1.73it/s] 56%|█████▌    | 2580/4613 [27:26<21:15,  1.59it/s] 56%|█████▌    | 2581/4613 [27:28<30:07,  1.12it/s] 56%|█████▌    | 2582/4613 [27:28<23:38,  1.43it/s] 56%|█████▌    | 2583/4613 [27:29<23:47,  1.42it/s] 56%|█████▌    | 2584/4613 [27:29<18:46,  1.80it/s] 56%|█████▌    | 2585/4613 [27:30<20:47,  1.63it/s] 56%|█████▌    | 2586/4613 [27:30<21:22,  1.58it/s] 56%|█████▌    | 2587/4613 [27:31<18:22,  1.84it/s] 56%|█████▌    | 2588/4613 [27:31<20:19,  1.66it/s] 56%|█████▌    | 2589/4613 [27:32<21:23,  1.58it/s] 56%|█████▌    | 2590/4613 [27:32<17:04,  1.97it/s] 56%|█████▌    | 2591/4613 [27:33<19:08,  1.76it/s] 56%|█████▌    | 2592/4613 [27:34<20:43,  1.62it/s] 56%|█████▌    | 2593/4613 [27:34<16:11,  2.08it/s] 56%|█████▌    | 2594/4613 [27:34<18:13,  1.85it/s] 56%|█████▋    | 2595/4613 [27:35<14:36,  2.30it/s] 56%|█████▋    | 2596/4613 [27:35<17:48,  1.89it/s] 56%|█████▋    | 2597/4613 [27:36<14:36,  2.30it/s] 56%|█████▋    | 2598/4613 [27:36<17:17,  1.94it/s] 56%|█████▋    | 2599/4613 [27:37<19:50,  1.69it/s] 56%|█████▋    | 2600/4613 [27:37<17:03,  1.97it/s] 56%|█████▋    | 2601/4613 [27:38<18:38,  1.80it/s] 56%|█████▋    | 2602/4613 [27:38<14:50,  2.26it/s] 56%|█████▋    | 2603/4613 [27:39<17:33,  1.91it/s] 56%|█████▋    | 2604/4613 [27:40<19:59,  1.67it/s] 56%|█████▋    | 2605/4613 [27:40<16:31,  2.03it/s] 56%|█████▋    | 2606/4613 [27:41<18:40,  1.79it/s] 57%|█████▋    | 2607/4613 [27:41<20:53,  1.60it/s] 57%|█████▋    | 2608/4613 [27:42<22:23,  1.49it/s] 57%|█████▋    | 2609/4613 [27:42<17:03,  1.96it/s] 57%|█████▋    | 2610/4613 [27:43<14:17,  2.34it/s] 57%|█████▋    | 2611/4613 [27:43<17:15,  1.93it/s] 57%|█████▋    | 2612/4613 [27:44<21:40,  1.54it/s] 57%|█████▋    | 2613/4613 [27:45<23:14,  1.43it/s] 57%|█████▋    | 2614/4613 [27:45<17:57,  1.86it/s] 57%|█████▋    | 2615/4613 [27:46<19:30,  1.71it/s] 57%|█████▋    | 2616/4613 [27:47<22:04,  1.51it/s] 57%|█████▋    | 2617/4613 [27:47<17:36,  1.89it/s] 57%|█████▋    | 2618/4613 [27:48<18:54,  1.76it/s] 57%|█████▋    | 2619/4613 [27:48<15:47,  2.10it/s] 57%|█████▋    | 2620/4613 [27:49<18:02,  1.84it/s] 57%|█████▋    | 2621/4613 [27:49<14:45,  2.25it/s] 57%|█████▋    | 2622/4613 [27:50<16:51,  1.97it/s] 57%|█████▋    | 2623/4613 [27:50<20:00,  1.66it/s] 57%|█████▋    | 2624/4613 [27:51<21:44,  1.53it/s] 57%|█████▋    | 2625/4613 [27:51<17:07,  1.93it/s] 57%|█████▋    | 2626/4613 [27:52<18:44,  1.77it/s] 57%|█████▋    | 2627/4613 [27:52<15:57,  2.07it/s] 57%|█████▋    | 2628/4613 [27:53<19:18,  1.71it/s] 57%|█████▋    | 2629/4613 [27:54<20:28,  1.62it/s] 57%|█████▋    | 2630/4613 [27:56<31:17,  1.06it/s] 57%|█████▋    | 2631/4613 [27:57<35:56,  1.09s/it] 57%|█████▋    | 2632/4613 [27:57<26:57,  1.22it/s] 57%|█████▋    | 2633/4613 [27:59<34:12,  1.04s/it] 57%|█████▋    | 2634/4613 [27:59<25:58,  1.27it/s] 57%|█████▋    | 2635/4613 [28:00<25:16,  1.30it/s] 57%|█████▋    | 2636/4613 [28:00<25:23,  1.30it/s] 57%|█████▋    | 2637/4613 [28:01<20:01,  1.64it/s] 57%|█████▋    | 2638/4613 [28:01<22:36,  1.46it/s] 57%|█████▋    | 2639/4613 [28:02<22:39,  1.45it/s] 57%|█████▋    | 2640/4613 [28:02<17:47,  1.85it/s] 57%|█████▋    | 2641/4613 [28:03<20:08,  1.63it/s] 57%|█████▋    | 2642/4613 [28:04<20:58,  1.57it/s] 57%|█████▋    | 2643/4613 [28:05<24:36,  1.33it/s] 57%|█████▋    | 2644/4613 [28:06<24:31,  1.34it/s] 57%|█████▋    | 2645/4613 [28:07<26:32,  1.24it/s] 57%|█████▋    | 2646/4613 [28:07<20:28,  1.60it/s] 57%|█████▋    | 2647/4613 [28:08<22:12,  1.48it/s] 57%|█████▋    | 2648/4613 [28:08<22:03,  1.48it/s] 57%|█████▋    | 2649/4613 [28:09<23:18,  1.40it/s] 57%|█████▋    | 2650/4613 [28:09<18:06,  1.81it/s] 57%|█████▋    | 2651/4613 [28:10<20:18,  1.61it/s] 57%|█████▋    | 2652/4613 [28:11<22:26,  1.46it/s] 58%|█████▊    | 2653/4613 [28:12<23:12,  1.41it/s] 58%|█████▊    | 2654/4613 [28:12<19:50,  1.65it/s] 58%|█████▊    | 2655/4613 [28:13<20:29,  1.59it/s] 58%|█████▊    | 2656/4613 [28:13<16:33,  1.97it/s] 58%|█████▊    | 2657/4613 [28:14<18:45,  1.74it/s] 58%|█████▊    | 2658/4613 [28:14<20:27,  1.59it/s] 58%|█████▊    | 2659/4613 [28:15<16:23,  1.99it/s] 58%|█████▊    | 2660/4613 [28:16<26:06,  1.25it/s] 58%|█████▊    | 2661/4613 [28:17<25:59,  1.25it/s] 58%|█████▊    | 2662/4613 [28:17<20:09,  1.61it/s] 58%|█████▊    | 2663/4613 [28:18<21:23,  1.52it/s] 58%|█████▊    | 2664/4613 [28:19<22:08,  1.47it/s] 58%|█████▊    | 2665/4613 [28:19<17:24,  1.87it/s] 58%|█████▊    | 2666/4613 [28:19<19:26,  1.67it/s] 58%|█████▊    | 2667/4613 [28:20<22:26,  1.45it/s] 58%|█████▊    | 2668/4613 [28:21<23:36,  1.37it/s] 58%|█████▊    | 2669/4613 [28:22<23:54,  1.36it/s] 58%|█████▊    | 2670/4613 [28:22<18:25,  1.76it/s] 58%|█████▊    | 2671/4613 [28:23<20:41,  1.56it/s] 58%|█████▊    | 2672/4613 [28:24<22:53,  1.41it/s] 58%|█████▊    | 2673/4613 [28:25<23:09,  1.40it/s] 58%|█████▊    | 2674/4613 [28:25<19:11,  1.68it/s] 58%|█████▊    | 2675/4613 [28:26<19:47,  1.63it/s] 58%|█████▊    | 2676/4613 [28:26<20:40,  1.56it/s] 58%|█████▊    | 2677/4613 [28:26<17:03,  1.89it/s] 58%|█████▊    | 2678/4613 [28:28<25:40,  1.26it/s] 58%|█████▊    | 2679/4613 [28:28<20:59,  1.54it/s] 58%|█████▊    | 2680/4613 [28:29<21:14,  1.52it/s] 58%|█████▊    | 2681/4613 [28:30<23:05,  1.39it/s] 58%|█████▊    | 2682/4613 [28:30<22:54,  1.40it/s] 58%|█████▊    | 2683/4613 [28:31<25:34,  1.26it/s] 58%|█████▊    | 2684/4613 [28:32<24:47,  1.30it/s] 58%|█████▊    | 2685/4613 [28:32<19:05,  1.68it/s] 58%|█████▊    | 2686/4613 [28:33<19:52,  1.62it/s] 58%|█████▊    | 2687/4613 [28:33<15:54,  2.02it/s] 58%|█████▊    | 2688/4613 [28:34<18:11,  1.76it/s] 58%|█████▊    | 2689/4613 [28:35<19:35,  1.64it/s] 58%|█████▊    | 2690/4613 [28:35<21:37,  1.48it/s] 58%|█████▊    | 2691/4613 [28:36<16:56,  1.89it/s] 58%|█████▊    | 2692/4613 [28:36<18:40,  1.71it/s] 58%|█████▊    | 2693/4613 [28:37<15:14,  2.10it/s] 58%|█████▊    | 2694/4613 [28:37<16:52,  1.90it/s] 58%|█████▊    | 2695/4613 [28:38<14:31,  2.20it/s] 58%|█████▊    | 2696/4613 [28:38<16:11,  1.97it/s] 58%|█████▊    | 2697/4613 [28:38<13:38,  2.34it/s] 58%|█████▊    | 2698/4613 [28:39<16:20,  1.95it/s] 59%|█████▊    | 2699/4613 [28:40<18:50,  1.69it/s] 59%|█████▊    | 2700/4613 [28:41<20:37,  1.55it/s] 59%|█████▊    | 2701/4613 [28:42<24:27,  1.30it/s] 59%|█████▊    | 2702/4613 [28:43<30:28,  1.05it/s] 59%|█████▊    | 2703/4613 [28:43<24:04,  1.32it/s] 59%|█████▊    | 2704/4613 [28:45<31:03,  1.02it/s] 59%|█████▊    | 2705/4613 [28:45<23:37,  1.35it/s] 59%|█████▊    | 2706/4613 [28:46<29:02,  1.09it/s] 59%|█████▊    | 2707/4613 [28:47<23:35,  1.35it/s] 59%|█████▊    | 2708/4613 [28:47<22:36,  1.40it/s] 59%|█████▊    | 2709/4613 [28:48<17:50,  1.78it/s] 59%|█████▊    | 2710/4613 [28:48<18:12,  1.74it/s] 59%|█████▉    | 2711/4613 [28:49<19:46,  1.60it/s] 59%|█████▉    | 2712/4613 [28:50<22:06,  1.43it/s] 59%|█████▉    | 2713/4613 [28:50<17:27,  1.81it/s] 59%|█████▉    | 2714/4613 [28:51<25:54,  1.22it/s] 59%|█████▉    | 2715/4613 [28:52<27:22,  1.16it/s] 59%|█████▉    | 2716/4613 [28:53<26:15,  1.20it/s] 59%|█████▉    | 2717/4613 [28:54<26:14,  1.20it/s] 59%|█████▉    | 2718/4613 [28:55<26:16,  1.20it/s] 59%|█████▉    | 2719/4613 [28:55<20:09,  1.57it/s] 59%|█████▉    | 2720/4613 [28:56<21:11,  1.49it/s] 59%|█████▉    | 2721/4613 [28:56<16:49,  1.87it/s] 59%|█████▉    | 2722/4613 [28:57<17:30,  1.80it/s] 59%|█████▉    | 2723/4613 [28:57<14:22,  2.19it/s] 59%|█████▉    | 2724/4613 [28:57<16:18,  1.93it/s] 59%|█████▉    | 2725/4613 [28:58<18:45,  1.68it/s] 59%|█████▉    | 2726/4613 [28:58<14:37,  2.15it/s] 59%|█████▉    | 2727/4613 [28:59<17:45,  1.77it/s] 59%|█████▉    | 2728/4613 [29:00<19:35,  1.60it/s] 59%|█████▉    | 2729/4613 [29:00<15:04,  2.08it/s] 59%|█████▉    | 2730/4613 [29:01<17:18,  1.81it/s] 59%|█████▉    | 2731/4613 [29:01<14:14,  2.20it/s] 59%|█████▉    | 2732/4613 [29:03<23:45,  1.32it/s] 59%|█████▉    | 2733/4613 [29:03<20:52,  1.50it/s] 59%|█████▉    | 2734/4613 [29:04<20:18,  1.54it/s] 59%|█████▉    | 2735/4613 [29:04<20:43,  1.51it/s] 59%|█████▉    | 2736/4613 [29:05<16:55,  1.85it/s] 59%|█████▉    | 2737/4613 [29:05<18:31,  1.69it/s] 59%|█████▉    | 2738/4613 [29:06<19:53,  1.57it/s] 59%|█████▉    | 2739/4613 [29:07<21:26,  1.46it/s] 59%|█████▉    | 2740/4613 [29:08<22:57,  1.36it/s] 59%|█████▉    | 2741/4613 [29:08<17:57,  1.74it/s] 59%|█████▉    | 2742/4613 [29:09<19:39,  1.59it/s] 59%|█████▉    | 2743/4613 [29:09<20:28,  1.52it/s] 59%|█████▉    | 2744/4613 [29:10<15:50,  1.97it/s] 60%|█████▉    | 2745/4613 [29:10<18:51,  1.65it/s] 60%|█████▉    | 2746/4613 [29:11<20:04,  1.55it/s] 60%|█████▉    | 2747/4613 [29:11<15:17,  2.03it/s] 60%|█████▉    | 2748/4613 [29:12<18:41,  1.66it/s] 60%|█████▉    | 2749/4613 [29:14<28:10,  1.10it/s] 60%|█████▉    | 2750/4613 [29:15<27:21,  1.14it/s] 60%|█████▉    | 2751/4613 [29:15<20:47,  1.49it/s] 60%|█████▉    | 2752/4613 [29:15<21:15,  1.46it/s] 60%|█████▉    | 2753/4613 [29:16<16:23,  1.89it/s] 60%|█████▉    | 2754/4613 [29:16<18:53,  1.64it/s] 60%|█████▉    | 2755/4613 [29:17<19:33,  1.58it/s] 60%|█████▉    | 2756/4613 [29:17<17:01,  1.82it/s] 60%|█████▉    | 2757/4613 [29:18<17:57,  1.72it/s] 60%|█████▉    | 2758/4613 [29:18<14:33,  2.12it/s] 60%|█████▉    | 2759/4613 [29:19<16:25,  1.88it/s] 60%|█████▉    | 2760/4613 [29:20<20:49,  1.48it/s] 60%|█████▉    | 2761/4613 [29:21<20:40,  1.49it/s] 60%|█████▉    | 2762/4613 [29:21<16:09,  1.91it/s] 60%|█████▉    | 2763/4613 [29:22<19:32,  1.58it/s] 60%|█████▉    | 2764/4613 [29:23<21:19,  1.45it/s] 60%|█████▉    | 2765/4613 [29:23<22:50,  1.35it/s] 60%|█████▉    | 2766/4613 [29:24<22:30,  1.37it/s] 60%|█████▉    | 2767/4613 [29:25<22:07,  1.39it/s] 60%|██████    | 2768/4613 [29:25<16:40,  1.84it/s] 60%|██████    | 2769/4613 [29:26<19:59,  1.54it/s] 60%|██████    | 2770/4613 [29:27<20:48,  1.48it/s] 60%|██████    | 2771/4613 [29:27<16:16,  1.89it/s] 60%|██████    | 2772/4613 [29:27<17:29,  1.75it/s] 60%|██████    | 2773/4613 [29:28<19:50,  1.55it/s] 60%|██████    | 2774/4613 [29:28<15:35,  1.97it/s] 60%|██████    | 2775/4613 [29:29<17:10,  1.78it/s] 60%|██████    | 2776/4613 [29:30<18:49,  1.63it/s] 60%|██████    | 2777/4613 [29:31<21:19,  1.44it/s] 60%|██████    | 2778/4613 [29:31<17:00,  1.80it/s] 60%|██████    | 2779/4613 [29:32<18:49,  1.62it/s] 60%|██████    | 2780/4613 [29:33<20:29,  1.49it/s] 60%|██████    | 2781/4613 [29:33<16:10,  1.89it/s] 60%|██████    | 2782/4613 [29:33<17:18,  1.76it/s] 60%|██████    | 2783/4613 [29:34<20:44,  1.47it/s] 60%|██████    | 2784/4613 [29:35<21:21,  1.43it/s] 60%|██████    | 2785/4613 [29:35<17:12,  1.77it/s] 60%|██████    | 2786/4613 [29:36<18:54,  1.61it/s] 60%|██████    | 2787/4613 [29:37<20:09,  1.51it/s] 60%|██████    | 2788/4613 [29:38<20:50,  1.46it/s] 60%|██████    | 2789/4613 [29:38<15:52,  1.91it/s] 60%|██████    | 2790/4613 [29:39<18:57,  1.60it/s] 61%|██████    | 2791/4613 [29:39<20:09,  1.51it/s] 61%|██████    | 2792/4613 [29:40<21:35,  1.41it/s] 61%|██████    | 2793/4613 [29:40<17:03,  1.78it/s] 61%|██████    | 2794/4613 [29:41<17:47,  1.70it/s] 61%|██████    | 2795/4613 [29:42<21:53,  1.38it/s] 61%|██████    | 2796/4613 [29:43<21:15,  1.42it/s] 61%|██████    | 2797/4613 [29:44<23:09,  1.31it/s] 61%|██████    | 2798/4613 [29:44<22:24,  1.35it/s] 61%|██████    | 2799/4613 [29:44<17:00,  1.78it/s] 61%|██████    | 2800/4613 [29:45<18:24,  1.64it/s] 61%|██████    | 2801/4613 [29:45<14:12,  2.13it/s] 61%|██████    | 2802/4613 [29:46<12:59,  2.32it/s] 61%|██████    | 2803/4613 [29:47<20:11,  1.49it/s] 61%|██████    | 2804/4613 [29:47<15:43,  1.92it/s] 61%|██████    | 2805/4613 [29:47<12:54,  2.33it/s] 61%|██████    | 2806/4613 [29:48<16:13,  1.86it/s] 61%|██████    | 2807/4613 [29:49<18:29,  1.63it/s] 61%|██████    | 2808/4613 [29:50<19:06,  1.57it/s] 61%|██████    | 2809/4613 [29:50<15:46,  1.91it/s] 61%|██████    | 2810/4613 [29:50<16:37,  1.81it/s] 61%|██████    | 2811/4613 [29:51<19:28,  1.54it/s] 61%|██████    | 2812/4613 [29:51<15:28,  1.94it/s] 61%|██████    | 2813/4613 [29:52<17:00,  1.76it/s] 61%|██████    | 2814/4613 [29:53<20:47,  1.44it/s] 61%|██████    | 2815/4613 [29:54<22:04,  1.36it/s] 61%|██████    | 2816/4613 [29:55<21:52,  1.37it/s] 61%|██████    | 2817/4613 [29:55<21:17,  1.41it/s] 61%|██████    | 2818/4613 [29:56<22:11,  1.35it/s] 61%|██████    | 2819/4613 [29:56<17:28,  1.71it/s] 61%|██████    | 2820/4613 [29:58<25:21,  1.18it/s] 61%|██████    | 2821/4613 [29:59<24:55,  1.20it/s] 61%|██████    | 2822/4613 [30:00<32:41,  1.10s/it] 61%|██████    | 2823/4613 [30:01<25:17,  1.18it/s] 61%|██████    | 2824/4613 [30:01<24:47,  1.20it/s] 61%|██████    | 2825/4613 [30:02<24:30,  1.22it/s] 61%|██████▏   | 2826/4613 [30:03<23:31,  1.27it/s] 61%|██████▏   | 2827/4613 [30:04<23:38,  1.26it/s] 61%|██████▏   | 2828/4613 [30:05<23:46,  1.25it/s] 61%|██████▏   | 2829/4613 [30:05<18:19,  1.62it/s] 61%|██████▏   | 2830/4613 [30:05<18:56,  1.57it/s] 61%|██████▏   | 2831/4613 [30:06<15:26,  1.92it/s] 61%|██████▏   | 2832/4613 [30:06<17:05,  1.74it/s] 61%|██████▏   | 2833/4613 [30:07<18:42,  1.59it/s] 61%|██████▏   | 2834/4613 [30:07<16:04,  1.85it/s] 61%|██████▏   | 2835/4613 [30:09<23:15,  1.27it/s] 61%|██████▏   | 2836/4613 [30:09<18:35,  1.59it/s] 62%|██████▏   | 2837/4613 [30:10<18:57,  1.56it/s] 62%|██████▏   | 2838/4613 [30:10<14:44,  2.01it/s] 62%|██████▏   | 2839/4613 [30:11<18:30,  1.60it/s] 62%|██████▏   | 2840/4613 [30:12<19:06,  1.55it/s] 62%|██████▏   | 2841/4613 [30:12<14:55,  1.98it/s] 62%|██████▏   | 2842/4613 [30:12<16:33,  1.78it/s] 62%|██████▏   | 2843/4613 [30:13<13:35,  2.17it/s] 62%|██████▏   | 2844/4613 [30:13<15:50,  1.86it/s] 62%|██████▏   | 2845/4613 [30:14<17:30,  1.68it/s] 62%|██████▏   | 2846/4613 [30:14<13:50,  2.13it/s] 62%|██████▏   | 2847/4613 [30:15<16:55,  1.74it/s] 62%|██████▏   | 2848/4613 [30:17<26:15,  1.12it/s] 62%|██████▏   | 2849/4613 [30:17<20:29,  1.43it/s] 62%|██████▏   | 2850/4613 [30:18<21:04,  1.39it/s] 62%|██████▏   | 2851/4613 [30:19<22:03,  1.33it/s] 62%|██████▏   | 2852/4613 [30:19<21:39,  1.36it/s] 62%|██████▏   | 2853/4613 [30:20<21:31,  1.36it/s] 62%|██████▏   | 2854/4613 [30:20<17:08,  1.71it/s] 62%|██████▏   | 2855/4613 [30:21<18:12,  1.61it/s] 62%|██████▏   | 2856/4613 [30:21<14:29,  2.02it/s] 62%|██████▏   | 2857/4613 [30:22<16:18,  1.79it/s] 62%|██████▏   | 2858/4613 [30:23<18:17,  1.60it/s] 62%|██████▏   | 2859/4613 [30:23<20:11,  1.45it/s] 62%|██████▏   | 2860/4613 [30:24<20:13,  1.44it/s] 62%|██████▏   | 2861/4613 [30:25<20:27,  1.43it/s] 62%|██████▏   | 2862/4613 [30:25<16:24,  1.78it/s] 62%|██████▏   | 2863/4613 [30:26<17:36,  1.66it/s] 62%|██████▏   | 2864/4613 [30:27<18:34,  1.57it/s] 62%|██████▏   | 2865/4613 [30:27<20:19,  1.43it/s] 62%|██████▏   | 2866/4613 [30:28<17:07,  1.70it/s] 62%|██████▏   | 2867/4613 [30:28<18:15,  1.59it/s] 62%|██████▏   | 2868/4613 [30:29<18:36,  1.56it/s] 62%|██████▏   | 2869/4613 [30:29<14:34,  1.99it/s] 62%|██████▏   | 2870/4613 [30:30<16:39,  1.74it/s] 62%|██████▏   | 2871/4613 [30:30<13:07,  2.21it/s] 62%|██████▏   | 2872/4613 [30:31<16:05,  1.80it/s] 62%|██████▏   | 2873/4613 [30:32<17:31,  1.66it/s] 62%|██████▏   | 2874/4613 [30:32<14:29,  2.00it/s] 62%|██████▏   | 2875/4613 [30:33<16:43,  1.73it/s] 62%|██████▏   | 2876/4613 [30:34<20:03,  1.44it/s] 62%|██████▏   | 2877/4613 [30:35<25:52,  1.12it/s] 62%|██████▏   | 2878/4613 [30:36<25:57,  1.11it/s] 62%|██████▏   | 2879/4613 [30:36<21:00,  1.38it/s] 62%|██████▏   | 2880/4613 [30:37<20:41,  1.40it/s] 62%|██████▏   | 2881/4613 [30:38<21:48,  1.32it/s] 62%|██████▏   | 2882/4613 [30:39<21:40,  1.33it/s] 62%|██████▏   | 2883/4613 [30:39<22:45,  1.27it/s] 63%|██████▎   | 2884/4613 [30:40<17:31,  1.64it/s] 63%|██████▎   | 2885/4613 [30:40<18:03,  1.59it/s] 63%|██████▎   | 2886/4613 [30:41<15:01,  1.91it/s] 63%|██████▎   | 2887/4613 [30:41<16:31,  1.74it/s] 63%|██████▎   | 2888/4613 [30:42<17:37,  1.63it/s] 63%|██████▎   | 2889/4613 [30:42<13:46,  2.09it/s] 63%|██████▎   | 2890/4613 [30:43<16:05,  1.79it/s] 63%|██████▎   | 2891/4613 [30:43<12:37,  2.27it/s] 63%|██████▎   | 2892/4613 [30:44<15:28,  1.85it/s] 63%|██████▎   | 2893/4613 [30:44<12:52,  2.23it/s] 63%|██████▎   | 2894/4613 [30:45<14:31,  1.97it/s] 63%|██████▎   | 2895/4613 [30:45<11:46,  2.43it/s] 63%|██████▎   | 2896/4613 [30:46<21:05,  1.36it/s] 63%|██████▎   | 2897/4613 [30:47<22:46,  1.26it/s] 63%|██████▎   | 2898/4613 [30:48<21:27,  1.33it/s] 63%|██████▎   | 2899/4613 [30:49<22:12,  1.29it/s] 63%|██████▎   | 2900/4613 [30:50<22:19,  1.28it/s] 63%|██████▎   | 2901/4613 [30:50<17:48,  1.60it/s] 63%|██████▎   | 2902/4613 [30:51<18:30,  1.54it/s] 63%|██████▎   | 2903/4613 [30:51<15:04,  1.89it/s] 63%|██████▎   | 2904/4613 [30:51<16:12,  1.76it/s] 63%|██████▎   | 2905/4613 [30:52<18:23,  1.55it/s] 63%|██████▎   | 2906/4613 [30:53<19:03,  1.49it/s] 63%|██████▎   | 2907/4613 [30:53<14:47,  1.92it/s] 63%|██████▎   | 2908/4613 [30:54<17:56,  1.58it/s] 63%|██████▎   | 2909/4613 [30:55<18:57,  1.50it/s] 63%|██████▎   | 2910/4613 [30:56<19:31,  1.45it/s] 63%|██████▎   | 2911/4613 [30:56<15:12,  1.87it/s] 63%|██████▎   | 2912/4613 [30:56<16:21,  1.73it/s] 63%|██████▎   | 2913/4613 [30:57<12:39,  2.24it/s] 63%|██████▎   | 2914/4613 [30:57<15:15,  1.86it/s] 63%|██████▎   | 2915/4613 [30:58<17:10,  1.65it/s] 63%|██████▎   | 2916/4613 [30:58<13:14,  2.14it/s] 63%|██████▎   | 2917/4613 [30:59<16:09,  1.75it/s] 63%|██████▎   | 2918/4613 [30:59<12:55,  2.19it/s] 63%|██████▎   | 2919/4613 [31:00<14:44,  1.92it/s] 63%|██████▎   | 2920/4613 [31:00<11:55,  2.37it/s] 63%|██████▎   | 2921/4613 [31:01<14:12,  1.98it/s] 63%|██████▎   | 2922/4613 [31:01<11:25,  2.47it/s] 63%|██████▎   | 2923/4613 [31:02<13:41,  2.06it/s] 63%|██████▎   | 2924/4613 [31:02<11:56,  2.36it/s] 63%|██████▎   | 2925/4613 [31:03<13:49,  2.04it/s] 63%|██████▎   | 2926/4613 [31:03<11:06,  2.53it/s] 63%|██████▎   | 2927/4613 [31:04<19:30,  1.44it/s] 63%|██████▎   | 2928/4613 [31:04<16:27,  1.71it/s] 63%|██████▎   | 2929/4613 [31:05<18:02,  1.56it/s] 64%|██████▎   | 2930/4613 [31:06<19:23,  1.45it/s] 64%|██████▎   | 2931/4613 [31:08<26:22,  1.06it/s] 64%|██████▎   | 2932/4613 [31:08<26:02,  1.08it/s] 64%|██████▎   | 2933/4613 [31:09<24:48,  1.13it/s] 64%|██████▎   | 2934/4613 [31:10<19:36,  1.43it/s] 64%|██████▎   | 2935/4613 [31:10<20:01,  1.40it/s] 64%|██████▎   | 2936/4613 [31:11<20:16,  1.38it/s] 64%|██████▎   | 2937/4613 [31:11<16:27,  1.70it/s] 64%|██████▎   | 2938/4613 [31:12<16:38,  1.68it/s] 64%|██████▎   | 2939/4613 [31:13<19:54,  1.40it/s] 64%|██████▎   | 2940/4613 [31:14<19:19,  1.44it/s] 64%|██████▍   | 2941/4613 [31:14<14:48,  1.88it/s] 64%|██████▍   | 2942/4613 [31:15<17:35,  1.58it/s] 64%|██████▍   | 2943/4613 [31:15<18:05,  1.54it/s] 64%|██████▍   | 2944/4613 [31:15<14:26,  1.93it/s] 64%|██████▍   | 2945/4613 [31:16<15:34,  1.78it/s] 64%|██████▍   | 2946/4613 [31:17<17:31,  1.59it/s] 64%|██████▍   | 2947/4613 [31:17<13:57,  1.99it/s] 64%|██████▍   | 2948/4613 [31:18<16:19,  1.70it/s] 64%|██████▍   | 2949/4613 [31:19<17:22,  1.60it/s] 64%|██████▍   | 2950/4613 [31:19<14:02,  1.97it/s] 64%|██████▍   | 2951/4613 [31:20<15:52,  1.74it/s] 64%|██████▍   | 2952/4613 [31:20<17:39,  1.57it/s] 64%|██████▍   | 2953/4613 [31:21<20:29,  1.35it/s] 64%|██████▍   | 2954/4613 [31:23<27:25,  1.01it/s] 64%|██████▍   | 2955/4613 [31:23<20:41,  1.34it/s] 64%|██████▍   | 2956/4613 [31:25<27:50,  1.01s/it] 64%|██████▍   | 2957/4613 [31:25<25:00,  1.10it/s] 64%|██████▍   | 2958/4613 [31:26<24:24,  1.13it/s] 64%|██████▍   | 2959/4613 [31:27<23:50,  1.16it/s] 64%|██████▍   | 2960/4613 [31:27<19:27,  1.42it/s] 64%|██████▍   | 2961/4613 [31:28<18:54,  1.46it/s] 64%|██████▍   | 2962/4613 [31:30<25:37,  1.07it/s] 64%|██████▍   | 2963/4613 [31:30<19:08,  1.44it/s] 64%|██████▍   | 2964/4613 [31:30<19:20,  1.42it/s] 64%|██████▍   | 2965/4613 [31:31<15:20,  1.79it/s] 64%|██████▍   | 2966/4613 [31:32<22:07,  1.24it/s] 64%|██████▍   | 2967/4613 [31:33<23:59,  1.14it/s] 64%|██████▍   | 2968/4613 [31:34<22:45,  1.20it/s] 64%|██████▍   | 2969/4613 [31:34<17:18,  1.58it/s] 64%|██████▍   | 2970/4613 [31:35<17:56,  1.53it/s] 64%|██████▍   | 2971/4613 [31:36<20:44,  1.32it/s] 64%|██████▍   | 2972/4613 [31:36<20:26,  1.34it/s] 64%|██████▍   | 2973/4613 [31:37<20:45,  1.32it/s] 64%|██████▍   | 2974/4613 [31:38<21:44,  1.26it/s] 64%|██████▍   | 2975/4613 [31:38<16:22,  1.67it/s] 65%|██████▍   | 2976/4613 [31:39<17:43,  1.54it/s] 65%|██████▍   | 2977/4613 [31:39<13:36,  2.00it/s] 65%|██████▍   | 2978/4613 [31:40<14:56,  1.82it/s] 65%|██████▍   | 2979/4613 [31:41<17:48,  1.53it/s] 65%|██████▍   | 2980/4613 [31:41<14:42,  1.85it/s] 65%|██████▍   | 2981/4613 [31:42<16:27,  1.65it/s] 65%|██████▍   | 2982/4613 [31:42<16:53,  1.61it/s] 65%|██████▍   | 2983/4613 [31:42<12:52,  2.11it/s] 65%|██████▍   | 2984/4613 [31:43<15:38,  1.74it/s] 65%|██████▍   | 2985/4613 [31:44<17:26,  1.56it/s] 65%|██████▍   | 2986/4613 [31:44<13:39,  1.99it/s] 65%|██████▍   | 2987/4613 [31:45<14:58,  1.81it/s] 65%|██████▍   | 2988/4613 [31:45<12:14,  2.21it/s] 65%|██████▍   | 2989/4613 [31:46<14:55,  1.81it/s] 65%|██████▍   | 2990/4613 [31:47<17:41,  1.53it/s] 65%|██████▍   | 2991/4613 [31:47<17:20,  1.56it/s] 65%|██████▍   | 2992/4613 [31:48<19:03,  1.42it/s] 65%|██████▍   | 2993/4613 [31:49<19:17,  1.40it/s] 65%|██████▍   | 2994/4613 [31:49<14:38,  1.84it/s] 65%|██████▍   | 2995/4613 [31:50<16:55,  1.59it/s] 65%|██████▍   | 2996/4613 [31:51<18:11,  1.48it/s] 65%|██████▍   | 2997/4613 [31:52<20:00,  1.35it/s] 65%|██████▍   | 2998/4613 [31:52<19:49,  1.36it/s] 65%|██████▌   | 2999/4613 [31:53<15:21,  1.75it/s] 65%|██████▌   | 3000/4613 [31:53<13:35,  1.98it/s] 65%|██████▌   | 3001/4613 [31:54<19:07,  1.41it/s] 65%|██████▌   | 3002/4613 [31:57<34:48,  1.30s/it] 65%|██████▌   | 3003/4613 [31:58<30:21,  1.13s/it] 65%|██████▌   | 3004/4613 [31:58<26:57,  1.01s/it] 65%|██████▌   | 3005/4613 [31:58<19:57,  1.34it/s] 65%|██████▌   | 3006/4613 [31:59<15:40,  1.71it/s] 65%|██████▌   | 3007/4613 [31:59<16:20,  1.64it/s] 65%|██████▌   | 3008/4613 [32:00<17:56,  1.49it/s] 65%|██████▌   | 3009/4613 [32:00<14:10,  1.89it/s] 65%|██████▌   | 3010/4613 [32:01<15:23,  1.73it/s] 65%|██████▌   | 3011/4613 [32:03<23:30,  1.14it/s] 65%|██████▌   | 3012/4613 [32:03<17:33,  1.52it/s] 65%|██████▌   | 3013/4613 [32:03<13:58,  1.91it/s] 65%|██████▌   | 3014/4613 [32:04<14:50,  1.79it/s] 65%|██████▌   | 3015/4613 [32:04<12:05,  2.20it/s] 65%|██████▌   | 3016/4613 [32:05<14:33,  1.83it/s] 65%|██████▌   | 3017/4613 [32:05<17:03,  1.56it/s] 65%|██████▌   | 3018/4613 [32:06<17:05,  1.56it/s] 65%|██████▌   | 3019/4613 [32:06<13:10,  2.02it/s] 65%|██████▌   | 3020/4613 [32:07<15:04,  1.76it/s] 65%|██████▌   | 3021/4613 [32:07<12:07,  2.19it/s] 66%|██████▌   | 3022/4613 [32:08<14:36,  1.81it/s] 66%|██████▌   | 3023/4613 [32:09<15:53,  1.67it/s] 66%|██████▌   | 3024/4613 [32:09<12:26,  2.13it/s] 66%|██████▌   | 3025/4613 [32:10<15:08,  1.75it/s] 66%|██████▌   | 3026/4613 [32:10<12:05,  2.19it/s] 66%|██████▌   | 3027/4613 [32:10<14:16,  1.85it/s] 66%|██████▌   | 3028/4613 [32:11<15:44,  1.68it/s] 66%|██████▌   | 3029/4613 [32:11<13:01,  2.03it/s] 66%|██████▌   | 3030/4613 [32:12<15:08,  1.74it/s] 66%|██████▌   | 3031/4613 [32:13<16:04,  1.64it/s] 66%|██████▌   | 3032/4613 [32:15<25:50,  1.02it/s] 66%|██████▌   | 3033/4613 [32:16<24:04,  1.09it/s] 66%|██████▌   | 3034/4613 [32:16<18:44,  1.40it/s] 66%|██████▌   | 3035/4613 [32:16<17:58,  1.46it/s] 66%|██████▌   | 3036/4613 [32:17<20:59,  1.25it/s] 66%|██████▌   | 3037/4613 [32:18<19:34,  1.34it/s] 66%|██████▌   | 3038/4613 [32:18<15:36,  1.68it/s] 66%|██████▌   | 3039/4613 [32:19<15:51,  1.66it/s] 66%|██████▌   | 3040/4613 [32:20<17:15,  1.52it/s] 66%|██████▌   | 3041/4613 [32:20<13:50,  1.89it/s] 66%|██████▌   | 3042/4613 [32:21<14:50,  1.76it/s] 66%|██████▌   | 3043/4613 [32:22<18:37,  1.41it/s] 66%|██████▌   | 3044/4613 [32:22<17:53,  1.46it/s] 66%|██████▌   | 3045/4613 [32:22<14:02,  1.86it/s] 66%|██████▌   | 3046/4613 [32:24<21:01,  1.24it/s] 66%|██████▌   | 3047/4613 [32:25<21:22,  1.22it/s] 66%|██████▌   | 3048/4613 [32:25<16:30,  1.58it/s] 66%|██████▌   | 3049/4613 [32:26<17:31,  1.49it/s] 66%|██████▌   | 3050/4613 [32:26<17:58,  1.45it/s] 66%|██████▌   | 3051/4613 [32:27<13:51,  1.88it/s] 66%|██████▌   | 3052/4613 [32:28<16:48,  1.55it/s] 66%|██████▌   | 3053/4613 [32:28<17:39,  1.47it/s] 66%|██████▌   | 3054/4613 [32:29<17:51,  1.46it/s] 66%|██████▌   | 3055/4613 [32:29<13:58,  1.86it/s] 66%|██████▌   | 3056/4613 [32:30<17:21,  1.49it/s] 66%|██████▋   | 3057/4613 [32:31<18:20,  1.41it/s] 66%|██████▋   | 3058/4613 [32:32<19:14,  1.35it/s] 66%|██████▋   | 3059/4613 [32:33<19:22,  1.34it/s] 66%|██████▋   | 3060/4613 [32:33<19:30,  1.33it/s] 66%|██████▋   | 3061/4613 [32:34<19:29,  1.33it/s] 66%|██████▋   | 3062/4613 [32:34<16:21,  1.58it/s] 66%|██████▋   | 3063/4613 [32:35<17:03,  1.51it/s] 66%|██████▋   | 3064/4613 [32:36<17:26,  1.48it/s] 66%|██████▋   | 3065/4613 [32:37<18:17,  1.41it/s] 66%|██████▋   | 3066/4613 [32:37<14:34,  1.77it/s] 66%|██████▋   | 3067/4613 [32:38<16:11,  1.59it/s] 67%|██████▋   | 3068/4613 [32:38<12:54,  2.00it/s] 67%|██████▋   | 3069/4613 [32:38<14:00,  1.84it/s] 67%|██████▋   | 3070/4613 [32:39<11:25,  2.25it/s] 67%|██████▋   | 3071/4613 [32:39<14:03,  1.83it/s] 67%|██████▋   | 3072/4613 [32:40<16:40,  1.54it/s] 67%|██████▋   | 3073/4613 [32:41<16:59,  1.51it/s] 67%|██████▋   | 3074/4613 [32:42<17:32,  1.46it/s] 67%|██████▋   | 3075/4613 [32:42<13:58,  1.83it/s] 67%|██████▋   | 3076/4613 [32:43<15:51,  1.62it/s] 67%|██████▋   | 3077/4613 [32:44<16:53,  1.52it/s] 67%|██████▋   | 3078/4613 [32:44<13:05,  1.96it/s] 67%|██████▋   | 3079/4613 [32:44<14:50,  1.72it/s] 67%|██████▋   | 3080/4613 [32:45<16:48,  1.52it/s] 67%|██████▋   | 3081/4613 [32:45<12:56,  1.97it/s] 67%|██████▋   | 3082/4613 [32:46<15:31,  1.64it/s] 67%|██████▋   | 3083/4613 [32:47<16:22,  1.56it/s] 67%|██████▋   | 3084/4613 [32:48<17:20,  1.47it/s] 67%|██████▋   | 3085/4613 [32:49<18:14,  1.40it/s] 67%|██████▋   | 3086/4613 [32:49<13:56,  1.83it/s] 67%|██████▋   | 3087/4613 [32:50<15:31,  1.64it/s] 67%|██████▋   | 3088/4613 [32:50<12:48,  1.99it/s] 67%|██████▋   | 3089/4613 [32:50<14:17,  1.78it/s] 67%|██████▋   | 3090/4613 [32:51<17:34,  1.44it/s] 67%|██████▋   | 3091/4613 [32:52<18:04,  1.40it/s] 67%|██████▋   | 3092/4613 [32:52<14:22,  1.76it/s] 67%|██████▋   | 3093/4613 [32:53<15:17,  1.66it/s] 67%|██████▋   | 3094/4613 [32:54<16:06,  1.57it/s] 67%|██████▋   | 3095/4613 [32:54<12:28,  2.03it/s] 67%|██████▋   | 3096/4613 [32:55<14:48,  1.71it/s] 67%|██████▋   | 3097/4613 [32:56<15:34,  1.62it/s] 67%|██████▋   | 3098/4613 [32:56<12:25,  2.03it/s] 67%|██████▋   | 3099/4613 [32:56<14:04,  1.79it/s] 67%|██████▋   | 3100/4613 [32:57<12:22,  2.04it/s] 67%|██████▋   | 3101/4613 [32:57<14:01,  1.80it/s] 67%|██████▋   | 3102/4613 [32:58<15:05,  1.67it/s] 67%|██████▋   | 3103/4613 [32:59<16:51,  1.49it/s] 67%|██████▋   | 3104/4613 [32:59<12:59,  1.93it/s] 67%|██████▋   | 3105/4613 [33:00<14:29,  1.73it/s] 67%|██████▋   | 3106/4613 [33:01<16:28,  1.52it/s] 67%|██████▋   | 3107/4613 [33:01<13:11,  1.90it/s] 67%|██████▋   | 3108/4613 [33:02<14:14,  1.76it/s] 67%|██████▋   | 3109/4613 [33:02<11:32,  2.17it/s] 67%|██████▋   | 3110/4613 [33:02<13:10,  1.90it/s] 67%|██████▋   | 3111/4613 [33:03<10:41,  2.34it/s] 67%|██████▋   | 3112/4613 [33:04<18:02,  1.39it/s] 67%|██████▋   | 3113/4613 [33:04<15:10,  1.65it/s] 68%|██████▊   | 3114/4613 [33:05<16:17,  1.53it/s] 68%|██████▊   | 3115/4613 [33:06<16:35,  1.51it/s] 68%|██████▊   | 3116/4613 [33:06<12:40,  1.97it/s] 68%|██████▊   | 3117/4613 [33:07<14:09,  1.76it/s] 68%|██████▊   | 3118/4613 [33:07<12:10,  2.05it/s] 68%|██████▊   | 3119/4613 [33:08<18:55,  1.32it/s] 68%|██████▊   | 3120/4613 [33:09<14:14,  1.75it/s] 68%|██████▊   | 3121/4613 [33:09<15:51,  1.57it/s] 68%|██████▊   | 3122/4613 [33:10<12:48,  1.94it/s] 68%|██████▊   | 3123/4613 [33:10<13:36,  1.83it/s] 68%|██████▊   | 3124/4613 [33:11<15:54,  1.56it/s] 68%|██████▊   | 3125/4613 [33:11<12:34,  1.97it/s] 68%|██████▊   | 3126/4613 [33:12<13:31,  1.83it/s] 68%|██████▊   | 3127/4613 [33:13<15:28,  1.60it/s] 68%|██████▊   | 3128/4613 [33:14<17:36,  1.41it/s] 68%|██████▊   | 3129/4613 [33:14<13:49,  1.79it/s] 68%|██████▊   | 3130/4613 [33:15<14:49,  1.67it/s] 68%|██████▊   | 3131/4613 [33:15<11:21,  2.17it/s] 68%|██████▊   | 3132/4613 [33:15<13:09,  1.87it/s] 68%|██████▊   | 3133/4613 [33:16<10:35,  2.33it/s] 68%|██████▊   | 3134/4613 [33:16<12:26,  1.98it/s] 68%|██████▊   | 3135/4613 [33:16<09:45,  2.53it/s] 68%|██████▊   | 3136/4613 [33:17<12:50,  1.92it/s] 68%|██████▊   | 3137/4613 [33:18<15:40,  1.57it/s] 68%|██████▊   | 3138/4613 [33:19<17:39,  1.39it/s] 68%|██████▊   | 3139/4613 [33:20<17:37,  1.39it/s] 68%|██████▊   | 3140/4613 [33:20<13:26,  1.83it/s] 68%|██████▊   | 3141/4613 [33:21<15:35,  1.57it/s] 68%|██████▊   | 3142/4613 [33:22<18:24,  1.33it/s] 68%|██████▊   | 3143/4613 [33:23<19:03,  1.28it/s] 68%|██████▊   | 3144/4613 [33:23<20:05,  1.22it/s] 68%|██████▊   | 3145/4613 [33:24<19:21,  1.26it/s] 68%|██████▊   | 3146/4613 [33:25<18:41,  1.31it/s] 68%|██████▊   | 3147/4613 [33:25<14:44,  1.66it/s] 68%|██████▊   | 3148/4613 [33:26<14:57,  1.63it/s] 68%|██████▊   | 3149/4613 [33:26<11:27,  2.13it/s] 68%|██████▊   | 3150/4613 [33:27<13:30,  1.81it/s] 68%|██████▊   | 3151/4613 [33:27<10:44,  2.27it/s] 68%|██████▊   | 3152/4613 [33:28<13:43,  1.77it/s] 68%|██████▊   | 3153/4613 [33:28<15:18,  1.59it/s] 68%|██████▊   | 3154/4613 [33:29<15:34,  1.56it/s] 68%|██████▊   | 3155/4613 [33:29<12:25,  1.96it/s] 68%|██████▊   | 3156/4613 [33:30<13:51,  1.75it/s] 68%|██████▊   | 3157/4613 [33:30<10:39,  2.28it/s] 68%|██████▊   | 3158/4613 [33:31<12:31,  1.94it/s] 68%|██████▊   | 3159/4613 [33:31<10:09,  2.38it/s] 69%|██████▊   | 3160/4613 [33:32<12:04,  2.01it/s] 69%|██████▊   | 3161/4613 [33:32<10:11,  2.37it/s] 69%|██████▊   | 3162/4613 [33:33<12:09,  1.99it/s] 69%|██████▊   | 3163/4613 [33:33<14:09,  1.71it/s] 69%|██████▊   | 3164/4613 [33:34<12:03,  2.00it/s] 69%|██████▊   | 3165/4613 [33:34<13:18,  1.81it/s] 69%|██████▊   | 3166/4613 [33:35<15:00,  1.61it/s] 69%|██████▊   | 3167/4613 [33:36<16:39,  1.45it/s] 69%|██████▊   | 3168/4613 [33:37<17:34,  1.37it/s] 69%|██████▊   | 3169/4613 [33:37<13:35,  1.77it/s] 69%|██████▊   | 3170/4613 [33:38<16:22,  1.47it/s] 69%|██████▊   | 3171/4613 [33:39<16:14,  1.48it/s] 69%|██████▉   | 3172/4613 [33:39<12:48,  1.88it/s] 69%|██████▉   | 3173/4613 [33:40<14:04,  1.71it/s] 69%|██████▉   | 3174/4613 [33:40<15:36,  1.54it/s] 69%|██████▉   | 3175/4613 [33:41<16:02,  1.49it/s] 69%|██████▉   | 3176/4613 [33:41<12:46,  1.87it/s] 69%|██████▉   | 3177/4613 [33:42<14:13,  1.68it/s] 69%|██████▉   | 3178/4613 [33:42<11:09,  2.14it/s] 69%|██████▉   | 3179/4613 [33:43<13:11,  1.81it/s] 69%|██████▉   | 3180/4613 [33:43<10:57,  2.18it/s] 69%|██████▉   | 3181/4613 [33:44<12:44,  1.87it/s] 69%|██████▉   | 3182/4613 [33:45<14:44,  1.62it/s] 69%|██████▉   | 3183/4613 [33:45<11:47,  2.02it/s] 69%|██████▉   | 3184/4613 [33:46<13:56,  1.71it/s] 69%|██████▉   | 3185/4613 [33:47<15:21,  1.55it/s] 69%|██████▉   | 3186/4613 [33:47<12:05,  1.97it/s] 69%|██████▉   | 3187/4613 [33:47<12:56,  1.84it/s] 69%|██████▉   | 3188/4613 [33:48<14:27,  1.64it/s] 69%|██████▉   | 3189/4613 [33:48<11:37,  2.04it/s] 69%|██████▉   | 3190/4613 [33:49<12:55,  1.83it/s] 69%|██████▉   | 3191/4613 [33:50<14:47,  1.60it/s] 69%|██████▉   | 3192/4613 [33:50<12:02,  1.97it/s] 69%|██████▉   | 3193/4613 [33:51<13:58,  1.69it/s] 69%|██████▉   | 3194/4613 [33:52<14:49,  1.59it/s] 69%|██████▉   | 3195/4613 [33:52<12:31,  1.89it/s] 69%|██████▉   | 3196/4613 [33:53<13:42,  1.72it/s] 69%|██████▉   | 3197/4613 [33:53<14:59,  1.57it/s] 69%|██████▉   | 3198/4613 [33:54<11:55,  1.98it/s] 69%|██████▉   | 3199/4613 [33:54<13:12,  1.78it/s] 69%|██████▉   | 3200/4613 [33:55<14:54,  1.58it/s] 69%|██████▉   | 3201/4613 [33:55<11:36,  2.03it/s] 69%|██████▉   | 3202/4613 [33:56<13:23,  1.76it/s] 69%|██████▉   | 3203/4613 [33:56<11:16,  2.09it/s] 69%|██████▉   | 3204/4613 [33:58<18:21,  1.28it/s] 69%|██████▉   | 3205/4613 [33:59<18:47,  1.25it/s] 69%|██████▉   | 3206/4613 [33:59<14:30,  1.62it/s] 70%|██████▉   | 3207/4613 [33:59<15:06,  1.55it/s] 70%|██████▉   | 3208/4613 [34:00<16:08,  1.45it/s] 70%|██████▉   | 3209/4613 [34:01<13:36,  1.72it/s] 70%|██████▉   | 3210/4613 [34:02<18:55,  1.24it/s] 70%|██████▉   | 3211/4613 [34:03<20:53,  1.12it/s] 70%|██████▉   | 3212/4613 [34:04<24:37,  1.05s/it] 70%|██████▉   | 3213/4613 [34:05<18:09,  1.28it/s] 70%|██████▉   | 3214/4613 [34:05<17:34,  1.33it/s] 70%|██████▉   | 3215/4613 [34:05<13:37,  1.71it/s] 70%|██████▉   | 3216/4613 [34:06<14:29,  1.61it/s] 70%|██████▉   | 3217/4613 [34:06<11:12,  2.08it/s] 70%|██████▉   | 3218/4613 [34:07<13:57,  1.67it/s] 70%|██████▉   | 3219/4613 [34:08<14:56,  1.55it/s] 70%|██████▉   | 3220/4613 [34:09<15:37,  1.49it/s] 70%|██████▉   | 3221/4613 [34:09<16:24,  1.41it/s] 70%|██████▉   | 3222/4613 [34:10<13:40,  1.69it/s] 70%|██████▉   | 3223/4613 [34:10<14:16,  1.62it/s] 70%|██████▉   | 3224/4613 [34:11<14:48,  1.56it/s] 70%|██████▉   | 3225/4613 [34:12<16:11,  1.43it/s] 70%|██████▉   | 3226/4613 [34:12<13:16,  1.74it/s] 70%|██████▉   | 3227/4613 [34:13<14:28,  1.60it/s] 70%|██████▉   | 3228/4613 [34:14<15:29,  1.49it/s] 70%|██████▉   | 3229/4613 [34:15<16:06,  1.43it/s] 70%|███████   | 3230/4613 [34:15<12:15,  1.88it/s] 70%|███████   | 3231/4613 [34:15<13:34,  1.70it/s] 70%|███████   | 3232/4613 [34:16<15:01,  1.53it/s] 70%|███████   | 3233/4613 [34:16<11:41,  1.97it/s] 70%|███████   | 3234/4613 [34:17<13:20,  1.72it/s] 70%|███████   | 3235/4613 [34:18<15:26,  1.49it/s] 70%|███████   | 3236/4613 [34:19<16:16,  1.41it/s] 70%|███████   | 3237/4613 [34:19<13:22,  1.72it/s] 70%|███████   | 3238/4613 [34:20<13:48,  1.66it/s] 70%|███████   | 3239/4613 [34:20<14:35,  1.57it/s] 70%|███████   | 3240/4613 [34:21<16:08,  1.42it/s] 70%|███████   | 3241/4613 [34:22<17:03,  1.34it/s] 70%|███████   | 3242/4613 [34:22<13:26,  1.70it/s] 70%|███████   | 3243/4613 [34:23<15:01,  1.52it/s] 70%|███████   | 3244/4613 [34:24<15:57,  1.43it/s] 70%|███████   | 3245/4613 [34:25<15:50,  1.44it/s] 70%|███████   | 3246/4613 [34:26<17:11,  1.33it/s] 70%|███████   | 3247/4613 [34:26<13:39,  1.67it/s] 70%|███████   | 3248/4613 [34:27<18:35,  1.22it/s] 70%|███████   | 3249/4613 [34:27<14:09,  1.61it/s] 70%|███████   | 3250/4613 [34:28<14:49,  1.53it/s] 70%|███████   | 3251/4613 [34:29<16:01,  1.42it/s] 70%|███████   | 3252/4613 [34:29<12:27,  1.82it/s] 71%|███████   | 3253/4613 [34:30<13:56,  1.63it/s] 71%|███████   | 3254/4613 [34:31<15:04,  1.50it/s] 71%|███████   | 3255/4613 [34:31<16:00,  1.41it/s] 71%|███████   | 3256/4613 [34:32<17:18,  1.31it/s] 71%|███████   | 3257/4613 [34:33<16:58,  1.33it/s] 71%|███████   | 3258/4613 [34:33<13:23,  1.69it/s] 71%|███████   | 3259/4613 [34:34<14:58,  1.51it/s] 71%|███████   | 3260/4613 [34:35<15:55,  1.42it/s] 71%|███████   | 3261/4613 [34:36<16:14,  1.39it/s] 71%|███████   | 3262/4613 [34:37<18:00,  1.25it/s] 71%|███████   | 3263/4613 [34:37<14:08,  1.59it/s] 71%|███████   | 3264/4613 [34:37<14:13,  1.58it/s] 71%|███████   | 3265/4613 [34:38<11:15,  1.99it/s] 71%|███████   | 3266/4613 [34:38<12:41,  1.77it/s] 71%|███████   | 3267/4613 [34:39<13:39,  1.64it/s] 71%|███████   | 3268/4613 [34:39<10:39,  2.10it/s] 71%|███████   | 3269/4613 [34:40<11:59,  1.87it/s] 71%|███████   | 3270/4613 [34:40<09:23,  2.38it/s] 71%|███████   | 3271/4613 [34:42<17:07,  1.31it/s] 71%|███████   | 3272/4613 [34:42<17:23,  1.29it/s] 71%|███████   | 3273/4613 [34:44<24:46,  1.11s/it] 71%|███████   | 3274/4613 [34:45<22:14,  1.00it/s] 71%|███████   | 3275/4613 [34:46<21:12,  1.05it/s] 71%|███████   | 3276/4613 [34:47<19:28,  1.14it/s] 71%|███████   | 3277/4613 [34:47<19:16,  1.16it/s] 71%|███████   | 3278/4613 [34:48<14:30,  1.53it/s] 71%|███████   | 3279/4613 [34:48<15:01,  1.48it/s] 71%|███████   | 3280/4613 [34:49<11:45,  1.89it/s] 71%|███████   | 3281/4613 [34:49<13:07,  1.69it/s] 71%|███████   | 3282/4613 [34:49<10:25,  2.13it/s] 71%|███████   | 3283/4613 [34:50<11:50,  1.87it/s] 71%|███████   | 3284/4613 [34:51<13:33,  1.63it/s] 71%|███████   | 3285/4613 [34:51<10:23,  2.13it/s] 71%|███████   | 3286/4613 [34:51<08:34,  2.58it/s] 71%|███████▏  | 3287/4613 [34:52<11:01,  2.00it/s] 71%|███████▏  | 3288/4613 [34:53<12:24,  1.78it/s] 71%|███████▏  | 3289/4613 [34:53<10:12,  2.16it/s] 71%|███████▏  | 3290/4613 [34:54<16:39,  1.32it/s] 71%|███████▏  | 3291/4613 [34:55<12:53,  1.71it/s] 71%|███████▏  | 3292/4613 [34:55<14:01,  1.57it/s] 71%|███████▏  | 3293/4613 [34:56<14:13,  1.55it/s] 71%|███████▏  | 3294/4613 [34:56<10:58,  2.00it/s] 71%|███████▏  | 3295/4613 [34:57<12:13,  1.80it/s] 71%|███████▏  | 3296/4613 [34:58<14:09,  1.55it/s] 71%|███████▏  | 3297/4613 [34:58<11:17,  1.94it/s] 71%|███████▏  | 3298/4613 [34:59<12:30,  1.75it/s] 72%|███████▏  | 3299/4613 [34:59<14:00,  1.56it/s] 72%|███████▏  | 3300/4613 [35:00<11:57,  1.83it/s] 72%|███████▏  | 3301/4613 [35:01<18:01,  1.21it/s] 72%|███████▏  | 3302/4613 [35:02<14:21,  1.52it/s] 72%|███████▏  | 3303/4613 [35:02<14:42,  1.49it/s] 72%|███████▏  | 3304/4613 [35:03<15:27,  1.41it/s] 72%|███████▏  | 3305/4613 [35:04<15:14,  1.43it/s] 72%|███████▏  | 3306/4613 [35:04<11:54,  1.83it/s] 72%|███████▏  | 3307/4613 [35:05<13:58,  1.56it/s] 72%|███████▏  | 3308/4613 [35:06<14:48,  1.47it/s] 72%|███████▏  | 3309/4613 [35:06<14:57,  1.45it/s] 72%|███████▏  | 3310/4613 [35:06<11:48,  1.84it/s] 72%|███████▏  | 3311/4613 [35:07<12:39,  1.72it/s] 72%|███████▏  | 3312/4613 [35:07<10:50,  2.00it/s] 72%|███████▏  | 3313/4613 [35:08<13:07,  1.65it/s] 72%|███████▏  | 3314/4613 [35:09<13:34,  1.60it/s] 72%|███████▏  | 3315/4613 [35:10<14:30,  1.49it/s] 72%|███████▏  | 3316/4613 [35:10<11:52,  1.82it/s] 72%|███████▏  | 3317/4613 [35:11<12:47,  1.69it/s] 72%|███████▏  | 3318/4613 [35:12<14:40,  1.47it/s] 72%|███████▏  | 3319/4613 [35:13<20:58,  1.03it/s] 72%|███████▏  | 3320/4613 [35:14<20:00,  1.08it/s] 72%|███████▏  | 3321/4613 [35:15<19:42,  1.09it/s] 72%|███████▏  | 3322/4613 [35:16<18:58,  1.13it/s] 72%|███████▏  | 3323/4613 [35:16<17:44,  1.21it/s] 72%|███████▏  | 3324/4613 [35:17<13:28,  1.59it/s] 72%|███████▏  | 3325/4613 [35:17<10:46,  1.99it/s] 72%|███████▏  | 3326/4613 [35:18<12:20,  1.74it/s] 72%|███████▏  | 3327/4613 [35:18<12:59,  1.65it/s] 72%|███████▏  | 3328/4613 [35:19<14:32,  1.47it/s] 72%|███████▏  | 3329/4613 [35:20<15:48,  1.35it/s] 72%|███████▏  | 3330/4613 [35:20<12:26,  1.72it/s] 72%|███████▏  | 3331/4613 [35:21<12:52,  1.66it/s] 72%|███████▏  | 3332/4613 [35:21<10:14,  2.08it/s] 72%|███████▏  | 3333/4613 [35:22<11:39,  1.83it/s] 72%|███████▏  | 3334/4613 [35:22<09:46,  2.18it/s] 72%|███████▏  | 3335/4613 [35:23<11:37,  1.83it/s] 72%|███████▏  | 3336/4613 [35:23<12:27,  1.71it/s] 72%|███████▏  | 3337/4613 [35:24<13:44,  1.55it/s] 72%|███████▏  | 3338/4613 [35:24<10:29,  2.03it/s] 72%|███████▏  | 3339/4613 [35:25<12:14,  1.74it/s] 72%|███████▏  | 3340/4613 [35:26<14:31,  1.46it/s] 72%|███████▏  | 3341/4613 [35:27<15:08,  1.40it/s] 72%|███████▏  | 3342/4613 [35:28<15:47,  1.34it/s] 72%|███████▏  | 3343/4613 [35:29<17:30,  1.21it/s] 72%|███████▏  | 3344/4613 [35:29<16:33,  1.28it/s] 73%|███████▎  | 3345/4613 [35:30<16:49,  1.26it/s] 73%|███████▎  | 3346/4613 [35:31<16:45,  1.26it/s] 73%|███████▎  | 3347/4613 [35:31<13:04,  1.61it/s] 73%|███████▎  | 3348/4613 [35:34<25:07,  1.19s/it] 73%|███████▎  | 3349/4613 [35:34<22:17,  1.06s/it] 73%|███████▎  | 3350/4613 [35:35<17:28,  1.20it/s] 73%|███████▎  | 3351/4613 [35:35<16:28,  1.28it/s] 73%|███████▎  | 3352/4613 [35:36<16:27,  1.28it/s] 73%|███████▎  | 3353/4613 [35:36<12:40,  1.66it/s] 73%|███████▎  | 3354/4613 [35:37<13:32,  1.55it/s] 73%|███████▎  | 3355/4613 [35:37<10:48,  1.94it/s] 73%|███████▎  | 3356/4613 [35:38<11:51,  1.77it/s] 73%|███████▎  | 3357/4613 [35:40<17:59,  1.16it/s] 73%|███████▎  | 3358/4613 [35:40<13:59,  1.49it/s] 73%|███████▎  | 3359/4613 [35:41<14:30,  1.44it/s] 73%|███████▎  | 3360/4613 [35:41<14:37,  1.43it/s] 73%|███████▎  | 3361/4613 [35:42<11:47,  1.77it/s] 73%|███████▎  | 3362/4613 [35:42<12:17,  1.70it/s] 73%|███████▎  | 3363/4613 [35:42<09:27,  2.20it/s] 73%|███████▎  | 3364/4613 [35:43<11:20,  1.84it/s] 73%|███████▎  | 3365/4613 [35:44<12:37,  1.65it/s] 73%|███████▎  | 3366/4613 [35:45<13:44,  1.51it/s] 73%|███████▎  | 3367/4613 [35:45<11:18,  1.84it/s] 73%|███████▎  | 3368/4613 [35:46<12:30,  1.66it/s] 73%|███████▎  | 3369/4613 [35:46<13:13,  1.57it/s] 73%|███████▎  | 3370/4613 [35:47<10:33,  1.96it/s] 73%|███████▎  | 3371/4613 [35:47<11:34,  1.79it/s] 73%|███████▎  | 3372/4613 [35:48<14:10,  1.46it/s] 73%|███████▎  | 3373/4613 [35:49<14:24,  1.43it/s] 73%|███████▎  | 3374/4613 [35:50<15:10,  1.36it/s] 73%|███████▎  | 3375/4613 [35:50<11:59,  1.72it/s] 73%|███████▎  | 3376/4613 [35:51<13:45,  1.50it/s] 73%|███████▎  | 3377/4613 [35:52<14:41,  1.40it/s] 73%|███████▎  | 3378/4613 [35:52<11:27,  1.80it/s] 73%|███████▎  | 3379/4613 [35:53<12:47,  1.61it/s] 73%|███████▎  | 3380/4613 [35:53<14:16,  1.44it/s] 73%|███████▎  | 3381/4613 [35:54<15:40,  1.31it/s] 73%|███████▎  | 3382/4613 [35:55<15:40,  1.31it/s] 73%|███████▎  | 3383/4613 [35:56<15:16,  1.34it/s] 73%|███████▎  | 3384/4613 [35:57<15:39,  1.31it/s] 73%|███████▎  | 3385/4613 [35:57<11:54,  1.72it/s] 73%|███████▎  | 3386/4613 [35:58<13:36,  1.50it/s] 73%|███████▎  | 3387/4613 [35:58<14:28,  1.41it/s] 73%|███████▎  | 3388/4613 [36:00<19:00,  1.07it/s] 73%|███████▎  | 3389/4613 [36:00<14:24,  1.42it/s] 73%|███████▎  | 3390/4613 [36:02<19:08,  1.06it/s] 74%|███████▎  | 3391/4613 [36:04<25:43,  1.26s/it] 74%|███████▎  | 3392/4613 [36:04<21:56,  1.08s/it] 74%|███████▎  | 3393/4613 [36:05<16:53,  1.20it/s] 74%|███████▎  | 3394/4613 [36:05<15:44,  1.29it/s] 74%|███████▎  | 3395/4613 [36:06<17:05,  1.19it/s] 74%|███████▎  | 3396/4613 [36:07<15:56,  1.27it/s] 74%|███████▎  | 3397/4613 [36:08<15:46,  1.28it/s] 74%|███████▎  | 3398/4613 [36:08<15:52,  1.28it/s] 74%|███████▎  | 3399/4613 [36:09<12:52,  1.57it/s] 74%|███████▎  | 3400/4613 [36:09<13:40,  1.48it/s] 74%|███████▎  | 3401/4613 [36:10<14:52,  1.36it/s] 74%|███████▎  | 3402/4613 [36:13<28:39,  1.42s/it] 74%|███████▍  | 3403/4613 [36:14<21:25,  1.06s/it] 74%|███████▍  | 3404/4613 [36:14<19:39,  1.02it/s] 74%|███████▍  | 3405/4613 [36:15<18:27,  1.09it/s] 74%|███████▍  | 3406/4613 [36:15<14:16,  1.41it/s] 74%|███████▍  | 3407/4613 [36:16<14:15,  1.41it/s] 74%|███████▍  | 3408/4613 [36:19<25:41,  1.28s/it] 74%|███████▍  | 3409/4613 [36:19<22:25,  1.12s/it] 74%|███████▍  | 3410/4613 [36:20<16:49,  1.19it/s] 74%|███████▍  | 3411/4613 [36:20<15:47,  1.27it/s] 74%|███████▍  | 3412/4613 [36:20<12:14,  1.64it/s] 74%|███████▍  | 3413/4613 [36:21<13:12,  1.51it/s] 74%|███████▍  | 3414/4613 [36:22<14:29,  1.38it/s] 74%|███████▍  | 3415/4613 [36:23<14:53,  1.34it/s] 74%|███████▍  | 3416/4613 [36:23<11:21,  1.76it/s] 74%|███████▍  | 3417/4613 [36:25<18:19,  1.09it/s] 74%|███████▍  | 3418/4613 [36:26<17:01,  1.17it/s] 74%|███████▍  | 3419/4613 [36:26<16:08,  1.23it/s] 74%|███████▍  | 3420/4613 [36:26<12:19,  1.61it/s] 74%|███████▍  | 3421/4613 [36:27<13:42,  1.45it/s] 74%|███████▍  | 3422/4613 [36:28<13:49,  1.44it/s] 74%|███████▍  | 3423/4613 [36:28<11:13,  1.77it/s] 74%|███████▍  | 3424/4613 [36:30<16:18,  1.22it/s] 74%|███████▍  | 3425/4613 [36:30<12:50,  1.54it/s] 74%|███████▍  | 3426/4613 [36:31<13:08,  1.51it/s] 74%|███████▍  | 3427/4613 [36:31<13:16,  1.49it/s] 74%|███████▍  | 3428/4613 [36:32<15:01,  1.31it/s] 74%|███████▍  | 3429/4613 [36:33<15:39,  1.26it/s] 74%|███████▍  | 3430/4613 [36:33<12:30,  1.58it/s] 74%|███████▍  | 3431/4613 [36:34<12:40,  1.55it/s] 74%|███████▍  | 3432/4613 [36:35<12:50,  1.53it/s] 74%|███████▍  | 3433/4613 [36:36<13:56,  1.41it/s] 74%|███████▍  | 3434/4613 [36:36<11:26,  1.72it/s] 74%|███████▍  | 3435/4613 [36:37<12:02,  1.63it/s] 74%|███████▍  | 3436/4613 [36:37<12:39,  1.55it/s] 75%|███████▍  | 3437/4613 [36:37<09:52,  1.99it/s] 75%|███████▍  | 3438/4613 [36:38<12:44,  1.54it/s] 75%|███████▍  | 3439/4613 [36:41<22:37,  1.16s/it] 75%|███████▍  | 3440/4613 [36:42<20:19,  1.04s/it] 75%|███████▍  | 3441/4613 [36:42<18:49,  1.04it/s] 75%|███████▍  | 3442/4613 [36:42<14:14,  1.37it/s] 75%|███████▍  | 3443/4613 [36:43<14:11,  1.37it/s] 75%|███████▍  | 3444/4613 [36:44<13:52,  1.40it/s] 75%|███████▍  | 3445/4613 [36:44<11:19,  1.72it/s] 75%|███████▍  | 3446/4613 [36:45<12:17,  1.58it/s] 75%|███████▍  | 3447/4613 [36:46<12:58,  1.50it/s] 75%|███████▍  | 3448/4613 [36:46<10:20,  1.88it/s] 75%|███████▍  | 3449/4613 [36:47<15:32,  1.25it/s] 75%|███████▍  | 3450/4613 [36:48<15:57,  1.22it/s] 75%|███████▍  | 3451/4613 [36:48<12:32,  1.54it/s] 75%|███████▍  | 3452/4613 [36:49<13:02,  1.48it/s] 75%|███████▍  | 3453/4613 [36:50<14:15,  1.36it/s] 75%|███████▍  | 3454/4613 [36:51<14:10,  1.36it/s] 75%|███████▍  | 3455/4613 [36:51<14:08,  1.37it/s] 75%|███████▍  | 3456/4613 [36:52<11:17,  1.71it/s] 75%|███████▍  | 3457/4613 [36:52<11:54,  1.62it/s] 75%|███████▍  | 3458/4613 [36:53<13:15,  1.45it/s] 75%|███████▍  | 3459/4613 [36:53<10:24,  1.85it/s] 75%|███████▌  | 3460/4613 [36:54<11:42,  1.64it/s] 75%|███████▌  | 3461/4613 [36:55<12:45,  1.50it/s] 75%|███████▌  | 3462/4613 [36:56<13:21,  1.44it/s] 75%|███████▌  | 3463/4613 [36:56<10:42,  1.79it/s] 75%|███████▌  | 3464/4613 [36:57<11:23,  1.68it/s] 75%|███████▌  | 3465/4613 [36:58<12:38,  1.51it/s] 75%|███████▌  | 3466/4613 [36:58<13:34,  1.41it/s] 75%|███████▌  | 3467/4613 [36:59<10:18,  1.85it/s] 75%|███████▌  | 3468/4613 [36:59<11:14,  1.70it/s] 75%|███████▌  | 3469/4613 [36:59<09:01,  2.11it/s] 75%|███████▌  | 3470/4613 [37:00<10:13,  1.86it/s] 75%|███████▌  | 3471/4613 [37:00<08:03,  2.36it/s] 75%|███████▌  | 3472/4613 [37:01<10:12,  1.86it/s] 75%|███████▌  | 3473/4613 [37:02<11:10,  1.70it/s] 75%|███████▌  | 3474/4613 [37:03<12:34,  1.51it/s] 75%|███████▌  | 3475/4613 [37:03<13:23,  1.42it/s] 75%|███████▌  | 3476/4613 [37:04<10:59,  1.72it/s] 75%|███████▌  | 3477/4613 [37:05<12:34,  1.51it/s] 75%|███████▌  | 3478/4613 [37:05<12:27,  1.52it/s] 75%|███████▌  | 3479/4613 [37:06<13:11,  1.43it/s] 75%|███████▌  | 3480/4613 [37:06<10:10,  1.86it/s] 75%|███████▌  | 3481/4613 [37:07<11:14,  1.68it/s] 75%|███████▌  | 3482/4613 [37:07<09:09,  2.06it/s] 76%|███████▌  | 3483/4613 [37:08<10:39,  1.77it/s] 76%|███████▌  | 3484/4613 [37:10<16:50,  1.12it/s] 76%|███████▌  | 3485/4613 [37:10<15:37,  1.20it/s] 76%|███████▌  | 3486/4613 [37:10<11:54,  1.58it/s] 76%|███████▌  | 3487/4613 [37:11<12:28,  1.50it/s] 76%|███████▌  | 3488/4613 [37:11<09:42,  1.93it/s] 76%|███████▌  | 3489/4613 [37:12<11:37,  1.61it/s] 76%|███████▌  | 3490/4613 [37:13<11:55,  1.57it/s] 76%|███████▌  | 3491/4613 [37:13<09:37,  1.94it/s] 76%|███████▌  | 3492/4613 [37:14<10:51,  1.72it/s] 76%|███████▌  | 3493/4613 [37:15<11:41,  1.60it/s] 76%|███████▌  | 3494/4613 [37:15<09:11,  2.03it/s] 76%|███████▌  | 3495/4613 [37:16<11:05,  1.68it/s] 76%|███████▌  | 3496/4613 [37:16<11:42,  1.59it/s] 76%|███████▌  | 3497/4613 [37:17<10:18,  1.81it/s] 76%|███████▌  | 3498/4613 [37:17<11:39,  1.59it/s] 76%|███████▌  | 3499/4613 [37:18<12:09,  1.53it/s] 76%|███████▌  | 3500/4613 [37:19<12:58,  1.43it/s] 76%|███████▌  | 3501/4613 [37:20<13:07,  1.41it/s] 76%|███████▌  | 3502/4613 [37:20<10:39,  1.74it/s] 76%|███████▌  | 3503/4613 [37:21<11:26,  1.62it/s] 76%|███████▌  | 3504/4613 [37:22<12:36,  1.46it/s] 76%|███████▌  | 3505/4613 [37:22<13:06,  1.41it/s] 76%|███████▌  | 3506/4613 [37:23<13:30,  1.37it/s] 76%|███████▌  | 3507/4613 [37:24<14:15,  1.29it/s] 76%|███████▌  | 3508/4613 [37:24<10:54,  1.69it/s] 76%|███████▌  | 3509/4613 [37:25<11:39,  1.58it/s] 76%|███████▌  | 3510/4613 [37:26<12:31,  1.47it/s] 76%|███████▌  | 3511/4613 [37:26<09:33,  1.92it/s] 76%|███████▌  | 3512/4613 [37:27<11:06,  1.65it/s] 76%|███████▌  | 3513/4613 [37:27<08:59,  2.04it/s] 76%|███████▌  | 3514/4613 [37:28<14:55,  1.23it/s] 76%|███████▌  | 3515/4613 [37:29<14:42,  1.24it/s] 76%|███████▌  | 3516/4613 [37:30<15:39,  1.17it/s] 76%|███████▌  | 3517/4613 [37:31<15:28,  1.18it/s] 76%|███████▋  | 3518/4613 [37:32<14:46,  1.24it/s] 76%|███████▋  | 3519/4613 [37:33<14:59,  1.22it/s] 76%|███████▋  | 3520/4613 [37:33<11:42,  1.56it/s] 76%|███████▋  | 3521/4613 [37:33<11:37,  1.57it/s] 76%|███████▋  | 3522/4613 [37:34<08:55,  2.04it/s] 76%|███████▋  | 3523/4613 [37:34<10:13,  1.78it/s] 76%|███████▋  | 3524/4613 [37:35<08:39,  2.10it/s] 76%|███████▋  | 3525/4613 [37:35<09:40,  1.88it/s] 76%|███████▋  | 3526/4613 [37:36<12:03,  1.50it/s] 76%|███████▋  | 3527/4613 [37:36<09:43,  1.86it/s] 76%|███████▋  | 3528/4613 [37:38<14:27,  1.25it/s] 77%|███████▋  | 3529/4613 [37:38<10:59,  1.64it/s] 77%|███████▋  | 3530/4613 [37:39<11:16,  1.60it/s] 77%|███████▋  | 3531/4613 [37:39<08:53,  2.03it/s] 77%|███████▋  | 3532/4613 [37:40<10:26,  1.73it/s] 77%|███████▋  | 3533/4613 [37:40<08:20,  2.16it/s] 77%|███████▋  | 3534/4613 [37:40<09:33,  1.88it/s] 77%|███████▋  | 3535/4613 [37:41<07:55,  2.27it/s] 77%|███████▋  | 3536/4613 [37:41<09:09,  1.96it/s] 77%|███████▋  | 3537/4613 [37:42<07:34,  2.37it/s] 77%|███████▋  | 3538/4613 [37:42<09:04,  1.97it/s] 77%|███████▋  | 3539/4613 [37:43<11:29,  1.56it/s] 77%|███████▋  | 3540/4613 [37:44<11:55,  1.50it/s] 77%|███████▋  | 3541/4613 [37:44<09:24,  1.90it/s] 77%|███████▋  | 3542/4613 [37:45<09:59,  1.79it/s] 77%|███████▋  | 3543/4613 [37:46<11:27,  1.56it/s] 77%|███████▋  | 3544/4613 [37:46<08:59,  1.98it/s] 77%|███████▋  | 3545/4613 [37:47<10:06,  1.76it/s] 77%|███████▋  | 3546/4613 [37:47<11:35,  1.53it/s] 77%|███████▋  | 3547/4613 [37:48<09:05,  1.96it/s] 77%|███████▋  | 3548/4613 [37:48<10:08,  1.75it/s] 77%|███████▋  | 3549/4613 [37:49<08:20,  2.13it/s] 77%|███████▋  | 3550/4613 [37:49<09:15,  1.92it/s] 77%|███████▋  | 3551/4613 [37:50<11:15,  1.57it/s] 77%|███████▋  | 3552/4613 [37:51<11:41,  1.51it/s] 77%|███████▋  | 3553/4613 [37:52<13:24,  1.32it/s] 77%|███████▋  | 3554/4613 [37:52<10:58,  1.61it/s] 77%|███████▋  | 3555/4613 [37:53<10:59,  1.60it/s] 77%|███████▋  | 3556/4613 [37:54<11:48,  1.49it/s] 77%|███████▋  | 3557/4613 [37:54<09:52,  1.78it/s] 77%|███████▋  | 3558/4613 [37:54<10:18,  1.71it/s] 77%|███████▋  | 3559/4613 [37:55<08:21,  2.10it/s] 77%|███████▋  | 3560/4613 [37:55<09:53,  1.77it/s] 77%|███████▋  | 3561/4613 [37:56<11:50,  1.48it/s] 77%|███████▋  | 3562/4613 [37:57<11:59,  1.46it/s] 77%|███████▋  | 3563/4613 [37:58<13:01,  1.34it/s] 77%|███████▋  | 3564/4613 [37:59<12:44,  1.37it/s] 77%|███████▋  | 3565/4613 [37:59<09:53,  1.77it/s] 77%|███████▋  | 3566/4613 [38:00<11:06,  1.57it/s] 77%|███████▋  | 3567/4613 [38:00<12:01,  1.45it/s] 77%|███████▋  | 3568/4613 [38:01<12:03,  1.44it/s] 77%|███████▋  | 3569/4613 [38:02<12:45,  1.36it/s] 77%|███████▋  | 3570/4613 [38:02<09:57,  1.75it/s] 77%|███████▋  | 3571/4613 [38:03<11:05,  1.57it/s] 77%|███████▋  | 3572/4613 [38:04<11:29,  1.51it/s] 77%|███████▋  | 3573/4613 [38:05<12:35,  1.38it/s] 77%|███████▋  | 3574/4613 [38:05<13:02,  1.33it/s] 77%|███████▋  | 3575/4613 [38:06<10:26,  1.66it/s] 78%|███████▊  | 3576/4613 [38:06<10:48,  1.60it/s] 78%|███████▊  | 3577/4613 [38:06<08:19,  2.07it/s] 78%|███████▊  | 3578/4613 [38:07<09:36,  1.79it/s] 78%|███████▊  | 3579/4613 [38:07<07:59,  2.16it/s] 78%|███████▊  | 3580/4613 [38:08<10:00,  1.72it/s] 78%|███████▊  | 3581/4613 [38:10<14:17,  1.20it/s] 78%|███████▊  | 3582/4613 [38:11<14:22,  1.20it/s] 78%|███████▊  | 3583/4613 [38:11<10:57,  1.57it/s] 78%|███████▊  | 3584/4613 [38:11<11:20,  1.51it/s] 78%|███████▊  | 3585/4613 [38:12<12:36,  1.36it/s] 78%|███████▊  | 3586/4613 [38:13<13:21,  1.28it/s] 78%|███████▊  | 3587/4613 [38:15<17:27,  1.02s/it] 78%|███████▊  | 3588/4613 [38:15<13:27,  1.27it/s] 78%|███████▊  | 3589/4613 [38:16<13:41,  1.25it/s] 78%|███████▊  | 3590/4613 [38:17<13:44,  1.24it/s] 78%|███████▊  | 3591/4613 [38:18<13:49,  1.23it/s] 78%|███████▊  | 3592/4613 [38:18<13:05,  1.30it/s] 78%|███████▊  | 3593/4613 [38:19<14:02,  1.21it/s] 78%|███████▊  | 3594/4613 [38:20<13:29,  1.26it/s] 78%|███████▊  | 3595/4613 [38:20<10:40,  1.59it/s] 78%|███████▊  | 3596/4613 [38:21<11:57,  1.42it/s] 78%|███████▊  | 3597/4613 [38:22<11:40,  1.45it/s] 78%|███████▊  | 3598/4613 [38:22<11:50,  1.43it/s] 78%|███████▊  | 3599/4613 [38:23<10:04,  1.68it/s] 78%|███████▊  | 3600/4613 [38:24<14:07,  1.20it/s] 78%|███████▊  | 3601/4613 [38:24<10:48,  1.56it/s] 78%|███████▊  | 3602/4613 [38:25<11:08,  1.51it/s] 78%|███████▊  | 3603/4613 [38:26<12:33,  1.34it/s] 78%|███████▊  | 3604/4613 [38:27<13:08,  1.28it/s] 78%|███████▊  | 3605/4613 [38:28<12:40,  1.33it/s] 78%|███████▊  | 3606/4613 [38:28<10:32,  1.59it/s] 78%|███████▊  | 3607/4613 [38:29<10:42,  1.56it/s] 78%|███████▊  | 3608/4613 [38:29<11:09,  1.50it/s] 78%|███████▊  | 3609/4613 [38:30<09:02,  1.85it/s] 78%|███████▊  | 3610/4613 [38:30<10:05,  1.66it/s] 78%|███████▊  | 3611/4613 [38:31<10:45,  1.55it/s] 78%|███████▊  | 3612/4613 [38:31<08:23,  1.99it/s] 78%|███████▊  | 3613/4613 [38:32<10:07,  1.65it/s] 78%|███████▊  | 3614/4613 [38:33<10:46,  1.54it/s] 78%|███████▊  | 3615/4613 [38:33<08:25,  1.98it/s] 78%|███████▊  | 3616/4613 [38:34<09:16,  1.79it/s] 78%|███████▊  | 3617/4613 [38:34<07:13,  2.30it/s] 78%|███████▊  | 3618/4613 [38:34<08:34,  1.93it/s] 78%|███████▊  | 3619/4613 [38:35<10:00,  1.66it/s] 78%|███████▊  | 3620/4613 [38:35<07:43,  2.14it/s] 78%|███████▊  | 3621/4613 [38:36<09:19,  1.77it/s] 79%|███████▊  | 3622/4613 [38:36<07:41,  2.15it/s] 79%|███████▊  | 3623/4613 [38:37<08:30,  1.94it/s] 79%|███████▊  | 3624/4613 [38:38<10:20,  1.59it/s] 79%|███████▊  | 3625/4613 [38:38<08:07,  2.02it/s] 79%|███████▊  | 3626/4613 [38:39<09:19,  1.77it/s] 79%|███████▊  | 3627/4613 [38:40<10:05,  1.63it/s] 79%|███████▊  | 3628/4613 [38:40<08:31,  1.93it/s] 79%|███████▊  | 3629/4613 [38:41<08:59,  1.82it/s] 79%|███████▊  | 3630/4613 [38:42<14:02,  1.17it/s] 79%|███████▊  | 3631/4613 [38:42<10:35,  1.55it/s] 79%|███████▊  | 3632/4613 [38:44<14:51,  1.10it/s] 79%|███████▉  | 3633/4613 [38:44<11:25,  1.43it/s] 79%|███████▉  | 3634/4613 [38:45<11:24,  1.43it/s] 79%|███████▉  | 3635/4613 [38:46<15:54,  1.02it/s] 79%|███████▉  | 3636/4613 [38:47<12:14,  1.33it/s] 79%|███████▉  | 3637/4613 [38:47<11:52,  1.37it/s] 79%|███████▉  | 3638/4613 [38:48<12:19,  1.32it/s] 79%|███████▉  | 3639/4613 [38:48<09:29,  1.71it/s] 79%|███████▉  | 3640/4613 [38:49<10:16,  1.58it/s] 79%|███████▉  | 3641/4613 [38:50<10:49,  1.50it/s] 79%|███████▉  | 3642/4613 [38:50<08:23,  1.93it/s] 79%|███████▉  | 3643/4613 [38:51<09:25,  1.71it/s] 79%|███████▉  | 3644/4613 [38:51<10:33,  1.53it/s] 79%|███████▉  | 3645/4613 [38:52<08:09,  1.98it/s] 79%|███████▉  | 3646/4613 [38:52<09:35,  1.68it/s] 79%|███████▉  | 3647/4613 [38:53<07:36,  2.12it/s] 79%|███████▉  | 3648/4613 [38:53<08:43,  1.84it/s] 79%|███████▉  | 3649/4613 [38:54<10:04,  1.60it/s] 79%|███████▉  | 3650/4613 [38:55<10:23,  1.54it/s] 79%|███████▉  | 3651/4613 [38:55<08:15,  1.94it/s] 79%|███████▉  | 3652/4613 [38:56<09:47,  1.64it/s] 79%|███████▉  | 3653/4613 [38:57<10:23,  1.54it/s] 79%|███████▉  | 3654/4613 [38:58<14:47,  1.08it/s] 79%|███████▉  | 3655/4613 [38:59<14:24,  1.11it/s] 79%|███████▉  | 3656/4613 [38:59<11:26,  1.39it/s] 79%|███████▉  | 3657/4613 [39:00<11:12,  1.42it/s] 79%|███████▉  | 3658/4613 [39:01<12:02,  1.32it/s] 79%|███████▉  | 3659/4613 [39:01<09:19,  1.70it/s] 79%|███████▉  | 3660/4613 [39:02<09:57,  1.60it/s] 79%|███████▉  | 3661/4613 [39:03<10:54,  1.46it/s] 79%|███████▉  | 3662/4613 [39:03<08:40,  1.83it/s] 79%|███████▉  | 3663/4613 [39:04<09:13,  1.72it/s] 79%|███████▉  | 3664/4613 [39:04<10:03,  1.57it/s] 79%|███████▉  | 3665/4613 [39:05<10:48,  1.46it/s] 79%|███████▉  | 3666/4613 [39:05<08:34,  1.84it/s] 79%|███████▉  | 3667/4613 [39:06<09:44,  1.62it/s] 80%|███████▉  | 3668/4613 [39:09<18:36,  1.18s/it] 80%|███████▉  | 3669/4613 [39:09<16:45,  1.07s/it] 80%|███████▉  | 3670/4613 [39:10<13:23,  1.17it/s] 80%|███████▉  | 3671/4613 [39:10<12:41,  1.24it/s] 80%|███████▉  | 3672/4613 [39:11<12:25,  1.26it/s] 80%|███████▉  | 3673/4613 [39:11<09:34,  1.64it/s] 80%|███████▉  | 3674/4613 [39:12<09:49,  1.59it/s] 80%|███████▉  | 3675/4613 [39:13<10:32,  1.48it/s] 80%|███████▉  | 3676/4613 [39:14<11:33,  1.35it/s] 80%|███████▉  | 3677/4613 [39:14<09:16,  1.68it/s] 80%|███████▉  | 3678/4613 [39:15<09:53,  1.58it/s] 80%|███████▉  | 3679/4613 [39:15<10:02,  1.55it/s] 80%|███████▉  | 3680/4613 [39:16<07:57,  1.96it/s] 80%|███████▉  | 3681/4613 [39:16<09:03,  1.71it/s] 80%|███████▉  | 3682/4613 [39:16<07:08,  2.17it/s] 80%|███████▉  | 3683/4613 [39:17<08:54,  1.74it/s] 80%|███████▉  | 3684/4613 [39:18<09:42,  1.59it/s] 80%|███████▉  | 3685/4613 [39:19<10:12,  1.51it/s] 80%|███████▉  | 3686/4613 [39:19<08:13,  1.88it/s] 80%|███████▉  | 3687/4613 [39:20<09:10,  1.68it/s] 80%|███████▉  | 3688/4613 [39:21<10:22,  1.48it/s] 80%|███████▉  | 3689/4613 [39:21<10:50,  1.42it/s] 80%|███████▉  | 3690/4613 [39:22<08:15,  1.86it/s] 80%|████████  | 3691/4613 [39:22<09:03,  1.70it/s] 80%|████████  | 3692/4613 [39:23<07:22,  2.08it/s] 80%|████████  | 3693/4613 [39:23<08:16,  1.85it/s] 80%|████████  | 3694/4613 [39:23<06:28,  2.37it/s] 80%|████████  | 3695/4613 [39:24<07:59,  1.91it/s] 80%|████████  | 3696/4613 [39:25<10:00,  1.53it/s] 80%|████████  | 3697/4613 [39:26<10:30,  1.45it/s] 80%|████████  | 3698/4613 [39:26<08:18,  1.84it/s] 80%|████████  | 3699/4613 [39:27<08:38,  1.76it/s] 80%|████████  | 3700/4613 [39:27<09:37,  1.58it/s] 80%|████████  | 3701/4613 [39:28<07:38,  1.99it/s] 80%|████████  | 3702/4613 [39:28<08:54,  1.71it/s] 80%|████████  | 3703/4613 [39:29<07:18,  2.08it/s] 80%|████████  | 3704/4613 [39:29<08:13,  1.84it/s] 80%|████████  | 3705/4613 [39:30<09:24,  1.61it/s] 80%|████████  | 3706/4613 [39:31<09:43,  1.55it/s] 80%|████████  | 3707/4613 [39:31<07:26,  2.03it/s] 80%|████████  | 3708/4613 [39:32<08:44,  1.73it/s] 80%|████████  | 3709/4613 [39:32<06:52,  2.19it/s] 80%|████████  | 3710/4613 [39:33<08:20,  1.80it/s] 80%|████████  | 3711/4613 [39:34<12:32,  1.20it/s] 80%|████████  | 3712/4613 [39:34<09:31,  1.58it/s] 80%|████████  | 3713/4613 [39:35<09:50,  1.52it/s] 81%|████████  | 3714/4613 [39:35<07:55,  1.89it/s] 81%|████████  | 3715/4613 [39:36<09:17,  1.61it/s] 81%|████████  | 3716/4613 [39:37<09:46,  1.53it/s] 81%|████████  | 3717/4613 [39:37<07:45,  1.92it/s] 81%|████████  | 3718/4613 [39:38<08:25,  1.77it/s] 81%|████████  | 3719/4613 [39:38<06:57,  2.14it/s] 81%|████████  | 3720/4613 [39:39<07:55,  1.88it/s] 81%|████████  | 3721/4613 [39:40<12:41,  1.17it/s] 81%|████████  | 3722/4613 [39:40<09:42,  1.53it/s] 81%|████████  | 3723/4613 [39:41<10:41,  1.39it/s] 81%|████████  | 3724/4613 [39:42<10:33,  1.40it/s] 81%|████████  | 3725/4613 [39:43<11:09,  1.33it/s] 81%|████████  | 3726/4613 [39:44<10:58,  1.35it/s] 81%|████████  | 3727/4613 [39:44<08:26,  1.75it/s] 81%|████████  | 3728/4613 [39:44<09:07,  1.62it/s] 81%|████████  | 3729/4613 [39:45<07:19,  2.01it/s] 81%|████████  | 3730/4613 [39:45<08:13,  1.79it/s] 81%|████████  | 3731/4613 [39:46<06:32,  2.25it/s] 81%|████████  | 3732/4613 [39:46<07:46,  1.89it/s] 81%|████████  | 3733/4613 [39:47<09:05,  1.61it/s] 81%|████████  | 3734/4613 [39:47<07:01,  2.09it/s] 81%|████████  | 3735/4613 [39:48<08:12,  1.78it/s] 81%|████████  | 3736/4613 [39:49<09:18,  1.57it/s] 81%|████████  | 3737/4613 [39:49<07:34,  1.93it/s] 81%|████████  | 3738/4613 [39:50<08:20,  1.75it/s] 81%|████████  | 3739/4613 [39:51<09:07,  1.60it/s] 81%|████████  | 3740/4613 [39:51<07:47,  1.87it/s] 81%|████████  | 3741/4613 [39:52<11:29,  1.27it/s] 81%|████████  | 3742/4613 [39:53<09:23,  1.55it/s] 81%|████████  | 3743/4613 [39:53<09:13,  1.57it/s] 81%|████████  | 3744/4613 [39:54<09:51,  1.47it/s] 81%|████████  | 3745/4613 [39:54<07:43,  1.87it/s] 81%|████████  | 3746/4613 [39:56<12:14,  1.18it/s] 81%|████████  | 3747/4613 [39:56<11:35,  1.25it/s] 81%|████████  | 3748/4613 [39:57<11:44,  1.23it/s] 81%|████████▏ | 3749/4613 [39:58<09:11,  1.57it/s] 81%|████████▏ | 3750/4613 [39:58<09:15,  1.55it/s] 81%|████████▏ | 3751/4613 [39:59<09:47,  1.47it/s] 81%|████████▏ | 3752/4613 [39:59<08:14,  1.74it/s] 81%|████████▏ | 3753/4613 [40:00<08:32,  1.68it/s] 81%|████████▏ | 3754/4613 [40:01<09:28,  1.51it/s] 81%|████████▏ | 3755/4613 [40:01<07:28,  1.91it/s] 81%|████████▏ | 3756/4613 [40:02<08:00,  1.78it/s] 81%|████████▏ | 3757/4613 [40:02<06:32,  2.18it/s] 81%|████████▏ | 3758/4613 [40:02<07:30,  1.90it/s] 81%|████████▏ | 3759/4613 [40:03<09:18,  1.53it/s] 82%|████████▏ | 3760/4613 [40:04<09:31,  1.49it/s] 82%|████████▏ | 3761/4613 [40:04<07:59,  1.78it/s] 82%|████████▏ | 3762/4613 [40:05<08:34,  1.65it/s] 82%|████████▏ | 3763/4613 [40:06<08:56,  1.58it/s] 82%|████████▏ | 3764/4613 [40:06<06:59,  2.02it/s] 82%|████████▏ | 3765/4613 [40:07<07:47,  1.81it/s] 82%|████████▏ | 3766/4613 [40:08<09:11,  1.53it/s] 82%|████████▏ | 3767/4613 [40:08<07:07,  1.98it/s] 82%|████████▏ | 3768/4613 [40:08<08:06,  1.74it/s] 82%|████████▏ | 3769/4613 [40:09<08:45,  1.61it/s] 82%|████████▏ | 3770/4613 [40:10<07:24,  1.90it/s] 82%|████████▏ | 3771/4613 [40:10<08:06,  1.73it/s] 82%|████████▏ | 3772/4613 [40:10<06:33,  2.14it/s] 82%|████████▏ | 3773/4613 [40:11<07:50,  1.78it/s] 82%|████████▏ | 3774/4613 [40:12<08:19,  1.68it/s] 82%|████████▏ | 3775/4613 [40:12<06:38,  2.10it/s] 82%|████████▏ | 3776/4613 [40:14<10:55,  1.28it/s] 82%|████████▏ | 3777/4613 [40:14<08:27,  1.65it/s] 82%|████████▏ | 3778/4613 [40:14<08:42,  1.60it/s] 82%|████████▏ | 3779/4613 [40:15<09:38,  1.44it/s] 82%|████████▏ | 3780/4613 [40:15<07:22,  1.88it/s] 82%|████████▏ | 3781/4613 [40:16<08:03,  1.72it/s] 82%|████████▏ | 3782/4613 [40:16<06:23,  2.17it/s] 82%|████████▏ | 3783/4613 [40:17<07:18,  1.89it/s] 82%|████████▏ | 3784/4613 [40:17<05:44,  2.41it/s] 82%|████████▏ | 3785/4613 [40:18<06:58,  1.98it/s] 82%|████████▏ | 3786/4613 [40:19<08:14,  1.67it/s] 82%|████████▏ | 3787/4613 [40:19<06:58,  1.97it/s] 82%|████████▏ | 3788/4613 [40:20<07:50,  1.75it/s] 82%|████████▏ | 3789/4613 [40:21<08:43,  1.57it/s] 82%|████████▏ | 3790/4613 [40:21<07:00,  1.96it/s] 82%|████████▏ | 3791/4613 [40:21<07:50,  1.75it/s] 82%|████████▏ | 3792/4613 [40:22<08:22,  1.63it/s] 82%|████████▏ | 3793/4613 [40:23<09:09,  1.49it/s] 82%|████████▏ | 3794/4613 [40:23<07:17,  1.87it/s] 82%|████████▏ | 3795/4613 [40:24<08:38,  1.58it/s] 82%|████████▏ | 3796/4613 [40:25<08:52,  1.53it/s] 82%|████████▏ | 3797/4613 [40:25<07:07,  1.91it/s] 82%|████████▏ | 3798/4613 [40:26<07:44,  1.75it/s] 82%|████████▏ | 3799/4613 [40:26<08:34,  1.58it/s] 82%|████████▏ | 3800/4613 [40:27<06:40,  2.03it/s] 82%|████████▏ | 3801/4613 [40:27<08:05,  1.67it/s] 82%|████████▏ | 3802/4613 [40:28<08:25,  1.61it/s] 82%|████████▏ | 3803/4613 [40:29<09:12,  1.47it/s] 82%|████████▏ | 3804/4613 [40:29<07:08,  1.89it/s] 82%|████████▏ | 3805/4613 [40:29<05:47,  2.32it/s] 83%|████████▎ | 3806/4613 [40:30<06:46,  1.99it/s] 83%|████████▎ | 3807/4613 [40:32<11:34,  1.16it/s] 83%|████████▎ | 3808/4613 [40:32<10:55,  1.23it/s] 83%|████████▎ | 3809/4613 [40:33<11:16,  1.19it/s] 83%|████████▎ | 3810/4613 [40:34<08:49,  1.52it/s] 83%|████████▎ | 3811/4613 [40:34<09:10,  1.46it/s] 83%|████████▎ | 3812/4613 [40:35<09:05,  1.47it/s] 83%|████████▎ | 3813/4613 [40:35<07:13,  1.85it/s] 83%|████████▎ | 3814/4613 [40:36<07:59,  1.67it/s] 83%|████████▎ | 3815/4613 [40:36<06:24,  2.08it/s] 83%|████████▎ | 3816/4613 [40:37<07:05,  1.87it/s] 83%|████████▎ | 3817/4613 [40:37<05:52,  2.26it/s] 83%|████████▎ | 3818/4613 [40:38<07:10,  1.84it/s] 83%|████████▎ | 3819/4613 [40:38<07:53,  1.68it/s] 83%|████████▎ | 3820/4613 [40:39<06:24,  2.07it/s] 83%|████████▎ | 3821/4613 [40:40<09:49,  1.34it/s] 83%|████████▎ | 3822/4613 [40:40<07:43,  1.71it/s] 83%|████████▎ | 3823/4613 [40:41<08:05,  1.63it/s] 83%|████████▎ | 3824/4613 [40:42<09:13,  1.42it/s] 83%|████████▎ | 3825/4613 [40:43<10:17,  1.28it/s] 83%|████████▎ | 3826/4613 [40:44<10:09,  1.29it/s] 83%|████████▎ | 3827/4613 [40:44<09:55,  1.32it/s] 83%|████████▎ | 3828/4613 [40:45<10:27,  1.25it/s] 83%|████████▎ | 3829/4613 [40:45<08:28,  1.54it/s] 83%|████████▎ | 3830/4613 [40:47<11:23,  1.14it/s] 83%|████████▎ | 3831/4613 [40:47<09:05,  1.43it/s] 83%|████████▎ | 3832/4613 [40:48<08:48,  1.48it/s] 83%|████████▎ | 3833/4613 [40:49<09:13,  1.41it/s] 83%|████████▎ | 3834/4613 [40:49<07:19,  1.77it/s] 83%|████████▎ | 3835/4613 [40:50<08:06,  1.60it/s] 83%|████████▎ | 3836/4613 [40:50<08:32,  1.52it/s] 83%|████████▎ | 3837/4613 [40:51<06:50,  1.89it/s] 83%|████████▎ | 3838/4613 [40:51<07:41,  1.68it/s] 83%|████████▎ | 3839/4613 [40:52<08:57,  1.44it/s] 83%|████████▎ | 3840/4613 [40:53<08:52,  1.45it/s] 83%|████████▎ | 3841/4613 [40:54<08:58,  1.43it/s] 83%|████████▎ | 3842/4613 [40:54<09:38,  1.33it/s] 83%|████████▎ | 3843/4613 [40:55<09:57,  1.29it/s] 83%|████████▎ | 3844/4613 [40:56<07:54,  1.62it/s] 83%|████████▎ | 3845/4613 [40:56<08:13,  1.56it/s] 83%|████████▎ | 3846/4613 [40:58<12:22,  1.03it/s] 83%|████████▎ | 3847/4613 [40:59<11:40,  1.09it/s] 83%|████████▎ | 3848/4613 [40:59<10:53,  1.17it/s] 83%|████████▎ | 3849/4613 [41:00<08:14,  1.54it/s] 83%|████████▎ | 3850/4613 [41:00<08:16,  1.54it/s] 83%|████████▎ | 3851/4613 [41:01<09:58,  1.27it/s] 84%|████████▎ | 3852/4613 [41:02<09:34,  1.33it/s] 84%|████████▎ | 3853/4613 [41:03<09:22,  1.35it/s] 84%|████████▎ | 3854/4613 [41:03<07:11,  1.76it/s] 84%|████████▎ | 3855/4613 [41:04<08:05,  1.56it/s] 84%|████████▎ | 3856/4613 [41:05<08:24,  1.50it/s] 84%|████████▎ | 3857/4613 [41:05<06:27,  1.95it/s] 84%|████████▎ | 3858/4613 [41:05<07:05,  1.77it/s] 84%|████████▎ | 3859/4613 [41:05<05:30,  2.28it/s] 84%|████████▎ | 3860/4613 [41:06<06:42,  1.87it/s] 84%|████████▎ | 3861/4613 [41:06<05:22,  2.33it/s] 84%|████████▎ | 3862/4613 [41:07<06:32,  1.91it/s] 84%|████████▎ | 3863/4613 [41:07<05:33,  2.25it/s] 84%|████████▍ | 3864/4613 [41:08<06:53,  1.81it/s] 84%|████████▍ | 3865/4613 [41:10<09:56,  1.25it/s] 84%|████████▍ | 3866/4613 [41:10<07:31,  1.66it/s] 84%|████████▍ | 3867/4613 [41:10<07:57,  1.56it/s] 84%|████████▍ | 3868/4613 [41:11<08:43,  1.42it/s] 84%|████████▍ | 3869/4613 [41:12<09:08,  1.36it/s] 84%|████████▍ | 3870/4613 [41:12<07:21,  1.68it/s] 84%|████████▍ | 3871/4613 [41:13<07:50,  1.58it/s] 84%|████████▍ | 3872/4613 [41:14<08:14,  1.50it/s] 84%|████████▍ | 3873/4613 [41:15<08:49,  1.40it/s] 84%|████████▍ | 3874/4613 [41:16<09:44,  1.26it/s] 84%|████████▍ | 3875/4613 [41:16<09:33,  1.29it/s] 84%|████████▍ | 3876/4613 [41:17<09:33,  1.28it/s] 84%|████████▍ | 3877/4613 [41:18<09:40,  1.27it/s] 84%|████████▍ | 3878/4613 [41:18<07:25,  1.65it/s] 84%|████████▍ | 3879/4613 [41:19<08:09,  1.50it/s] 84%|████████▍ | 3880/4613 [41:20<09:01,  1.35it/s] 84%|████████▍ | 3881/4613 [41:21<08:54,  1.37it/s] 84%|████████▍ | 3882/4613 [41:21<06:55,  1.76it/s] 84%|████████▍ | 3883/4613 [41:22<07:46,  1.56it/s] 84%|████████▍ | 3884/4613 [41:22<08:32,  1.42it/s] 84%|████████▍ | 3885/4613 [41:23<08:26,  1.44it/s] 84%|████████▍ | 3886/4613 [41:24<09:00,  1.35it/s] 84%|████████▍ | 3887/4613 [41:24<06:54,  1.75it/s] 84%|████████▍ | 3888/4613 [41:25<07:56,  1.52it/s] 84%|████████▍ | 3889/4613 [41:26<08:05,  1.49it/s] 84%|████████▍ | 3890/4613 [41:27<11:20,  1.06it/s] 84%|████████▍ | 3891/4613 [41:27<08:25,  1.43it/s] 84%|████████▍ | 3892/4613 [41:28<08:53,  1.35it/s] 84%|████████▍ | 3893/4613 [41:28<06:53,  1.74it/s] 84%|████████▍ | 3894/4613 [41:29<07:18,  1.64it/s] 84%|████████▍ | 3895/4613 [41:30<07:40,  1.56it/s] 84%|████████▍ | 3896/4613 [41:31<08:18,  1.44it/s] 84%|████████▍ | 3897/4613 [41:31<06:55,  1.72it/s] 85%|████████▍ | 3898/4613 [41:32<07:14,  1.64it/s] 85%|████████▍ | 3899/4613 [41:32<05:38,  2.11it/s] 85%|████████▍ | 3900/4613 [41:33<06:35,  1.80it/s] 85%|████████▍ | 3901/4613 [41:33<07:37,  1.56it/s] 85%|████████▍ | 3902/4613 [41:34<06:04,  1.95it/s] 85%|████████▍ | 3903/4613 [41:34<06:29,  1.82it/s] 85%|████████▍ | 3904/4613 [41:35<07:23,  1.60it/s] 85%|████████▍ | 3905/4613 [41:36<07:48,  1.51it/s] 85%|████████▍ | 3906/4613 [41:36<06:11,  1.90it/s] 85%|████████▍ | 3907/4613 [41:37<07:10,  1.64it/s] 85%|████████▍ | 3908/4613 [41:38<08:25,  1.40it/s] 85%|████████▍ | 3909/4613 [41:39<11:36,  1.01it/s] 85%|████████▍ | 3910/4613 [41:40<10:55,  1.07it/s] 85%|████████▍ | 3911/4613 [41:40<08:21,  1.40it/s] 85%|████████▍ | 3912/4613 [41:41<08:39,  1.35it/s] 85%|████████▍ | 3913/4613 [41:42<08:42,  1.34it/s] 85%|████████▍ | 3914/4613 [41:43<11:10,  1.04it/s] 85%|████████▍ | 3915/4613 [41:44<08:33,  1.36it/s] 85%|████████▍ | 3916/4613 [41:44<08:30,  1.36it/s] 85%|████████▍ | 3917/4613 [41:45<06:27,  1.80it/s] 85%|████████▍ | 3918/4613 [41:45<07:05,  1.63it/s] 85%|████████▍ | 3919/4613 [41:46<07:41,  1.50it/s] 85%|████████▍ | 3920/4613 [41:46<06:26,  1.79it/s] 85%|████████▍ | 3921/4613 [41:47<06:34,  1.76it/s] 85%|████████▌ | 3922/4613 [41:48<07:24,  1.55it/s] 85%|████████▌ | 3923/4613 [41:49<07:54,  1.45it/s] 85%|████████▌ | 3924/4613 [41:49<06:05,  1.88it/s] 85%|████████▌ | 3925/4613 [41:49<05:05,  2.25it/s] 85%|████████▌ | 3926/4613 [41:50<05:36,  2.04it/s] 85%|████████▌ | 3927/4613 [41:50<04:37,  2.47it/s] 85%|████████▌ | 3928/4613 [41:51<06:31,  1.75it/s] 85%|████████▌ | 3929/4613 [41:51<06:48,  1.67it/s] 85%|████████▌ | 3930/4613 [41:52<07:38,  1.49it/s] 85%|████████▌ | 3931/4613 [41:53<07:46,  1.46it/s] 85%|████████▌ | 3932/4613 [41:53<06:11,  1.83it/s] 85%|████████▌ | 3933/4613 [41:54<07:01,  1.61it/s] 85%|████████▌ | 3934/4613 [41:55<07:10,  1.58it/s] 85%|████████▌ | 3935/4613 [41:55<06:00,  1.88it/s] 85%|████████▌ | 3936/4613 [41:56<06:45,  1.67it/s] 85%|████████▌ | 3937/4613 [41:56<07:22,  1.53it/s] 85%|████████▌ | 3938/4613 [41:57<08:18,  1.35it/s] 85%|████████▌ | 3939/4613 [41:58<08:06,  1.38it/s] 85%|████████▌ | 3940/4613 [41:58<06:52,  1.63it/s] 85%|████████▌ | 3941/4613 [41:59<06:54,  1.62it/s] 85%|████████▌ | 3942/4613 [41:59<05:27,  2.05it/s] 85%|████████▌ | 3943/4613 [42:00<06:13,  1.79it/s] 85%|████████▌ | 3944/4613 [42:00<05:06,  2.19it/s] 86%|████████▌ | 3945/4613 [42:01<05:46,  1.93it/s] 86%|████████▌ | 3946/4613 [42:02<06:19,  1.76it/s] 86%|████████▌ | 3947/4613 [42:02<05:11,  2.14it/s] 86%|████████▌ | 3948/4613 [42:03<06:37,  1.67it/s] 86%|████████▌ | 3949/4613 [42:03<07:00,  1.58it/s] 86%|████████▌ | 3950/4613 [42:04<07:07,  1.55it/s] 86%|████████▌ | 3951/4613 [42:04<05:28,  2.02it/s] 86%|████████▌ | 3952/4613 [42:05<06:20,  1.74it/s] 86%|████████▌ | 3953/4613 [42:06<07:08,  1.54it/s] 86%|████████▌ | 3954/4613 [42:07<07:31,  1.46it/s] 86%|████████▌ | 3955/4613 [42:07<06:17,  1.74it/s] 86%|████████▌ | 3956/4613 [42:08<06:33,  1.67it/s] 86%|████████▌ | 3957/4613 [42:08<07:14,  1.51it/s] 86%|████████▌ | 3958/4613 [42:09<05:34,  1.96it/s] 86%|████████▌ | 3959/4613 [42:09<06:13,  1.75it/s] 86%|████████▌ | 3960/4613 [42:10<07:00,  1.55it/s] 86%|████████▌ | 3961/4613 [42:10<05:23,  2.02it/s] 86%|████████▌ | 3962/4613 [42:11<06:00,  1.81it/s] 86%|████████▌ | 3963/4613 [42:11<04:52,  2.22it/s] 86%|████████▌ | 3964/4613 [42:12<05:51,  1.85it/s] 86%|████████▌ | 3965/4613 [42:12<04:43,  2.29it/s] 86%|████████▌ | 3966/4613 [42:13<05:29,  1.96it/s] 86%|████████▌ | 3967/4613 [42:15<11:37,  1.08s/it] 86%|████████▌ | 3968/4613 [42:15<08:39,  1.24it/s] 86%|████████▌ | 3969/4613 [42:17<10:48,  1.01s/it] 86%|████████▌ | 3970/4613 [42:17<07:58,  1.35it/s] 86%|████████▌ | 3971/4613 [42:17<06:08,  1.74it/s] 86%|████████▌ | 3972/4613 [42:18<06:57,  1.54it/s] 86%|████████▌ | 3973/4613 [42:19<07:37,  1.40it/s] 86%|████████▌ | 3974/4613 [42:20<07:43,  1.38it/s] 86%|████████▌ | 3975/4613 [42:20<07:34,  1.40it/s] 86%|████████▌ | 3976/4613 [42:20<06:08,  1.73it/s] 86%|████████▌ | 3977/4613 [42:21<06:30,  1.63it/s] 86%|████████▌ | 3978/4613 [42:22<06:46,  1.56it/s] 86%|████████▋ | 3979/4613 [42:22<05:20,  1.98it/s] 86%|████████▋ | 3980/4613 [42:23<06:16,  1.68it/s] 86%|████████▋ | 3981/4613 [42:24<06:32,  1.61it/s] 86%|████████▋ | 3982/4613 [42:24<05:26,  1.93it/s] 86%|████████▋ | 3983/4613 [42:25<06:00,  1.75it/s] 86%|████████▋ | 3984/4613 [42:25<04:40,  2.24it/s] 86%|████████▋ | 3985/4613 [42:25<05:26,  1.92it/s] 86%|████████▋ | 3986/4613 [42:26<04:24,  2.37it/s] 86%|████████▋ | 3987/4613 [42:26<05:30,  1.90it/s] 86%|████████▋ | 3988/4613 [42:27<06:16,  1.66it/s] 86%|████████▋ | 3989/4613 [42:28<06:46,  1.54it/s] 86%|████████▋ | 3990/4613 [42:28<05:11,  2.00it/s] 87%|████████▋ | 3991/4613 [42:29<05:58,  1.73it/s] 87%|████████▋ | 3992/4613 [42:29<04:42,  2.20it/s] 87%|████████▋ | 3993/4613 [42:30<05:37,  1.84it/s] 87%|████████▋ | 3994/4613 [42:30<06:16,  1.64it/s] 87%|████████▋ | 3995/4613 [42:31<05:01,  2.05it/s] 87%|████████▋ | 3996/4613 [42:31<05:28,  1.88it/s] 87%|████████▋ | 3997/4613 [42:32<04:31,  2.26it/s] 87%|████████▋ | 3998/4613 [42:32<05:23,  1.90it/s] 87%|████████▋ | 3999/4613 [42:33<05:58,  1.71it/s] 87%|████████▋ | 4000/4613 [42:33<05:09,  1.98it/s] 87%|████████▋ | 4001/4613 [42:34<06:02,  1.69it/s] 87%|████████▋ | 4002/4613 [42:35<06:23,  1.59it/s] 87%|████████▋ | 4003/4613 [42:36<06:52,  1.48it/s] 87%|████████▋ | 4004/4613 [42:36<05:14,  1.94it/s] 87%|████████▋ | 4005/4613 [42:37<06:31,  1.55it/s] 87%|████████▋ | 4006/4613 [42:39<11:05,  1.10s/it] 87%|████████▋ | 4007/4613 [42:39<08:14,  1.22it/s] 87%|████████▋ | 4008/4613 [42:40<08:37,  1.17it/s] 87%|████████▋ | 4009/4613 [42:42<13:27,  1.34s/it] 87%|████████▋ | 4010/4613 [42:43<11:36,  1.15s/it] 87%|████████▋ | 4011/4613 [42:44<10:56,  1.09s/it] 87%|████████▋ | 4012/4613 [42:45<09:45,  1.03it/s] 87%|████████▋ | 4013/4613 [42:45<07:29,  1.33it/s] 87%|████████▋ | 4014/4613 [42:46<07:30,  1.33it/s] 87%|████████▋ | 4015/4613 [42:47<08:09,  1.22it/s] 87%|████████▋ | 4016/4613 [42:47<07:57,  1.25it/s] 87%|████████▋ | 4017/4613 [42:48<07:46,  1.28it/s] 87%|████████▋ | 4018/4613 [42:50<10:20,  1.04s/it] 87%|████████▋ | 4019/4613 [42:51<09:28,  1.05it/s] 87%|████████▋ | 4020/4613 [42:51<07:09,  1.38it/s] 87%|████████▋ | 4021/4613 [42:52<07:10,  1.37it/s] 87%|████████▋ | 4022/4613 [42:52<07:31,  1.31it/s] 87%|████████▋ | 4023/4613 [42:53<05:48,  1.69it/s] 87%|████████▋ | 4024/4613 [42:53<06:03,  1.62it/s] 87%|████████▋ | 4025/4613 [42:53<04:43,  2.07it/s] 87%|████████▋ | 4026/4613 [42:54<05:23,  1.82it/s] 87%|████████▋ | 4027/4613 [42:54<04:22,  2.23it/s] 87%|████████▋ | 4028/4613 [42:55<05:12,  1.87it/s] 87%|████████▋ | 4029/4613 [42:56<05:43,  1.70it/s] 87%|████████▋ | 4030/4613 [42:56<04:26,  2.19it/s] 87%|████████▋ | 4031/4613 [42:57<05:09,  1.88it/s] 87%|████████▋ | 4032/4613 [42:58<06:14,  1.55it/s] 87%|████████▋ | 4033/4613 [42:58<05:04,  1.90it/s] 87%|████████▋ | 4034/4613 [42:58<05:26,  1.78it/s] 87%|████████▋ | 4035/4613 [42:59<05:55,  1.63it/s] 87%|████████▋ | 4036/4613 [43:00<06:30,  1.48it/s] 88%|████████▊ | 4037/4613 [43:00<05:16,  1.82it/s] 88%|████████▊ | 4038/4613 [43:01<05:42,  1.68it/s] 88%|████████▊ | 4039/4613 [43:01<04:44,  2.01it/s] 88%|████████▊ | 4040/4613 [43:02<05:22,  1.78it/s] 88%|████████▊ | 4041/4613 [43:03<08:03,  1.18it/s] 88%|████████▊ | 4042/4613 [43:04<06:02,  1.58it/s] 88%|████████▊ | 4043/4613 [43:04<06:10,  1.54it/s] 88%|████████▊ | 4044/4613 [43:04<04:43,  2.01it/s] 88%|████████▊ | 4045/4613 [43:06<07:37,  1.24it/s] 88%|████████▊ | 4046/4613 [43:07<07:51,  1.20it/s] 88%|████████▊ | 4047/4613 [43:07<06:01,  1.57it/s] 88%|████████▊ | 4048/4613 [43:08<06:00,  1.57it/s] 88%|████████▊ | 4049/4613 [43:09<06:32,  1.44it/s] 88%|████████▊ | 4050/4613 [43:09<05:05,  1.85it/s] 88%|████████▊ | 4051/4613 [43:09<05:34,  1.68it/s] 88%|████████▊ | 4052/4613 [43:12<11:23,  1.22s/it] 88%|████████▊ | 4053/4613 [43:12<08:28,  1.10it/s] 88%|████████▊ | 4054/4613 [43:13<07:52,  1.18it/s] 88%|████████▊ | 4055/4613 [43:13<05:57,  1.56it/s] 88%|████████▊ | 4056/4613 [43:14<06:16,  1.48it/s] 88%|████████▊ | 4057/4613 [43:15<06:27,  1.43it/s] 88%|████████▊ | 4058/4613 [43:15<04:54,  1.89it/s] 88%|████████▊ | 4059/4613 [43:15<04:02,  2.29it/s] 88%|████████▊ | 4060/4613 [43:16<04:48,  1.92it/s] 88%|████████▊ | 4061/4613 [43:17<05:40,  1.62it/s] 88%|████████▊ | 4062/4613 [43:17<05:56,  1.54it/s] 88%|████████▊ | 4063/4613 [43:18<06:21,  1.44it/s] 88%|████████▊ | 4064/4613 [43:18<04:54,  1.86it/s] 88%|████████▊ | 4065/4613 [43:19<05:40,  1.61it/s] 88%|████████▊ | 4066/4613 [43:19<04:39,  1.96it/s] 88%|████████▊ | 4067/4613 [43:20<05:20,  1.70it/s] 88%|████████▊ | 4068/4613 [43:21<06:05,  1.49it/s] 88%|████████▊ | 4069/4613 [43:22<06:06,  1.48it/s] 88%|████████▊ | 4070/4613 [43:22<04:44,  1.91it/s] 88%|████████▊ | 4071/4613 [43:23<05:13,  1.73it/s] 88%|████████▊ | 4072/4613 [43:23<04:02,  2.23it/s] 88%|████████▊ | 4073/4613 [43:24<07:09,  1.26it/s] 88%|████████▊ | 4074/4613 [43:25<07:04,  1.27it/s] 88%|████████▊ | 4075/4613 [43:26<07:09,  1.25it/s] 88%|████████▊ | 4076/4613 [43:27<07:32,  1.19it/s] 88%|████████▊ | 4077/4613 [43:27<05:55,  1.51it/s] 88%|████████▊ | 4078/4613 [43:28<06:09,  1.45it/s] 88%|████████▊ | 4079/4613 [43:29<06:12,  1.43it/s] 88%|████████▊ | 4080/4613 [43:29<06:41,  1.33it/s] 88%|████████▊ | 4081/4613 [43:30<05:16,  1.68it/s] 88%|████████▊ | 4082/4613 [43:30<05:29,  1.61it/s] 89%|████████▊ | 4083/4613 [43:31<05:53,  1.50it/s] 89%|████████▊ | 4084/4613 [43:32<06:19,  1.39it/s] 89%|████████▊ | 4085/4613 [43:33<06:34,  1.34it/s] 89%|████████▊ | 4086/4613 [43:33<05:24,  1.62it/s] 89%|████████▊ | 4087/4613 [43:34<05:36,  1.56it/s] 89%|████████▊ | 4088/4613 [43:34<04:32,  1.93it/s] 89%|████████▊ | 4089/4613 [43:35<06:33,  1.33it/s] 89%|████████▊ | 4090/4613 [43:36<05:30,  1.58it/s] 89%|████████▊ | 4091/4613 [43:36<05:30,  1.58it/s] 89%|████████▊ | 4092/4613 [43:36<04:27,  1.95it/s] 89%|████████▊ | 4093/4613 [43:37<05:07,  1.69it/s] 89%|████████▊ | 4094/4613 [43:38<05:28,  1.58it/s] 89%|████████▉ | 4095/4613 [43:39<05:40,  1.52it/s] 89%|████████▉ | 4096/4613 [43:39<04:42,  1.83it/s] 89%|████████▉ | 4097/4613 [43:40<05:15,  1.64it/s] 89%|████████▉ | 4098/4613 [43:40<04:05,  2.09it/s] 89%|████████▉ | 4099/4613 [43:41<06:35,  1.30it/s] 89%|████████▉ | 4100/4613 [43:42<04:58,  1.72it/s] 89%|████████▉ | 4101/4613 [43:42<05:22,  1.59it/s] 89%|████████▉ | 4102/4613 [43:43<04:28,  1.91it/s] 89%|████████▉ | 4103/4613 [43:44<06:44,  1.26it/s] 89%|████████▉ | 4104/4613 [43:45<06:40,  1.27it/s] 89%|████████▉ | 4105/4613 [43:45<05:10,  1.64it/s] 89%|████████▉ | 4106/4613 [43:46<05:24,  1.56it/s] 89%|████████▉ | 4107/4613 [43:46<05:50,  1.44it/s] 89%|████████▉ | 4108/4613 [43:47<06:10,  1.36it/s] 89%|████████▉ | 4109/4613 [43:49<08:38,  1.03s/it] 89%|████████▉ | 4110/4613 [43:49<06:23,  1.31it/s] 89%|████████▉ | 4111/4613 [43:50<06:21,  1.32it/s] 89%|████████▉ | 4112/4613 [43:50<05:00,  1.67it/s] 89%|████████▉ | 4113/4613 [43:51<05:26,  1.53it/s] 89%|████████▉ | 4114/4613 [43:52<05:35,  1.49it/s] 89%|████████▉ | 4115/4613 [43:52<04:22,  1.90it/s] 89%|████████▉ | 4116/4613 [43:53<04:52,  1.70it/s] 89%|████████▉ | 4117/4613 [43:53<03:54,  2.11it/s] 89%|████████▉ | 4118/4613 [43:53<04:32,  1.82it/s] 89%|████████▉ | 4119/4613 [43:54<05:07,  1.61it/s] 89%|████████▉ | 4120/4613 [43:55<05:20,  1.54it/s] 89%|████████▉ | 4121/4613 [43:55<04:10,  1.97it/s] 89%|████████▉ | 4122/4613 [43:56<04:33,  1.79it/s] 89%|████████▉ | 4123/4613 [43:56<03:31,  2.32it/s] 89%|████████▉ | 4124/4613 [43:57<04:39,  1.75it/s] 89%|████████▉ | 4125/4613 [43:58<05:03,  1.61it/s] 89%|████████▉ | 4126/4613 [43:58<03:56,  2.06it/s] 89%|████████▉ | 4127/4613 [43:59<04:45,  1.70it/s] 89%|████████▉ | 4128/4613 [43:59<05:04,  1.59it/s] 90%|████████▉ | 4129/4613 [44:00<04:15,  1.89it/s] 90%|████████▉ | 4130/4613 [44:00<04:32,  1.78it/s] 90%|████████▉ | 4131/4613 [44:00<03:40,  2.18it/s] 90%|████████▉ | 4132/4613 [44:01<04:11,  1.91it/s] 90%|████████▉ | 4133/4613 [44:02<04:57,  1.62it/s] 90%|████████▉ | 4134/4613 [44:02<03:57,  2.02it/s] 90%|████████▉ | 4135/4613 [44:03<04:25,  1.80it/s] 90%|████████▉ | 4136/4613 [44:03<03:39,  2.18it/s] 90%|████████▉ | 4137/4613 [44:04<04:29,  1.77it/s] 90%|████████▉ | 4138/4613 [44:05<04:43,  1.68it/s] 90%|████████▉ | 4139/4613 [44:05<05:20,  1.48it/s] 90%|████████▉ | 4140/4613 [44:06<05:21,  1.47it/s] 90%|████████▉ | 4141/4613 [44:06<04:24,  1.78it/s] 90%|████████▉ | 4142/4613 [44:07<04:51,  1.62it/s] 90%|████████▉ | 4143/4613 [44:08<05:00,  1.57it/s] 90%|████████▉ | 4144/4613 [44:09<05:27,  1.43it/s] 90%|████████▉ | 4145/4613 [44:09<04:19,  1.80it/s] 90%|████████▉ | 4146/4613 [44:10<04:47,  1.63it/s] 90%|████████▉ | 4147/4613 [44:10<05:02,  1.54it/s] 90%|████████▉ | 4148/4613 [44:11<04:15,  1.82it/s] 90%|████████▉ | 4149/4613 [44:11<04:25,  1.75it/s] 90%|████████▉ | 4150/4613 [44:12<04:52,  1.59it/s] 90%|████████▉ | 4151/4613 [44:12<03:54,  1.97it/s] 90%|█████████ | 4152/4613 [44:13<04:34,  1.68it/s] 90%|█████████ | 4153/4613 [44:14<05:09,  1.48it/s] 90%|█████████ | 4154/4613 [44:15<05:11,  1.48it/s] 90%|█████████ | 4155/4613 [44:15<03:59,  1.91it/s] 90%|█████████ | 4156/4613 [44:16<04:30,  1.69it/s] 90%|█████████ | 4157/4613 [44:16<05:10,  1.47it/s] 90%|█████████ | 4158/4613 [44:17<04:13,  1.80it/s] 90%|█████████ | 4159/4613 [44:17<04:25,  1.71it/s] 90%|█████████ | 4160/4613 [44:18<04:41,  1.61it/s] 90%|█████████ | 4161/4613 [44:19<05:36,  1.34it/s] 90%|█████████ | 4162/4613 [44:20<06:01,  1.25it/s] 90%|█████████ | 4163/4613 [44:21<05:41,  1.32it/s] 90%|█████████ | 4164/4613 [44:21<04:32,  1.65it/s] 90%|█████████ | 4165/4613 [44:22<04:47,  1.56it/s] 90%|█████████ | 4166/4613 [44:23<05:10,  1.44it/s] 90%|█████████ | 4167/4613 [44:23<04:07,  1.80it/s] 90%|█████████ | 4168/4613 [44:24<06:12,  1.19it/s] 90%|█████████ | 4169/4613 [44:25<06:11,  1.19it/s] 90%|█████████ | 4170/4613 [44:27<08:16,  1.12s/it] 90%|█████████ | 4171/4613 [44:28<07:16,  1.01it/s] 90%|█████████ | 4172/4613 [44:28<05:32,  1.33it/s] 90%|█████████ | 4173/4613 [44:28<05:15,  1.39it/s] 90%|█████████ | 4174/4613 [44:29<05:22,  1.36it/s] 91%|█████████ | 4175/4613 [44:30<05:34,  1.31it/s] 91%|█████████ | 4176/4613 [44:30<04:15,  1.71it/s] 91%|█████████ | 4177/4613 [44:30<03:25,  2.12it/s] 91%|█████████ | 4178/4613 [44:31<04:05,  1.77it/s] 91%|█████████ | 4179/4613 [44:32<04:19,  1.67it/s] 91%|█████████ | 4180/4613 [44:33<04:43,  1.53it/s] 91%|█████████ | 4181/4613 [44:33<03:58,  1.81it/s] 91%|█████████ | 4182/4613 [44:34<04:28,  1.61it/s] 91%|█████████ | 4183/4613 [44:34<04:33,  1.57it/s] 91%|█████████ | 4184/4613 [44:35<03:32,  2.02it/s] 91%|█████████ | 4185/4613 [44:35<03:55,  1.82it/s] 91%|█████████ | 4186/4613 [44:35<03:13,  2.20it/s] 91%|█████████ | 4187/4613 [44:36<03:47,  1.87it/s] 91%|█████████ | 4188/4613 [44:36<03:03,  2.31it/s] 91%|█████████ | 4189/4613 [44:37<03:29,  2.02it/s] 91%|█████████ | 4190/4613 [44:37<02:53,  2.44it/s] 91%|█████████ | 4191/4613 [44:38<03:32,  1.99it/s] 91%|█████████ | 4192/4613 [44:39<03:57,  1.77it/s] 91%|█████████ | 4193/4613 [44:39<03:26,  2.03it/s] 91%|█████████ | 4194/4613 [44:40<03:52,  1.81it/s] 91%|█████████ | 4195/4613 [44:41<04:44,  1.47it/s] 91%|█████████ | 4196/4613 [44:41<04:40,  1.48it/s] 91%|█████████ | 4197/4613 [44:42<05:09,  1.34it/s] 91%|█████████ | 4198/4613 [44:42<04:00,  1.72it/s] 91%|█████████ | 4199/4613 [44:43<04:14,  1.62it/s] 91%|█████████ | 4200/4613 [44:44<04:22,  1.57it/s] 91%|█████████ | 4201/4613 [44:44<03:47,  1.81it/s] 91%|█████████ | 4202/4613 [44:45<03:58,  1.73it/s] 91%|█████████ | 4203/4613 [44:46<04:26,  1.54it/s] 91%|█████████ | 4204/4613 [44:46<04:48,  1.42it/s] 91%|█████████ | 4205/4613 [44:47<03:40,  1.85it/s] 91%|█████████ | 4206/4613 [44:47<04:00,  1.70it/s] 91%|█████████ | 4207/4613 [44:48<04:27,  1.52it/s] 91%|█████████ | 4208/4613 [44:48<03:36,  1.87it/s] 91%|█████████ | 4209/4613 [44:49<03:58,  1.69it/s] 91%|█████████▏| 4210/4613 [44:49<03:10,  2.11it/s] 91%|█████████▏| 4211/4613 [44:51<05:18,  1.26it/s] 91%|█████████▏| 4212/4613 [44:52<05:19,  1.26it/s] 91%|█████████▏| 4213/4613 [44:52<05:10,  1.29it/s] 91%|█████████▏| 4214/4613 [44:53<03:57,  1.68it/s] 91%|█████████▏| 4215/4613 [44:53<04:25,  1.50it/s] 91%|█████████▏| 4216/4613 [44:54<04:42,  1.41it/s] 91%|█████████▏| 4217/4613 [44:55<04:04,  1.62it/s] 91%|█████████▏| 4218/4613 [44:55<04:04,  1.62it/s] 91%|█████████▏| 4219/4613 [44:56<04:26,  1.48it/s] 91%|█████████▏| 4220/4613 [44:57<04:30,  1.45it/s] 92%|█████████▏| 4221/4613 [44:57<03:33,  1.84it/s] 92%|█████████▏| 4222/4613 [44:58<03:56,  1.65it/s] 92%|█████████▏| 4223/4613 [44:59<04:23,  1.48it/s] 92%|█████████▏| 4224/4613 [44:59<04:30,  1.44it/s] 92%|█████████▏| 4225/4613 [44:59<03:32,  1.83it/s] 92%|█████████▏| 4226/4613 [45:00<03:54,  1.65it/s] 92%|█████████▏| 4227/4613 [45:00<03:02,  2.11it/s] 92%|█████████▏| 4228/4613 [45:01<03:23,  1.89it/s] 92%|█████████▏| 4229/4613 [45:01<02:40,  2.40it/s] 92%|█████████▏| 4230/4613 [45:02<03:36,  1.77it/s] 92%|█████████▏| 4231/4613 [45:03<03:52,  1.64it/s] 92%|█████████▏| 4232/4613 [45:04<04:12,  1.51it/s] 92%|█████████▏| 4233/4613 [45:04<04:23,  1.44it/s] 92%|█████████▏| 4234/4613 [45:05<03:30,  1.80it/s] 92%|█████████▏| 4235/4613 [45:05<03:44,  1.68it/s] 92%|█████████▏| 4236/4613 [45:05<02:58,  2.11it/s] 92%|█████████▏| 4237/4613 [45:06<03:29,  1.79it/s] 92%|█████████▏| 4238/4613 [45:07<03:45,  1.67it/s] 92%|█████████▏| 4239/4613 [45:07<03:03,  2.03it/s] 92%|█████████▏| 4240/4613 [45:08<03:57,  1.57it/s] 92%|█████████▏| 4241/4613 [45:09<04:10,  1.48it/s] 92%|█████████▏| 4242/4613 [45:10<04:10,  1.48it/s] 92%|█████████▏| 4243/4613 [45:10<03:13,  1.92it/s] 92%|█████████▏| 4244/4613 [45:10<03:28,  1.77it/s] 92%|█████████▏| 4245/4613 [45:11<02:48,  2.18it/s] 92%|█████████▏| 4246/4613 [45:11<03:16,  1.87it/s] 92%|█████████▏| 4247/4613 [45:11<02:32,  2.40it/s] 92%|█████████▏| 4248/4613 [45:12<03:15,  1.87it/s] 92%|█████████▏| 4249/4613 [45:13<03:32,  1.71it/s] 92%|█████████▏| 4250/4613 [45:14<04:17,  1.41it/s] 92%|█████████▏| 4251/4613 [45:15<04:16,  1.41it/s] 92%|█████████▏| 4252/4613 [45:15<03:22,  1.79it/s] 92%|█████████▏| 4253/4613 [45:16<03:39,  1.64it/s] 92%|█████████▏| 4254/4613 [45:16<03:53,  1.54it/s] 92%|█████████▏| 4255/4613 [45:17<03:21,  1.78it/s] 92%|█████████▏| 4256/4613 [45:17<03:28,  1.71it/s] 92%|█████████▏| 4257/4613 [45:18<04:16,  1.39it/s] 92%|█████████▏| 4258/4613 [45:19<04:18,  1.37it/s] 92%|█████████▏| 4259/4613 [45:20<04:18,  1.37it/s] 92%|█████████▏| 4260/4613 [45:21<04:24,  1.33it/s] 92%|█████████▏| 4261/4613 [45:21<03:29,  1.68it/s] 92%|█████████▏| 4262/4613 [45:23<05:15,  1.11it/s] 92%|█████████▏| 4263/4613 [45:23<03:57,  1.47it/s] 92%|█████████▏| 4264/4613 [45:23<04:02,  1.44it/s] 92%|█████████▏| 4265/4613 [45:24<03:08,  1.84it/s] 92%|█████████▏| 4266/4613 [45:24<03:17,  1.75it/s] 92%|█████████▏| 4267/4613 [45:24<02:32,  2.27it/s] 93%|█████████▎| 4268/4613 [45:25<03:00,  1.91it/s] 93%|█████████▎| 4269/4613 [45:25<02:25,  2.36it/s] 93%|█████████▎| 4270/4613 [45:26<02:51,  2.00it/s] 93%|█████████▎| 4271/4613 [45:27<03:19,  1.71it/s] 93%|█████████▎| 4272/4613 [45:27<02:40,  2.12it/s] 93%|█████████▎| 4273/4613 [45:28<03:12,  1.76it/s] 93%|█████████▎| 4274/4613 [45:29<03:33,  1.59it/s] 93%|█████████▎| 4275/4613 [45:29<03:50,  1.47it/s] 93%|█████████▎| 4276/4613 [45:30<04:00,  1.40it/s] 93%|█████████▎| 4277/4613 [45:30<03:07,  1.79it/s] 93%|█████████▎| 4278/4613 [45:31<03:20,  1.67it/s] 93%|█████████▎| 4279/4613 [45:32<03:54,  1.42it/s] 93%|█████████▎| 4280/4613 [45:32<03:09,  1.76it/s] 93%|█████████▎| 4281/4613 [45:33<03:35,  1.54it/s] 93%|█████████▎| 4282/4613 [45:34<03:43,  1.48it/s] 93%|█████████▎| 4283/4613 [45:35<04:05,  1.35it/s] 93%|█████████▎| 4284/4613 [45:36<05:28,  1.00it/s] 93%|█████████▎| 4285/4613 [45:37<05:16,  1.04it/s] 93%|█████████▎| 4286/4613 [45:38<04:46,  1.14it/s] 93%|█████████▎| 4287/4613 [45:38<03:34,  1.52it/s] 93%|█████████▎| 4288/4613 [45:39<03:41,  1.46it/s] 93%|█████████▎| 4289/4613 [45:40<03:50,  1.40it/s] 93%|█████████▎| 4290/4613 [45:40<03:10,  1.70it/s] 93%|█████████▎| 4291/4613 [45:40<03:17,  1.63it/s] 93%|█████████▎| 4292/4613 [45:41<02:35,  2.07it/s] 93%|█████████▎| 4293/4613 [45:42<04:04,  1.31it/s] 93%|█████████▎| 4294/4613 [45:43<04:09,  1.28it/s] 93%|█████████▎| 4295/4613 [45:43<03:10,  1.67it/s] 93%|█████████▎| 4296/4613 [45:44<03:23,  1.56it/s] 93%|█████████▎| 4297/4613 [45:44<02:37,  2.01it/s] 93%|█████████▎| 4298/4613 [45:45<03:02,  1.73it/s] 93%|█████████▎| 4299/4613 [45:45<02:29,  2.11it/s] 93%|█████████▎| 4300/4613 [45:46<02:43,  1.92it/s] 93%|█████████▎| 4301/4613 [45:46<03:08,  1.66it/s] 93%|█████████▎| 4302/4613 [45:47<03:40,  1.41it/s] 93%|█████████▎| 4303/4613 [45:48<03:48,  1.36it/s] 93%|█████████▎| 4304/4613 [45:48<02:58,  1.73it/s] 93%|█████████▎| 4305/4613 [45:49<03:02,  1.69it/s] 93%|█████████▎| 4306/4613 [45:49<02:24,  2.13it/s] 93%|█████████▎| 4307/4613 [45:50<02:45,  1.85it/s] 93%|█████████▎| 4308/4613 [45:50<02:12,  2.30it/s] 93%|█████████▎| 4309/4613 [45:51<02:41,  1.88it/s] 93%|█████████▎| 4310/4613 [45:52<02:58,  1.70it/s] 93%|█████████▎| 4311/4613 [45:52<02:24,  2.09it/s] 93%|█████████▎| 4312/4613 [45:53<03:51,  1.30it/s] 93%|█████████▎| 4313/4613 [45:53<03:06,  1.60it/s] 94%|█████████▎| 4314/4613 [45:54<03:23,  1.47it/s] 94%|█████████▎| 4315/4613 [45:55<03:25,  1.45it/s] 94%|█████████▎| 4316/4613 [45:56<03:42,  1.33it/s] 94%|█████████▎| 4317/4613 [45:57<03:35,  1.37it/s] 94%|█████████▎| 4318/4613 [45:57<02:48,  1.75it/s] 94%|█████████▎| 4319/4613 [45:58<03:02,  1.61it/s] 94%|█████████▎| 4320/4613 [45:58<02:19,  2.09it/s] 94%|█████████▎| 4321/4613 [45:58<02:45,  1.76it/s] 94%|█████████▎| 4322/4613 [45:59<03:02,  1.59it/s] 94%|█████████▎| 4323/4613 [45:59<02:25,  1.99it/s] 94%|█████████▎| 4324/4613 [46:00<02:42,  1.78it/s] 94%|█████████▍| 4325/4613 [46:00<02:11,  2.19it/s] 94%|█████████▍| 4326/4613 [46:01<02:28,  1.93it/s] 94%|█████████▍| 4327/4613 [46:01<02:10,  2.20it/s] 94%|█████████▍| 4328/4613 [46:03<03:23,  1.40it/s] 94%|█████████▍| 4329/4613 [46:03<02:39,  1.78it/s] 94%|█████████▍| 4330/4613 [46:04<02:51,  1.65it/s] 94%|█████████▍| 4331/4613 [46:05<03:20,  1.40it/s] 94%|█████████▍| 4332/4613 [46:05<02:40,  1.75it/s] 94%|█████████▍| 4333/4613 [46:05<02:45,  1.69it/s] 94%|█████████▍| 4334/4613 [46:06<03:01,  1.54it/s] 94%|█████████▍| 4335/4613 [46:06<02:25,  1.91it/s] 94%|█████████▍| 4336/4613 [46:07<02:36,  1.77it/s] 94%|█████████▍| 4337/4613 [46:08<03:02,  1.51it/s] 94%|█████████▍| 4338/4613 [46:08<02:22,  1.92it/s] 94%|█████████▍| 4339/4613 [46:09<02:42,  1.68it/s] 94%|█████████▍| 4340/4613 [46:11<04:06,  1.11it/s] 94%|█████████▍| 4341/4613 [46:11<03:55,  1.16it/s] 94%|█████████▍| 4342/4613 [46:12<02:59,  1.51it/s] 94%|█████████▍| 4343/4613 [46:12<03:11,  1.41it/s] 94%|█████████▍| 4344/4613 [46:13<03:11,  1.40it/s] 94%|█████████▍| 4345/4613 [46:13<02:25,  1.84it/s] 94%|█████████▍| 4346/4613 [46:14<02:45,  1.61it/s] 94%|█████████▍| 4347/4613 [46:15<02:53,  1.54it/s] 94%|█████████▍| 4348/4613 [46:15<02:11,  2.01it/s] 94%|█████████▍| 4349/4613 [46:16<02:34,  1.70it/s] 94%|█████████▍| 4350/4613 [46:16<01:59,  2.20it/s] 94%|█████████▍| 4351/4613 [46:17<02:39,  1.64it/s] 94%|█████████▍| 4352/4613 [46:17<02:44,  1.58it/s] 94%|█████████▍| 4353/4613 [46:18<02:51,  1.52it/s] 94%|█████████▍| 4354/4613 [46:19<03:10,  1.36it/s] 94%|█████████▍| 4355/4613 [46:20<03:15,  1.32it/s] 94%|█████████▍| 4356/4613 [46:21<03:16,  1.31it/s] 94%|█████████▍| 4357/4613 [46:21<02:29,  1.71it/s] 94%|█████████▍| 4358/4613 [46:22<02:44,  1.55it/s] 94%|█████████▍| 4359/4613 [46:22<02:54,  1.46it/s] 95%|█████████▍| 4360/4613 [46:23<02:13,  1.90it/s] 95%|█████████▍| 4361/4613 [46:23<02:33,  1.64it/s] 95%|█████████▍| 4362/4613 [46:29<09:00,  2.15s/it] 95%|█████████▍| 4363/4613 [46:30<07:08,  1.72s/it] 95%|█████████▍| 4364/4613 [46:30<05:19,  1.28s/it] 95%|█████████▍| 4365/4613 [46:31<04:29,  1.09s/it] 95%|█████████▍| 4366/4613 [46:31<03:20,  1.23it/s] 95%|█████████▍| 4367/4613 [46:32<03:21,  1.22it/s] 95%|█████████▍| 4368/4613 [46:32<03:14,  1.26it/s] 95%|█████████▍| 4369/4613 [46:33<03:10,  1.28it/s] 95%|█████████▍| 4370/4613 [46:33<02:23,  1.70it/s] 95%|█████████▍| 4371/4613 [46:34<02:39,  1.52it/s] 95%|█████████▍| 4372/4613 [46:34<02:05,  1.91it/s] 95%|█████████▍| 4373/4613 [46:35<02:16,  1.75it/s] 95%|█████████▍| 4374/4613 [46:35<01:51,  2.14it/s] 95%|█████████▍| 4375/4613 [46:36<02:04,  1.91it/s] 95%|█████████▍| 4376/4613 [46:37<02:15,  1.74it/s] 95%|█████████▍| 4377/4613 [46:37<01:44,  2.27it/s] 95%|█████████▍| 4378/4613 [46:37<01:31,  2.56it/s] 95%|█████████▍| 4379/4613 [46:38<01:53,  2.05it/s] 95%|█████████▍| 4380/4613 [46:39<03:00,  1.29it/s] 95%|█████████▍| 4381/4613 [46:39<02:25,  1.60it/s] 95%|█████████▍| 4382/4613 [46:40<02:28,  1.55it/s] 95%|█████████▌| 4383/4613 [46:41<02:41,  1.42it/s] 95%|█████████▌| 4384/4613 [46:41<02:04,  1.84it/s] 95%|█████████▌| 4385/4613 [46:42<02:21,  1.61it/s] 95%|█████████▌| 4386/4613 [46:44<04:18,  1.14s/it] 95%|█████████▌| 4387/4613 [46:44<03:11,  1.18it/s] 95%|█████████▌| 4388/4613 [46:45<02:58,  1.26it/s] 95%|█████████▌| 4389/4613 [46:45<02:16,  1.64it/s] 95%|█████████▌| 4390/4613 [46:46<02:21,  1.57it/s] 95%|█████████▌| 4391/4613 [46:46<01:50,  2.00it/s] 95%|█████████▌| 4392/4613 [46:47<02:11,  1.68it/s] 95%|█████████▌| 4393/4613 [46:48<02:21,  1.56it/s] 95%|█████████▌| 4394/4613 [46:48<01:48,  2.01it/s] 95%|█████████▌| 4395/4613 [46:49<02:04,  1.76it/s] 95%|█████████▌| 4396/4613 [46:49<02:13,  1.63it/s] 95%|█████████▌| 4397/4613 [46:50<02:25,  1.49it/s] 95%|█████████▌| 4398/4613 [46:50<01:58,  1.81it/s] 95%|█████████▌| 4399/4613 [46:51<02:04,  1.71it/s] 95%|█████████▌| 4400/4613 [46:51<01:46,  2.01it/s] 95%|█████████▌| 4401/4613 [46:52<01:58,  1.79it/s] 95%|█████████▌| 4402/4613 [46:54<02:57,  1.19it/s] 95%|█████████▌| 4403/4613 [46:54<02:55,  1.19it/s] 95%|█████████▌| 4404/4613 [46:55<02:23,  1.46it/s] 95%|█████████▌| 4405/4613 [46:56<02:25,  1.43it/s] 96%|█████████▌| 4406/4613 [46:56<02:22,  1.45it/s] 96%|█████████▌| 4407/4613 [46:56<01:56,  1.77it/s] 96%|█████████▌| 4408/4613 [46:57<02:08,  1.60it/s] 96%|█████████▌| 4409/4613 [46:58<02:13,  1.53it/s] 96%|█████████▌| 4410/4613 [46:58<01:46,  1.91it/s] 96%|█████████▌| 4411/4613 [46:59<01:53,  1.79it/s] 96%|█████████▌| 4412/4613 [47:00<02:17,  1.46it/s] 96%|█████████▌| 4413/4613 [47:01<02:24,  1.39it/s] 96%|█████████▌| 4414/4613 [47:01<02:27,  1.35it/s] 96%|█████████▌| 4415/4613 [47:02<02:28,  1.33it/s] 96%|█████████▌| 4416/4613 [47:02<01:56,  1.69it/s] 96%|█████████▌| 4417/4613 [47:03<02:01,  1.61it/s] 96%|█████████▌| 4418/4613 [47:03<01:34,  2.06it/s] 96%|█████████▌| 4419/4613 [47:04<01:47,  1.81it/s] 96%|█████████▌| 4420/4613 [47:05<02:11,  1.47it/s] 96%|█████████▌| 4421/4613 [47:06<02:13,  1.44it/s] 96%|█████████▌| 4422/4613 [47:06<02:21,  1.35it/s] 96%|█████████▌| 4423/4613 [47:08<02:36,  1.22it/s] 96%|█████████▌| 4424/4613 [47:08<02:35,  1.21it/s] 96%|█████████▌| 4425/4613 [47:09<02:31,  1.24it/s] 96%|█████████▌| 4426/4613 [47:10<02:34,  1.21it/s] 96%|█████████▌| 4427/4613 [47:10<01:58,  1.57it/s] 96%|█████████▌| 4428/4613 [47:11<02:03,  1.50it/s] 96%|█████████▌| 4429/4613 [47:12<02:48,  1.09it/s] 96%|█████████▌| 4430/4613 [47:13<02:07,  1.43it/s] 96%|█████████▌| 4431/4613 [47:13<02:11,  1.39it/s] 96%|█████████▌| 4432/4613 [47:14<02:20,  1.29it/s] 96%|█████████▌| 4433/4613 [47:15<02:20,  1.28it/s] 96%|█████████▌| 4434/4613 [47:16<02:21,  1.26it/s] 96%|█████████▌| 4435/4613 [47:16<01:46,  1.68it/s] 96%|█████████▌| 4436/4613 [47:17<01:56,  1.52it/s] 96%|█████████▌| 4437/4613 [47:18<01:58,  1.48it/s] 96%|█████████▌| 4438/4613 [47:18<01:37,  1.80it/s] 96%|█████████▌| 4439/4613 [47:19<02:19,  1.25it/s] 96%|█████████▌| 4440/4613 [47:19<01:43,  1.67it/s] 96%|█████████▋| 4441/4613 [47:20<01:53,  1.52it/s] 96%|█████████▋| 4442/4613 [47:22<02:39,  1.07it/s] 96%|█████████▋| 4443/4613 [47:22<02:03,  1.37it/s] 96%|█████████▋| 4444/4613 [47:23<02:05,  1.34it/s] 96%|█████████▋| 4445/4613 [47:23<02:03,  1.36it/s] 96%|█████████▋| 4446/4613 [47:24<01:37,  1.71it/s] 96%|█████████▋| 4447/4613 [47:24<01:45,  1.57it/s] 96%|█████████▋| 4448/4613 [47:26<02:26,  1.12it/s] 96%|█████████▋| 4449/4613 [47:27<02:29,  1.10it/s] 96%|█████████▋| 4450/4613 [47:28<02:19,  1.17it/s] 96%|█████████▋| 4451/4613 [47:28<02:11,  1.23it/s] 97%|█████████▋| 4452/4613 [47:29<01:48,  1.49it/s] 97%|█████████▋| 4453/4613 [47:29<01:50,  1.45it/s] 97%|█████████▋| 4454/4613 [47:30<01:54,  1.38it/s] 97%|█████████▋| 4455/4613 [47:30<01:30,  1.75it/s] 97%|█████████▋| 4456/4613 [47:31<01:32,  1.70it/s] 97%|█████████▋| 4457/4613 [47:31<01:16,  2.04it/s] 97%|█████████▋| 4458/4613 [47:32<01:23,  1.86it/s] 97%|█████████▋| 4459/4613 [47:32<01:06,  2.31it/s] 97%|█████████▋| 4460/4613 [47:33<01:14,  2.04it/s] 97%|█████████▋| 4461/4613 [47:34<01:33,  1.62it/s] 97%|█████████▋| 4462/4613 [47:34<01:42,  1.48it/s] 97%|█████████▋| 4463/4613 [47:35<01:22,  1.82it/s] 97%|█████████▋| 4464/4613 [47:35<01:28,  1.68it/s] 97%|█████████▋| 4465/4613 [47:36<01:09,  2.13it/s] 97%|█████████▋| 4466/4613 [47:36<01:18,  1.87it/s] 97%|█████████▋| 4467/4613 [47:37<01:26,  1.68it/s] 97%|█████████▋| 4468/4613 [47:37<01:10,  2.06it/s] 97%|█████████▋| 4469/4613 [47:38<01:17,  1.85it/s] 97%|█████████▋| 4470/4613 [47:39<01:28,  1.61it/s] 97%|█████████▋| 4471/4613 [47:40<01:37,  1.46it/s] 97%|█████████▋| 4472/4613 [47:41<01:53,  1.24it/s] 97%|█████████▋| 4473/4613 [47:41<01:49,  1.28it/s] 97%|█████████▋| 4474/4613 [47:42<01:47,  1.30it/s] 97%|█████████▋| 4475/4613 [47:43<01:46,  1.30it/s] 97%|█████████▋| 4476/4613 [47:43<01:22,  1.65it/s] 97%|█████████▋| 4477/4613 [47:44<01:28,  1.54it/s] 97%|█████████▋| 4478/4613 [47:44<01:09,  1.95it/s] 97%|█████████▋| 4479/4613 [47:45<01:15,  1.77it/s] 97%|█████████▋| 4480/4613 [47:45<00:59,  2.23it/s] 97%|█████████▋| 4481/4613 [47:46<01:08,  1.92it/s] 97%|█████████▋| 4482/4613 [47:46<00:57,  2.29it/s] 97%|█████████▋| 4483/4613 [47:46<01:04,  2.01it/s] 97%|█████████▋| 4484/4613 [47:47<01:12,  1.78it/s] 97%|█████████▋| 4485/4613 [47:47<00:57,  2.21it/s] 97%|█████████▋| 4486/4613 [47:48<01:10,  1.80it/s] 97%|█████████▋| 4487/4613 [47:48<00:56,  2.23it/s] 97%|█████████▋| 4488/4613 [47:49<01:06,  1.88it/s] 97%|█████████▋| 4489/4613 [47:50<01:14,  1.68it/s] 97%|█████████▋| 4490/4613 [47:50<01:00,  2.04it/s] 97%|█████████▋| 4491/4613 [47:51<01:05,  1.87it/s] 97%|█████████▋| 4492/4613 [47:51<01:11,  1.69it/s] 97%|█████████▋| 4493/4613 [47:52<01:20,  1.50it/s] 97%|█████████▋| 4494/4613 [47:53<01:06,  1.80it/s] 97%|█████████▋| 4495/4613 [47:53<01:11,  1.65it/s] 97%|█████████▋| 4496/4613 [47:54<00:58,  2.01it/s] 97%|█████████▋| 4497/4613 [47:54<01:07,  1.71it/s] 98%|█████████▊| 4498/4613 [47:55<01:09,  1.66it/s] 98%|█████████▊| 4499/4613 [47:55<00:54,  2.08it/s] 98%|█████████▊| 4500/4613 [47:56<01:04,  1.76it/s] 98%|█████████▊| 4501/4613 [47:57<01:09,  1.61it/s] 98%|█████████▊| 4502/4613 [47:57<00:54,  2.03it/s] 98%|█████████▊| 4503/4613 [47:58<00:59,  1.84it/s] 98%|█████████▊| 4504/4613 [47:58<01:08,  1.59it/s] 98%|█████████▊| 4505/4613 [47:59<00:56,  1.91it/s] 98%|█████████▊| 4506/4613 [47:59<00:59,  1.79it/s] 98%|█████████▊| 4507/4613 [48:00<01:04,  1.64it/s] 98%|█████████▊| 4508/4613 [48:00<00:52,  2.01it/s] 98%|█████████▊| 4509/4613 [48:02<01:21,  1.27it/s] 98%|█████████▊| 4510/4613 [48:03<01:45,  1.03s/it] 98%|█████████▊| 4511/4613 [48:04<01:35,  1.07it/s] 98%|█████████▊| 4512/4613 [48:04<01:10,  1.42it/s] 98%|█████████▊| 4513/4613 [48:04<00:54,  1.82it/s] 98%|█████████▊| 4514/4613 [48:05<01:03,  1.57it/s] 98%|█████████▊| 4515/4613 [48:06<01:02,  1.56it/s] 98%|█████████▊| 4516/4613 [48:07<01:09,  1.40it/s] 98%|█████████▊| 4517/4613 [48:07<01:07,  1.43it/s] 98%|█████████▊| 4518/4613 [48:08<00:50,  1.87it/s] 98%|█████████▊| 4519/4613 [48:08<00:41,  2.27it/s] 98%|█████████▊| 4520/4613 [48:09<00:48,  1.93it/s] 98%|█████████▊| 4521/4613 [48:09<00:52,  1.74it/s] 98%|█████████▊| 4522/4613 [48:09<00:42,  2.14it/s] 98%|█████████▊| 4523/4613 [48:10<00:48,  1.85it/s] 98%|█████████▊| 4524/4613 [48:10<00:37,  2.38it/s] 98%|█████████▊| 4525/4613 [48:11<00:43,  2.00it/s] 98%|█████████▊| 4526/4613 [48:12<00:52,  1.65it/s] 98%|█████████▊| 4527/4613 [48:12<00:42,  2.04it/s] 98%|█████████▊| 4528/4613 [48:13<00:48,  1.77it/s] 98%|█████████▊| 4529/4613 [48:13<00:38,  2.17it/s] 98%|█████████▊| 4530/4613 [48:14<00:46,  1.78it/s] 98%|█████████▊| 4531/4613 [48:15<00:50,  1.63it/s] 98%|█████████▊| 4532/4613 [48:15<00:52,  1.54it/s] 98%|█████████▊| 4533/4613 [48:15<00:40,  1.98it/s] 98%|█████████▊| 4534/4613 [48:16<00:44,  1.77it/s] 98%|█████████▊| 4535/4613 [48:16<00:34,  2.24it/s] 98%|█████████▊| 4536/4613 [48:17<00:41,  1.85it/s] 98%|█████████▊| 4537/4613 [48:19<01:04,  1.18it/s] 98%|█████████▊| 4538/4613 [48:19<00:48,  1.56it/s] 98%|█████████▊| 4539/4613 [48:20<00:49,  1.50it/s] 98%|█████████▊| 4540/4613 [48:20<00:37,  1.95it/s] 98%|█████████▊| 4541/4613 [48:20<00:42,  1.71it/s] 98%|█████████▊| 4542/4613 [48:21<00:45,  1.55it/s] 98%|█████████▊| 4543/4613 [48:22<00:38,  1.84it/s] 99%|█████████▊| 4544/4613 [48:23<00:55,  1.25it/s] 99%|█████████▊| 4545/4613 [48:24<00:54,  1.24it/s] 99%|█████████▊| 4546/4613 [48:25<00:54,  1.23it/s] 99%|█████████▊| 4547/4613 [48:25<00:40,  1.63it/s] 99%|█████████▊| 4548/4613 [48:25<00:32,  2.03it/s] 99%|█████████▊| 4549/4613 [48:26<00:35,  1.78it/s] 99%|█████████▊| 4550/4613 [48:26<00:38,  1.62it/s] 99%|█████████▊| 4551/4613 [48:27<00:40,  1.52it/s] 99%|█████████▊| 4552/4613 [48:28<00:44,  1.38it/s] 99%|█████████▊| 4553/4613 [48:28<00:33,  1.78it/s] 99%|█████████▊| 4554/4613 [48:29<00:38,  1.53it/s] 99%|█████████▊| 4555/4613 [48:30<00:41,  1.40it/s] 99%|█████████▉| 4556/4613 [48:30<00:32,  1.73it/s] 99%|█████████▉| 4557/4613 [48:31<00:34,  1.65it/s] 99%|█████████▉| 4558/4613 [48:32<00:34,  1.59it/s] 99%|█████████▉| 4559/4613 [48:32<00:27,  1.97it/s] 99%|█████████▉| 4560/4613 [48:33<00:30,  1.75it/s] 99%|█████████▉| 4561/4613 [48:33<00:32,  1.61it/s] 99%|█████████▉| 4562/4613 [48:33<00:24,  2.06it/s] 99%|█████████▉| 4563/4613 [48:34<00:28,  1.73it/s] 99%|█████████▉| 4564/4613 [48:35<00:32,  1.52it/s] 99%|█████████▉| 4565/4613 [48:36<00:32,  1.49it/s] 99%|█████████▉| 4566/4613 [48:36<00:25,  1.86it/s] 99%|█████████▉| 4567/4613 [48:37<00:28,  1.63it/s] 99%|█████████▉| 4568/4613 [48:37<00:29,  1.55it/s] 99%|█████████▉| 4569/4613 [48:38<00:22,  1.93it/s] 99%|█████████▉| 4570/4613 [48:39<00:26,  1.63it/s] 99%|█████████▉| 4571/4613 [48:39<00:26,  1.60it/s] 99%|█████████▉| 4572/4613 [48:39<00:20,  1.96it/s] 99%|█████████▉| 4573/4613 [48:40<00:22,  1.77it/s] 99%|█████████▉| 4574/4613 [48:41<00:24,  1.62it/s] 99%|█████████▉| 4575/4613 [48:42<00:26,  1.44it/s] 99%|█████████▉| 4576/4613 [48:43<00:27,  1.34it/s] 99%|█████████▉| 4577/4613 [48:43<00:28,  1.28it/s] 99%|█████████▉| 4578/4613 [48:44<00:20,  1.70it/s] 99%|█████████▉| 4579/4613 [48:44<00:21,  1.59it/s] 99%|█████████▉| 4580/4613 [48:45<00:16,  2.04it/s] 99%|█████████▉| 4581/4613 [48:46<00:24,  1.28it/s] 99%|█████████▉| 4582/4613 [48:47<00:24,  1.25it/s] 99%|█████████▉| 4583/4613 [48:47<00:18,  1.64it/s] 99%|█████████▉| 4584/4613 [48:48<00:18,  1.57it/s] 99%|█████████▉| 4585/4613 [48:48<00:14,  1.93it/s] 99%|█████████▉| 4586/4613 [48:49<00:15,  1.79it/s] 99%|█████████▉| 4587/4613 [48:49<00:16,  1.55it/s] 99%|█████████▉| 4588/4613 [48:50<00:17,  1.45it/s] 99%|█████████▉| 4589/4613 [48:51<00:17,  1.37it/s]100%|█████████▉| 4590/4613 [48:51<00:14,  1.64it/s]100%|█████████▉| 4591/4613 [48:52<00:13,  1.59it/s]100%|█████████▉| 4592/4613 [48:53<00:14,  1.43it/s]100%|█████████▉| 4593/4613 [48:53<00:11,  1.80it/s]100%|█████████▉| 4594/4613 [48:54<00:11,  1.73it/s]100%|█████████▉| 4595/4613 [48:54<00:08,  2.07it/s]100%|█████████▉| 4596/4613 [48:55<00:09,  1.72it/s]100%|█████████▉| 4597/4613 [48:56<00:10,  1.60it/s]100%|█████████▉| 4598/4613 [48:56<00:10,  1.46it/s]100%|█████████▉| 4599/4613 [48:57<00:10,  1.37it/s]100%|█████████▉| 4600/4613 [48:58<00:09,  1.36it/s]100%|█████████▉| 4601/4613 [48:58<00:06,  1.79it/s]100%|█████████▉| 4602/4613 [48:59<00:06,  1.68it/s]100%|█████████▉| 4603/4613 [49:00<00:06,  1.52it/s]100%|█████████▉| 4604/4613 [49:00<00:06,  1.42it/s]100%|█████████▉| 4605/4613 [49:01<00:04,  1.75it/s]100%|█████████▉| 4606/4613 [49:01<00:04,  1.67it/s]100%|█████████▉| 4607/4613 [49:02<00:02,  2.09it/s]100%|█████████▉| 4608/4613 [49:02<00:02,  1.82it/s]100%|█████████▉| 4609/4613 [49:02<00:01,  2.23it/s]100%|█████████▉| 4610/4613 [49:03<00:01,  1.95it/s]100%|█████████▉| 4611/4613 [49:04<00:01,  1.70it/s]100%|█████████▉| 4612/4613 [49:04<00:00,  2.16it/s]100%|██████████| 4613/4613 [49:05<00:00,  1.86it/s]100%|██████████| 4613/4613 [49:05<00:00,  1.57it/s]
  0%|          | 0/912 [00:00<?, ?it/s]  0%|          | 1/912 [00:01<19:22,  1.28s/it]  0%|          | 2/912 [00:01<14:53,  1.02it/s]  0%|          | 3/912 [00:02<13:36,  1.11it/s]  0%|          | 4/912 [00:03<13:25,  1.13it/s]  1%|          | 5/912 [00:03<13:09,  1.15it/s]  1%|          | 6/912 [00:04<10:21,  1.46it/s]  1%|          | 7/912 [00:04<10:16,  1.47it/s]  1%|          | 8/912 [00:05<10:33,  1.43it/s]  1%|          | 9/912 [00:05<08:11,  1.84it/s]  1%|          | 10/912 [00:06<08:52,  1.69it/s]  1%|          | 11/912 [00:06<07:09,  2.10it/s]  1%|▏         | 12/912 [00:07<08:12,  1.83it/s]  1%|▏         | 13/912 [00:07<06:41,  2.24it/s]  2%|▏         | 14/912 [00:08<07:49,  1.91it/s]  2%|▏         | 15/912 [00:08<06:21,  2.35it/s]  2%|▏         | 16/912 [00:09<07:25,  2.01it/s]  2%|▏         | 17/912 [00:09<06:11,  2.41it/s]  2%|▏         | 18/912 [00:10<07:17,  2.05it/s]  2%|▏         | 19/912 [00:10<05:56,  2.50it/s]  2%|▏         | 20/912 [00:10<07:16,  2.04it/s]  2%|▏         | 21/912 [00:11<06:06,  2.43it/s]  2%|▏         | 22/912 [00:12<08:20,  1.78it/s]  3%|▎         | 23/912 [00:12<09:31,  1.56it/s]  3%|▎         | 24/912 [00:13<09:35,  1.54it/s]  3%|▎         | 25/912 [00:13<07:30,  1.97it/s]  3%|▎         | 26/912 [00:14<08:18,  1.78it/s]  3%|▎         | 27/912 [00:14<06:37,  2.23it/s]  3%|▎         | 28/912 [00:15<07:47,  1.89it/s]  3%|▎         | 29/912 [00:16<09:59,  1.47it/s]  3%|▎         | 30/912 [00:17<10:14,  1.44it/s]  3%|▎         | 31/912 [00:17<10:21,  1.42it/s]  4%|▎         | 32/912 [00:18<07:54,  1.85it/s]  4%|▎         | 33/912 [00:18<06:28,  2.26it/s]  4%|▎         | 34/912 [00:18<07:26,  1.96it/s]  4%|▍         | 35/912 [00:19<06:12,  2.35it/s]  4%|▍         | 36/912 [00:19<07:00,  2.08it/s]  4%|▍         | 37/912 [00:20<08:19,  1.75it/s]  4%|▍         | 38/912 [00:20<06:57,  2.10it/s]  4%|▍         | 39/912 [00:21<07:50,  1.86it/s]  4%|▍         | 40/912 [00:21<06:10,  2.35it/s]  4%|▍         | 41/912 [00:22<07:23,  1.96it/s]  5%|▍         | 42/912 [00:22<05:48,  2.50it/s]  5%|▍         | 43/912 [00:23<07:12,  2.01it/s]  5%|▍         | 44/912 [00:23<06:12,  2.33it/s]  5%|▍         | 45/912 [00:24<07:32,  1.92it/s]  5%|▌         | 46/912 [00:25<08:44,  1.65it/s]  5%|▌         | 47/912 [00:25<06:57,  2.07it/s]  5%|▌         | 48/912 [00:25<07:40,  1.88it/s]  5%|▌         | 49/912 [00:26<06:23,  2.25it/s]  5%|▌         | 50/912 [00:26<07:23,  1.94it/s]  6%|▌         | 51/912 [00:27<08:10,  1.75it/s]  6%|▌         | 52/912 [00:28<09:53,  1.45it/s]  6%|▌         | 53/912 [00:29<09:55,  1.44it/s]  6%|▌         | 54/912 [00:29<07:58,  1.79it/s]  6%|▌         | 55/912 [00:30<08:42,  1.64it/s]  6%|▌         | 56/912 [00:30<06:43,  2.12it/s]  6%|▋         | 57/912 [00:30<07:38,  1.87it/s]  6%|▋         | 58/912 [00:31<06:24,  2.22it/s]  6%|▋         | 59/912 [00:31<07:21,  1.93it/s]  7%|▋         | 60/912 [00:32<08:20,  1.70it/s]  7%|▋         | 61/912 [00:32<06:36,  2.15it/s]  7%|▋         | 62/912 [00:33<08:13,  1.72it/s]  7%|▋         | 63/912 [00:34<08:59,  1.57it/s]  7%|▋         | 64/912 [00:34<07:04,  2.00it/s]  7%|▋         | 65/912 [00:35<07:42,  1.83it/s]  7%|▋         | 66/912 [00:36<08:40,  1.63it/s]  7%|▋         | 67/912 [00:36<06:45,  2.08it/s]  7%|▋         | 68/912 [00:36<07:56,  1.77it/s]  8%|▊         | 69/912 [00:37<06:35,  2.13it/s]  8%|▊         | 70/912 [00:38<08:00,  1.75it/s]  8%|▊         | 71/912 [00:38<08:58,  1.56it/s]  8%|▊         | 72/912 [00:39<09:11,  1.52it/s]  8%|▊         | 73/912 [00:39<07:03,  1.98it/s]  8%|▊         | 74/912 [00:40<08:30,  1.64it/s]  8%|▊         | 75/912 [00:41<08:47,  1.59it/s]  8%|▊         | 76/912 [00:41<07:34,  1.84it/s]  8%|▊         | 77/912 [00:42<10:55,  1.27it/s]  9%|▊         | 78/912 [00:43<08:35,  1.62it/s]  9%|▊         | 79/912 [00:43<09:00,  1.54it/s]  9%|▉         | 80/912 [00:44<06:58,  1.99it/s]  9%|▉         | 81/912 [00:44<08:24,  1.65it/s]  9%|▉         | 82/912 [00:45<08:51,  1.56it/s]  9%|▉         | 83/912 [00:46<09:49,  1.41it/s]  9%|▉         | 84/912 [00:47<10:05,  1.37it/s]  9%|▉         | 85/912 [00:48<10:19,  1.34it/s]  9%|▉         | 86/912 [00:48<08:19,  1.65it/s] 10%|▉         | 87/912 [00:48<08:43,  1.58it/s] 10%|▉         | 88/912 [00:49<09:15,  1.48it/s] 10%|▉         | 89/912 [00:49<07:13,  1.90it/s] 10%|▉         | 90/912 [00:50<07:55,  1.73it/s] 10%|▉         | 91/912 [00:50<06:12,  2.20it/s] 10%|█         | 92/912 [00:51<07:17,  1.87it/s] 10%|█         | 93/912 [00:51<05:59,  2.28it/s] 10%|█         | 94/912 [00:52<06:56,  1.96it/s] 10%|█         | 95/912 [00:52<05:42,  2.39it/s] 11%|█         | 96/912 [00:53<06:44,  2.02it/s] 11%|█         | 97/912 [00:53<05:20,  2.55it/s] 11%|█         | 98/912 [00:54<06:50,  1.98it/s] 11%|█         | 99/912 [00:54<07:52,  1.72it/s] 11%|█         | 100/912 [00:55<06:09,  2.20it/s] 11%|█         | 101/912 [00:55<07:23,  1.83it/s] 11%|█         | 102/912 [00:56<08:26,  1.60it/s] 11%|█▏        | 103/912 [00:57<08:59,  1.50it/s] 11%|█▏        | 104/912 [00:57<06:59,  1.93it/s] 12%|█▏        | 105/912 [00:58<07:37,  1.76it/s] 12%|█▏        | 106/912 [00:58<06:06,  2.20it/s] 12%|█▏        | 107/912 [00:59<07:13,  1.86it/s] 12%|█▏        | 108/912 [01:00<08:16,  1.62it/s] 12%|█▏        | 109/912 [01:00<06:38,  2.01it/s] 12%|█▏        | 110/912 [01:00<07:22,  1.81it/s] 12%|█▏        | 111/912 [01:01<08:07,  1.64it/s] 12%|█▏        | 112/912 [01:01<06:20,  2.10it/s] 12%|█▏        | 113/912 [01:02<07:28,  1.78it/s] 12%|█▎        | 114/912 [01:03<08:40,  1.53it/s] 13%|█▎        | 115/912 [01:03<06:53,  1.93it/s] 13%|█▎        | 116/912 [01:04<07:24,  1.79it/s] 13%|█▎        | 117/912 [01:04<05:50,  2.27it/s] 13%|█▎        | 118/912 [01:05<06:46,  1.95it/s] 13%|█▎        | 119/912 [01:05<05:28,  2.42it/s] 13%|█▎        | 120/912 [01:06<06:53,  1.92it/s] 13%|█▎        | 121/912 [01:06<05:55,  2.22it/s] 13%|█▎        | 122/912 [01:07<06:55,  1.90it/s] 13%|█▎        | 123/912 [01:07<07:40,  1.71it/s] 14%|█▎        | 124/912 [01:08<05:59,  2.19it/s] 14%|█▎        | 125/912 [01:08<07:07,  1.84it/s] 14%|█▍        | 126/912 [01:09<08:12,  1.59it/s] 14%|█▍        | 127/912 [01:09<06:22,  2.05it/s] 14%|█▍        | 128/912 [01:10<07:05,  1.84it/s] 14%|█▍        | 129/912 [01:10<05:35,  2.33it/s] 14%|█▍        | 130/912 [01:11<06:45,  1.93it/s] 14%|█▍        | 131/912 [01:11<05:40,  2.30it/s] 14%|█▍        | 132/912 [01:12<06:36,  1.97it/s] 15%|█▍        | 133/912 [01:12<05:16,  2.46it/s] 15%|█▍        | 134/912 [01:13<06:27,  2.01it/s] 15%|█▍        | 135/912 [01:13<05:09,  2.51it/s] 15%|█▍        | 136/912 [01:13<06:19,  2.05it/s] 15%|█▌        | 137/912 [01:14<07:19,  1.76it/s] 15%|█▌        | 138/912 [01:14<05:51,  2.20it/s] 15%|█▌        | 139/912 [01:15<06:52,  1.87it/s] 15%|█▌        | 140/912 [01:15<05:28,  2.35it/s] 15%|█▌        | 141/912 [01:16<07:05,  1.81it/s] 16%|█▌        | 142/912 [01:17<07:42,  1.67it/s] 16%|█▌        | 143/912 [01:17<06:10,  2.07it/s] 16%|█▌        | 144/912 [01:18<06:58,  1.84it/s] 16%|█▌        | 145/912 [01:18<05:40,  2.25it/s] 16%|█▌        | 146/912 [01:19<06:37,  1.93it/s] 16%|█▌        | 147/912 [01:19<05:20,  2.38it/s] 16%|█▌        | 148/912 [01:20<06:35,  1.93it/s] 16%|█▋        | 149/912 [01:20<07:20,  1.73it/s] 16%|█▋        | 150/912 [01:21<05:54,  2.15it/s] 17%|█▋        | 151/912 [01:21<06:49,  1.86it/s] 17%|█▋        | 152/912 [01:21<05:33,  2.28it/s] 17%|█▋        | 153/912 [01:22<06:26,  1.96it/s] 17%|█▋        | 154/912 [01:22<05:18,  2.38it/s] 17%|█▋        | 155/912 [01:23<06:17,  2.00it/s] 17%|█▋        | 156/912 [01:23<05:00,  2.52it/s] 17%|█▋        | 157/912 [01:24<06:45,  1.86it/s] 17%|█▋        | 158/912 [01:25<07:23,  1.70it/s] 17%|█▋        | 159/912 [01:25<08:00,  1.57it/s] 18%|█▊        | 160/912 [01:26<06:28,  1.94it/s] 18%|█▊        | 161/912 [01:26<07:04,  1.77it/s] 18%|█▊        | 162/912 [01:27<05:44,  2.18it/s] 18%|█▊        | 163/912 [01:27<06:36,  1.89it/s] 18%|█▊        | 164/912 [01:27<05:18,  2.35it/s] 18%|█▊        | 165/912 [01:28<06:13,  2.00it/s] 18%|█▊        | 166/912 [01:28<05:16,  2.36it/s] 18%|█▊        | 167/912 [01:29<06:09,  2.02it/s] 18%|█▊        | 168/912 [01:29<05:06,  2.43it/s] 19%|█▊        | 169/912 [01:30<06:43,  1.84it/s] 19%|█▊        | 170/912 [01:31<07:09,  1.73it/s] 19%|█▉        | 171/912 [01:32<07:47,  1.59it/s] 19%|█▉        | 172/912 [01:32<06:02,  2.04it/s] 19%|█▉        | 173/912 [01:32<07:07,  1.73it/s] 19%|█▉        | 174/912 [01:33<07:36,  1.62it/s] 19%|█▉        | 175/912 [01:33<06:05,  2.02it/s] 19%|█▉        | 176/912 [01:34<06:55,  1.77it/s] 19%|█▉        | 177/912 [01:34<05:28,  2.24it/s] 20%|█▉        | 178/912 [01:35<06:27,  1.90it/s] 20%|█▉        | 179/912 [01:35<05:04,  2.41it/s] 20%|█▉        | 180/912 [01:36<06:16,  1.95it/s] 20%|█▉        | 181/912 [01:36<05:13,  2.33it/s] 20%|█▉        | 182/912 [01:37<06:04,  2.00it/s] 20%|██        | 183/912 [01:37<05:06,  2.38it/s] 20%|██        | 184/912 [01:38<06:07,  1.98it/s] 20%|██        | 185/912 [01:39<07:07,  1.70it/s] 20%|██        | 186/912 [01:39<07:39,  1.58it/s] 21%|██        | 187/912 [01:39<05:59,  2.01it/s] 21%|██        | 188/912 [01:40<06:45,  1.78it/s] 21%|██        | 189/912 [01:41<07:42,  1.56it/s] 21%|██        | 190/912 [01:41<05:58,  2.02it/s] 21%|██        | 191/912 [01:42<06:48,  1.77it/s] 21%|██        | 192/912 [01:42<05:19,  2.26it/s] 21%|██        | 193/912 [01:43<06:18,  1.90it/s] 21%|██▏       | 194/912 [01:44<07:27,  1.60it/s] 21%|██▏       | 195/912 [01:44<05:54,  2.02it/s] 21%|██▏       | 196/912 [01:44<06:31,  1.83it/s] 22%|██▏       | 197/912 [01:45<05:05,  2.34it/s] 22%|██▏       | 198/912 [01:45<06:12,  1.92it/s] 22%|██▏       | 199/912 [01:46<04:51,  2.44it/s] 22%|██▏       | 200/912 [01:46<06:06,  1.94it/s] 22%|██▏       | 201/912 [01:47<06:54,  1.72it/s] 22%|██▏       | 202/912 [01:47<05:25,  2.18it/s] 22%|██▏       | 203/912 [01:47<04:36,  2.57it/s] 22%|██▏       | 204/912 [01:48<05:30,  2.14it/s] 22%|██▏       | 205/912 [01:48<04:39,  2.53it/s] 23%|██▎       | 206/912 [01:49<05:33,  2.12it/s] 23%|██▎       | 207/912 [01:50<06:23,  1.84it/s] 23%|██▎       | 208/912 [01:50<05:17,  2.22it/s] 23%|██▎       | 209/912 [01:51<06:03,  1.93it/s] 23%|██▎       | 210/912 [01:51<04:56,  2.37it/s] 23%|██▎       | 211/912 [01:51<05:54,  1.98it/s] 23%|██▎       | 212/912 [01:52<04:48,  2.43it/s] 23%|██▎       | 213/912 [01:52<05:45,  2.02it/s] 23%|██▎       | 214/912 [01:53<05:00,  2.32it/s] 24%|██▎       | 215/912 [01:53<05:40,  2.05it/s] 24%|██▎       | 216/912 [01:54<06:40,  1.74it/s] 24%|██▍       | 217/912 [01:54<05:14,  2.21it/s] 24%|██▍       | 218/912 [01:55<06:05,  1.90it/s] 24%|██▍       | 219/912 [01:55<04:43,  2.44it/s] 24%|██▍       | 220/912 [01:56<05:53,  1.96it/s] 24%|██▍       | 221/912 [01:56<04:46,  2.41it/s] 24%|██▍       | 222/912 [01:57<05:59,  1.92it/s] 24%|██▍       | 223/912 [01:57<05:01,  2.29it/s] 25%|██▍       | 224/912 [01:58<05:49,  1.97it/s] 25%|██▍       | 225/912 [01:58<06:35,  1.74it/s] 25%|██▍       | 226/912 [01:59<05:11,  2.20it/s] 25%|██▍       | 227/912 [01:59<06:03,  1.88it/s] 25%|██▌       | 228/912 [01:59<04:54,  2.32it/s] 25%|██▌       | 229/912 [02:00<05:57,  1.91it/s] 25%|██▌       | 230/912 [02:00<04:49,  2.36it/s] 25%|██▌       | 231/912 [02:01<05:40,  2.00it/s] 25%|██▌       | 232/912 [02:02<06:52,  1.65it/s] 26%|██▌       | 233/912 [02:02<05:18,  2.13it/s] 26%|██▌       | 234/912 [02:03<06:05,  1.86it/s] 26%|██▌       | 235/912 [02:03<05:00,  2.25it/s] 26%|██▌       | 236/912 [02:04<06:00,  1.87it/s] 26%|██▌       | 237/912 [02:04<06:42,  1.68it/s] 26%|██▌       | 238/912 [02:05<05:13,  2.15it/s] 26%|██▌       | 239/912 [02:05<05:58,  1.88it/s] 26%|██▋       | 240/912 [02:05<04:45,  2.35it/s] 26%|██▋       | 241/912 [02:06<05:45,  1.94it/s] 27%|██▋       | 242/912 [02:06<04:37,  2.42it/s] 27%|██▋       | 243/912 [02:07<05:33,  2.00it/s] 27%|██▋       | 244/912 [02:07<04:55,  2.26it/s] 27%|██▋       | 245/912 [02:08<05:38,  1.97it/s] 27%|██▋       | 246/912 [02:09<06:17,  1.76it/s] 27%|██▋       | 247/912 [02:09<05:25,  2.04it/s] 27%|██▋       | 248/912 [02:10<06:06,  1.81it/s] 27%|██▋       | 249/912 [02:10<05:01,  2.20it/s] 27%|██▋       | 250/912 [02:11<05:40,  1.94it/s] 28%|██▊       | 251/912 [02:11<06:21,  1.73it/s] 28%|██▊       | 252/912 [02:12<05:01,  2.19it/s] 28%|██▊       | 253/912 [02:12<05:51,  1.88it/s] 28%|██▊       | 254/912 [02:12<04:44,  2.31it/s] 28%|██▊       | 255/912 [02:13<05:28,  2.00it/s] 28%|██▊       | 256/912 [02:13<04:54,  2.22it/s] 28%|██▊       | 257/912 [02:14<05:33,  1.96it/s] 28%|██▊       | 258/912 [02:15<06:29,  1.68it/s] 28%|██▊       | 259/912 [02:15<05:09,  2.11it/s] 29%|██▊       | 260/912 [02:16<05:44,  1.89it/s] 29%|██▊       | 261/912 [02:16<04:32,  2.39it/s] 29%|██▊       | 262/912 [02:17<05:24,  2.00it/s] 29%|██▉       | 263/912 [02:17<04:20,  2.49it/s] 29%|██▉       | 264/912 [02:17<05:20,  2.02it/s] 29%|██▉       | 265/912 [02:18<04:22,  2.46it/s] 29%|██▉       | 266/912 [02:18<05:25,  1.99it/s] 29%|██▉       | 267/912 [02:19<06:56,  1.55it/s] 29%|██▉       | 268/912 [02:20<07:13,  1.49it/s] 29%|██▉       | 269/912 [02:21<07:16,  1.47it/s] 30%|██▉       | 270/912 [02:21<05:59,  1.78it/s] 30%|██▉       | 271/912 [02:22<06:38,  1.61it/s] 30%|██▉       | 272/912 [02:23<06:51,  1.56it/s] 30%|██▉       | 273/912 [02:23<05:14,  2.03it/s] 30%|███       | 274/912 [02:24<06:43,  1.58it/s] 30%|███       | 275/912 [02:24<06:53,  1.54it/s] 30%|███       | 276/912 [02:25<07:36,  1.39it/s] 30%|███       | 277/912 [02:25<05:50,  1.81it/s] 30%|███       | 278/912 [02:26<06:19,  1.67it/s] 31%|███       | 279/912 [02:27<07:14,  1.46it/s] 31%|███       | 280/912 [02:28<07:19,  1.44it/s] 31%|███       | 281/912 [02:28<05:38,  1.87it/s] 31%|███       | 282/912 [02:29<06:19,  1.66it/s] 31%|███       | 283/912 [02:29<04:59,  2.10it/s] 31%|███       | 284/912 [02:30<06:16,  1.67it/s] 31%|███▏      | 285/912 [02:30<05:06,  2.04it/s] 31%|███▏      | 286/912 [02:31<05:43,  1.82it/s] 31%|███▏      | 287/912 [02:31<06:17,  1.66it/s] 32%|███▏      | 288/912 [02:32<04:55,  2.11it/s] 32%|███▏      | 289/912 [02:32<05:35,  1.86it/s] 32%|███▏      | 290/912 [02:32<04:25,  2.35it/s] 32%|███▏      | 291/912 [02:33<05:14,  1.97it/s] 32%|███▏      | 292/912 [02:33<04:09,  2.49it/s] 32%|███▏      | 293/912 [02:34<05:08,  2.01it/s] 32%|███▏      | 294/912 [02:34<04:03,  2.54it/s] 32%|███▏      | 295/912 [02:35<05:03,  2.04it/s] 32%|███▏      | 296/912 [02:35<04:24,  2.33it/s] 33%|███▎      | 297/912 [02:36<05:11,  1.98it/s] 33%|███▎      | 298/912 [02:37<05:57,  1.72it/s] 33%|███▎      | 299/912 [02:37<04:51,  2.10it/s] 33%|███▎      | 300/912 [02:38<05:39,  1.80it/s] 33%|███▎      | 301/912 [02:38<06:07,  1.66it/s] 33%|███▎      | 302/912 [02:38<04:51,  2.09it/s] 33%|███▎      | 303/912 [02:39<06:10,  1.64it/s] 33%|███▎      | 304/912 [02:40<06:20,  1.60it/s] 33%|███▎      | 305/912 [02:40<05:12,  1.94it/s] 34%|███▎      | 306/912 [02:41<06:12,  1.63it/s] 34%|███▎      | 307/912 [02:42<06:28,  1.56it/s] 34%|███▍      | 308/912 [02:42<05:12,  1.93it/s] 34%|███▍      | 309/912 [02:43<06:14,  1.61it/s] 34%|███▍      | 310/912 [02:43<05:04,  1.98it/s] 34%|███▍      | 311/912 [02:44<05:30,  1.82it/s] 34%|███▍      | 312/912 [02:44<04:29,  2.23it/s] 34%|███▍      | 313/912 [02:45<05:06,  1.95it/s] 34%|███▍      | 314/912 [02:45<04:07,  2.42it/s] 35%|███▍      | 315/912 [02:46<04:53,  2.03it/s] 35%|███▍      | 316/912 [02:46<03:54,  2.55it/s] 35%|███▍      | 317/912 [02:46<04:50,  2.05it/s] 35%|███▍      | 318/912 [02:47<03:57,  2.50it/s] 35%|███▍      | 319/912 [02:47<04:47,  2.06it/s] 35%|███▌      | 320/912 [02:47<03:52,  2.55it/s] 35%|███▌      | 321/912 [02:48<04:54,  2.01it/s] 35%|███▌      | 322/912 [02:48<04:06,  2.39it/s] 35%|███▌      | 323/912 [02:49<05:09,  1.90it/s] 36%|███▌      | 324/912 [02:50<05:35,  1.75it/s] 36%|███▌      | 325/912 [02:50<04:21,  2.25it/s] 36%|███▌      | 326/912 [02:51<05:16,  1.85it/s] 36%|███▌      | 327/912 [02:52<05:49,  1.67it/s] 36%|███▌      | 328/912 [02:52<04:46,  2.04it/s] 36%|███▌      | 329/912 [02:52<05:26,  1.78it/s] 36%|███▌      | 330/912 [02:53<04:29,  2.16it/s] 36%|███▋      | 331/912 [02:54<07:17,  1.33it/s] 36%|███▋      | 332/912 [02:54<05:34,  1.74it/s] 37%|███▋      | 333/912 [02:55<06:07,  1.58it/s] 37%|███▋      | 334/912 [02:56<06:30,  1.48it/s] 37%|███▋      | 335/912 [02:56<05:04,  1.89it/s] 37%|███▋      | 336/912 [02:57<05:35,  1.72it/s] 37%|███▋      | 337/912 [02:58<06:05,  1.57it/s] 37%|███▋      | 338/912 [02:58<04:46,  2.01it/s] 37%|███▋      | 339/912 [02:59<07:26,  1.28it/s] 37%|███▋      | 340/912 [02:59<05:37,  1.69it/s] 37%|███▋      | 341/912 [03:00<04:38,  2.05it/s] 38%|███▊      | 342/912 [03:01<07:01,  1.35it/s] 38%|███▊      | 343/912 [03:01<05:48,  1.63it/s] 38%|███▊      | 344/912 [03:02<05:54,  1.60it/s] 38%|███▊      | 345/912 [03:02<04:34,  2.07it/s] 38%|███▊      | 346/912 [03:03<05:09,  1.83it/s] 38%|███▊      | 347/912 [03:03<05:55,  1.59it/s] 38%|███▊      | 348/912 [03:04<06:19,  1.49it/s] 38%|███▊      | 349/912 [03:05<05:07,  1.83it/s] 38%|███▊      | 350/912 [03:05<05:38,  1.66it/s] 38%|███▊      | 351/912 [03:06<05:53,  1.59it/s] 39%|███▊      | 352/912 [03:06<04:42,  1.98it/s] 39%|███▊      | 353/912 [03:07<05:13,  1.78it/s] 39%|███▉      | 354/912 [03:07<04:10,  2.23it/s] 39%|███▉      | 355/912 [03:08<05:00,  1.85it/s] 39%|███▉      | 356/912 [03:08<04:05,  2.27it/s] 39%|███▉      | 357/912 [03:09<04:40,  1.98it/s] 39%|███▉      | 358/912 [03:09<03:51,  2.39it/s] 39%|███▉      | 359/912 [03:10<04:33,  2.02it/s] 39%|███▉      | 360/912 [03:10<03:47,  2.42it/s] 40%|███▉      | 361/912 [03:10<04:36,  1.99it/s] 40%|███▉      | 362/912 [03:11<05:16,  1.74it/s] 40%|███▉      | 363/912 [03:11<04:11,  2.18it/s] 40%|███▉      | 364/912 [03:12<04:50,  1.88it/s] 40%|████      | 365/912 [03:13<05:33,  1.64it/s] 40%|████      | 366/912 [03:13<04:18,  2.11it/s] 40%|████      | 367/912 [03:13<03:36,  2.51it/s] 40%|████      | 368/912 [03:14<04:18,  2.11it/s] 40%|████      | 369/912 [03:15<04:58,  1.82it/s] 41%|████      | 370/912 [03:15<03:55,  2.30it/s] 41%|████      | 371/912 [03:16<04:46,  1.89it/s] 41%|████      | 372/912 [03:16<03:55,  2.29it/s] 41%|████      | 373/912 [03:17<04:44,  1.90it/s] 41%|████      | 374/912 [03:17<03:59,  2.24it/s] 41%|████      | 375/912 [03:17<04:33,  1.97it/s] 41%|████      | 376/912 [03:18<05:21,  1.66it/s] 41%|████▏     | 377/912 [03:18<04:15,  2.09it/s] 41%|████▏     | 378/912 [03:19<04:37,  1.93it/s] 42%|████▏     | 379/912 [03:19<03:48,  2.33it/s] 42%|████▏     | 380/912 [03:20<04:35,  1.93it/s] 42%|████▏     | 381/912 [03:20<03:45,  2.36it/s] 42%|████▏     | 382/912 [03:21<04:34,  1.93it/s] 42%|████▏     | 383/912 [03:22<05:13,  1.69it/s] 42%|████▏     | 384/912 [03:22<04:14,  2.07it/s] 42%|████▏     | 385/912 [03:23<04:53,  1.79it/s] 42%|████▏     | 386/912 [03:23<05:16,  1.66it/s] 42%|████▏     | 387/912 [03:24<04:11,  2.09it/s] 43%|████▎     | 388/912 [03:24<05:00,  1.74it/s] 43%|████▎     | 389/912 [03:25<05:20,  1.63it/s] 43%|████▎     | 390/912 [03:25<04:29,  1.94it/s] 43%|████▎     | 391/912 [03:26<05:01,  1.73it/s] 43%|████▎     | 392/912 [03:27<05:20,  1.62it/s] 43%|████▎     | 393/912 [03:27<04:05,  2.12it/s] 43%|████▎     | 394/912 [03:28<04:42,  1.83it/s] 43%|████▎     | 395/912 [03:28<03:49,  2.26it/s] 43%|████▎     | 396/912 [03:29<06:49,  1.26it/s] 44%|████▎     | 397/912 [03:30<06:42,  1.28it/s] 44%|████▎     | 398/912 [03:30<05:16,  1.62it/s] 44%|████▍     | 399/912 [03:31<05:31,  1.55it/s] 44%|████▍     | 400/912 [03:32<05:40,  1.50it/s] 44%|████▍     | 401/912 [03:32<04:27,  1.91it/s] 44%|████▍     | 402/912 [03:33<04:54,  1.73it/s] 44%|████▍     | 403/912 [03:33<03:55,  2.16it/s] 44%|████▍     | 404/912 [03:34<04:27,  1.90it/s] 44%|████▍     | 405/912 [03:34<03:43,  2.27it/s] 45%|████▍     | 406/912 [03:35<04:20,  1.94it/s] 45%|████▍     | 407/912 [03:35<03:36,  2.34it/s] 45%|████▍     | 408/912 [03:35<04:05,  2.05it/s] 45%|████▍     | 409/912 [03:36<03:30,  2.39it/s] 45%|████▍     | 410/912 [03:36<04:02,  2.07it/s] 45%|████▌     | 411/912 [03:36<03:15,  2.56it/s] 45%|████▌     | 412/912 [03:37<04:01,  2.07it/s] 45%|████▌     | 413/912 [03:38<04:39,  1.79it/s] 45%|████▌     | 414/912 [03:38<03:39,  2.27it/s] 46%|████▌     | 415/912 [03:38<03:07,  2.65it/s] 46%|████▌     | 416/912 [03:39<03:49,  2.16it/s] 46%|████▌     | 417/912 [03:39<03:10,  2.60it/s] 46%|████▌     | 418/912 [03:40<03:46,  2.18it/s] 46%|████▌     | 419/912 [03:41<04:31,  1.82it/s] 46%|████▌     | 420/912 [03:41<03:53,  2.11it/s] 46%|████▌     | 421/912 [03:41<04:16,  1.91it/s] 46%|████▋     | 422/912 [03:42<03:25,  2.39it/s] 46%|████▋     | 423/912 [03:42<04:13,  1.93it/s] 46%|████▋     | 424/912 [03:43<03:22,  2.41it/s] 47%|████▋     | 425/912 [03:43<04:06,  1.98it/s] 47%|████▋     | 426/912 [03:44<04:44,  1.71it/s] 47%|████▋     | 427/912 [03:44<03:48,  2.12it/s] 47%|████▋     | 428/912 [03:45<04:18,  1.87it/s] 47%|████▋     | 429/912 [03:45<03:26,  2.34it/s] 47%|████▋     | 430/912 [03:46<04:16,  1.88it/s] 47%|████▋     | 431/912 [03:47<04:43,  1.70it/s] 47%|████▋     | 432/912 [03:47<03:44,  2.14it/s] 47%|████▋     | 433/912 [03:48<04:16,  1.87it/s] 48%|████▊     | 434/912 [03:48<03:19,  2.40it/s] 48%|████▊     | 435/912 [03:48<04:03,  1.96it/s] 48%|████▊     | 436/912 [03:49<04:55,  1.61it/s] 48%|████▊     | 437/912 [03:50<04:00,  1.98it/s] 48%|████▊     | 438/912 [03:50<04:30,  1.75it/s] 48%|████▊     | 439/912 [03:50<03:42,  2.13it/s] 48%|████▊     | 440/912 [03:51<04:33,  1.73it/s] 48%|████▊     | 441/912 [03:52<04:39,  1.69it/s] 48%|████▊     | 442/912 [03:53<05:02,  1.55it/s] 49%|████▊     | 443/912 [03:53<04:00,  1.95it/s] 49%|████▊     | 444/912 [03:54<04:35,  1.70it/s] 49%|████▉     | 445/912 [03:54<04:50,  1.61it/s] 49%|████▉     | 446/912 [03:55<03:56,  1.97it/s] 49%|████▉     | 447/912 [03:55<04:20,  1.78it/s] 49%|████▉     | 448/912 [03:55<03:30,  2.21it/s] 49%|████▉     | 449/912 [03:56<04:04,  1.89it/s] 49%|████▉     | 450/912 [03:56<03:11,  2.41it/s] 49%|████▉     | 451/912 [03:57<04:01,  1.91it/s] 50%|████▉     | 452/912 [03:57<03:22,  2.27it/s] 50%|████▉     | 453/912 [03:58<03:49,  2.00it/s] 50%|████▉     | 454/912 [03:58<03:05,  2.47it/s] 50%|████▉     | 455/912 [03:59<03:38,  2.09it/s] 50%|█████     | 456/912 [03:59<03:01,  2.51it/s] 50%|█████     | 457/912 [04:00<03:33,  2.13it/s] 50%|█████     | 458/912 [04:00<04:15,  1.78it/s] 50%|█████     | 459/912 [04:01<03:23,  2.23it/s] 50%|█████     | 460/912 [04:01<04:00,  1.88it/s] 51%|█████     | 461/912 [04:02<04:53,  1.54it/s] 51%|█████     | 462/912 [04:03<04:57,  1.51it/s] 51%|█████     | 463/912 [04:03<03:48,  1.96it/s] 51%|█████     | 464/912 [04:04<04:21,  1.71it/s] 51%|█████     | 465/912 [04:04<03:23,  2.20it/s] 51%|█████     | 466/912 [04:05<03:55,  1.90it/s] 51%|█████     | 467/912 [04:05<03:15,  2.28it/s] 51%|█████▏    | 468/912 [04:06<04:03,  1.83it/s] 51%|█████▏    | 469/912 [04:06<04:20,  1.70it/s] 52%|█████▏    | 470/912 [04:07<03:24,  2.16it/s] 52%|█████▏    | 471/912 [04:07<03:41,  1.99it/s] 52%|█████▏    | 472/912 [04:08<03:12,  2.29it/s] 52%|█████▏    | 473/912 [04:08<03:46,  1.94it/s] 52%|█████▏    | 474/912 [04:09<03:25,  2.13it/s] 52%|█████▏    | 475/912 [04:09<03:51,  1.89it/s] 52%|█████▏    | 476/912 [04:10<04:26,  1.64it/s] 52%|█████▏    | 477/912 [04:10<03:33,  2.04it/s] 52%|█████▏    | 478/912 [04:11<03:53,  1.86it/s] 53%|█████▎    | 479/912 [04:11<03:04,  2.35it/s] 53%|█████▎    | 480/912 [04:12<03:45,  1.92it/s] 53%|█████▎    | 481/912 [04:12<03:06,  2.31it/s] 53%|█████▎    | 482/912 [04:13<03:39,  1.96it/s] 53%|█████▎    | 483/912 [04:13<04:08,  1.73it/s] 53%|█████▎    | 484/912 [04:14<03:22,  2.11it/s] 53%|█████▎    | 485/912 [04:14<03:45,  1.89it/s] 53%|█████▎    | 486/912 [04:15<04:24,  1.61it/s] 53%|█████▎    | 487/912 [04:15<03:24,  2.08it/s] 54%|█████▎    | 488/912 [04:16<03:50,  1.84it/s] 54%|█████▎    | 489/912 [04:16<03:06,  2.27it/s] 54%|█████▎    | 490/912 [04:17<03:39,  1.92it/s] 54%|█████▍    | 491/912 [04:17<03:00,  2.33it/s] 54%|█████▍    | 492/912 [04:18<03:46,  1.85it/s] 54%|█████▍    | 493/912 [04:19<04:13,  1.66it/s] 54%|█████▍    | 494/912 [04:19<03:20,  2.09it/s] 54%|█████▍    | 495/912 [04:20<03:46,  1.84it/s] 54%|█████▍    | 496/912 [04:20<04:07,  1.68it/s] 54%|█████▍    | 497/912 [04:20<03:11,  2.17it/s] 55%|█████▍    | 498/912 [04:21<03:48,  1.81it/s] 55%|█████▍    | 499/912 [04:21<03:00,  2.29it/s] 55%|█████▍    | 500/912 [04:22<03:33,  1.93it/s] 55%|█████▍    | 501/912 [04:23<04:15,  1.61it/s] 55%|█████▌    | 502/912 [04:23<03:16,  2.09it/s] 55%|█████▌    | 503/912 [04:24<03:52,  1.76it/s] 55%|█████▌    | 504/912 [04:24<03:13,  2.11it/s] 55%|█████▌    | 505/912 [04:25<03:33,  1.91it/s] 55%|█████▌    | 506/912 [04:25<02:58,  2.27it/s] 56%|█████▌    | 507/912 [04:26<04:58,  1.36it/s] 56%|█████▌    | 508/912 [04:27<03:49,  1.76it/s] 56%|█████▌    | 509/912 [04:27<04:03,  1.65it/s] 56%|█████▌    | 510/912 [04:27<03:07,  2.14it/s] 56%|█████▌    | 511/912 [04:28<03:42,  1.80it/s] 56%|█████▌    | 512/912 [04:28<03:00,  2.21it/s] 56%|█████▋    | 513/912 [04:29<03:25,  1.94it/s] 56%|█████▋    | 514/912 [04:30<03:58,  1.67it/s] 56%|█████▋    | 515/912 [04:30<03:04,  2.15it/s] 57%|█████▋    | 516/912 [04:31<03:38,  1.81it/s] 57%|█████▋    | 517/912 [04:31<02:53,  2.28it/s] 57%|█████▋    | 518/912 [04:32<03:39,  1.79it/s] 57%|█████▋    | 519/912 [04:33<05:26,  1.20it/s] 57%|█████▋    | 520/912 [04:33<04:04,  1.61it/s] 57%|█████▋    | 521/912 [04:34<04:13,  1.54it/s] 57%|█████▋    | 522/912 [04:34<03:30,  1.85it/s] 57%|█████▋    | 523/912 [04:35<03:43,  1.74it/s] 57%|█████▋    | 524/912 [04:35<03:01,  2.13it/s] 58%|█████▊    | 525/912 [04:36<03:27,  1.87it/s] 58%|█████▊    | 526/912 [04:37<03:46,  1.70it/s] 58%|█████▊    | 527/912 [04:37<03:00,  2.13it/s] 58%|█████▊    | 528/912 [04:38<03:27,  1.85it/s] 58%|█████▊    | 529/912 [04:38<02:54,  2.19it/s] 58%|█████▊    | 530/912 [04:39<03:21,  1.89it/s] 58%|█████▊    | 531/912 [04:39<02:43,  2.33it/s] 58%|█████▊    | 532/912 [04:39<03:07,  2.03it/s] 58%|█████▊    | 533/912 [04:40<02:41,  2.35it/s] 59%|█████▊    | 534/912 [04:40<03:03,  2.06it/s] 59%|█████▊    | 535/912 [04:41<02:35,  2.42it/s] 59%|█████▉    | 536/912 [04:41<03:14,  1.93it/s] 59%|█████▉    | 537/912 [04:42<03:33,  1.76it/s] 59%|█████▉    | 538/912 [04:42<02:50,  2.19it/s] 59%|█████▉    | 539/912 [04:43<03:36,  1.72it/s] 59%|█████▉    | 540/912 [04:44<03:42,  1.67it/s] 59%|█████▉    | 541/912 [04:44<03:00,  2.06it/s] 59%|█████▉    | 542/912 [04:45<03:19,  1.85it/s] 60%|█████▉    | 543/912 [04:45<02:48,  2.19it/s] 60%|█████▉    | 544/912 [04:45<03:10,  1.93it/s] 60%|█████▉    | 545/912 [04:46<03:45,  1.63it/s] 60%|█████▉    | 546/912 [04:47<04:01,  1.52it/s] 60%|█████▉    | 547/912 [04:48<04:32,  1.34it/s] 60%|██████    | 548/912 [04:49<04:30,  1.34it/s] 60%|██████    | 549/912 [04:49<03:30,  1.73it/s] 60%|██████    | 550/912 [04:50<03:56,  1.53it/s] 60%|██████    | 551/912 [04:51<04:07,  1.46it/s] 61%|██████    | 552/912 [04:51<04:13,  1.42it/s] 61%|██████    | 553/912 [04:52<03:29,  1.72it/s] 61%|██████    | 554/912 [04:52<03:33,  1.67it/s] 61%|██████    | 555/912 [04:52<02:56,  2.02it/s] 61%|██████    | 556/912 [04:53<03:08,  1.88it/s] 61%|██████    | 557/912 [04:53<02:39,  2.23it/s] 61%|██████    | 558/912 [04:54<03:06,  1.90it/s] 61%|██████▏   | 559/912 [04:55<03:32,  1.66it/s] 61%|██████▏   | 560/912 [04:55<02:53,  2.02it/s] 62%|██████▏   | 561/912 [04:56<03:08,  1.87it/s] 62%|██████▏   | 562/912 [04:56<03:28,  1.68it/s] 62%|██████▏   | 563/912 [04:57<02:56,  1.97it/s] 62%|██████▏   | 564/912 [04:57<03:14,  1.79it/s] 62%|██████▏   | 565/912 [04:58<02:35,  2.24it/s] 62%|██████▏   | 566/912 [04:58<03:02,  1.90it/s] 62%|██████▏   | 567/912 [04:59<02:27,  2.34it/s] 62%|██████▏   | 568/912 [04:59<02:53,  1.99it/s] 62%|██████▏   | 569/912 [04:59<02:20,  2.45it/s] 62%|██████▎   | 570/912 [05:00<02:48,  2.03it/s] 63%|██████▎   | 571/912 [05:00<02:19,  2.45it/s] 63%|██████▎   | 572/912 [05:01<02:45,  2.06it/s] 63%|██████▎   | 573/912 [05:01<02:12,  2.55it/s] 63%|██████▎   | 574/912 [05:02<02:44,  2.05it/s] 63%|██████▎   | 575/912 [05:03<03:25,  1.64it/s] 63%|██████▎   | 576/912 [05:04<03:41,  1.52it/s] 63%|██████▎   | 577/912 [05:04<03:55,  1.42it/s] 63%|██████▎   | 578/912 [05:05<03:13,  1.73it/s] 63%|██████▎   | 579/912 [05:05<03:20,  1.66it/s] 64%|██████▎   | 580/912 [05:06<03:38,  1.52it/s] 64%|██████▎   | 581/912 [05:06<02:48,  1.96it/s] 64%|██████▍   | 582/912 [05:07<03:06,  1.77it/s] 64%|██████▍   | 583/912 [05:07<02:24,  2.27it/s] 64%|██████▍   | 584/912 [05:07<02:04,  2.64it/s] 64%|██████▍   | 585/912 [05:08<02:33,  2.13it/s] 64%|██████▍   | 586/912 [05:09<03:01,  1.80it/s] 64%|██████▍   | 587/912 [05:09<02:21,  2.29it/s] 64%|██████▍   | 588/912 [05:10<02:51,  1.89it/s] 65%|██████▍   | 589/912 [05:10<02:21,  2.29it/s] 65%|██████▍   | 590/912 [05:11<02:41,  1.99it/s] 65%|██████▍   | 591/912 [05:11<03:05,  1.73it/s] 65%|██████▍   | 592/912 [05:12<03:32,  1.51it/s] 65%|██████▌   | 593/912 [05:12<02:44,  1.93it/s] 65%|██████▌   | 594/912 [05:13<03:02,  1.74it/s] 65%|██████▌   | 595/912 [05:13<02:21,  2.24it/s] 65%|██████▌   | 596/912 [05:14<02:53,  1.83it/s] 65%|██████▌   | 597/912 [05:14<02:22,  2.21it/s] 66%|██████▌   | 598/912 [05:15<02:40,  1.96it/s] 66%|██████▌   | 599/912 [05:15<02:10,  2.40it/s] 66%|██████▌   | 600/912 [05:16<02:38,  1.97it/s] 66%|██████▌   | 601/912 [05:16<02:58,  1.74it/s] 66%|██████▌   | 602/912 [05:17<02:22,  2.18it/s] 66%|██████▌   | 603/912 [05:17<02:44,  1.88it/s] 66%|██████▌   | 604/912 [05:18<02:21,  2.17it/s] 66%|██████▋   | 605/912 [05:18<02:42,  1.89it/s] 66%|██████▋   | 606/912 [05:19<03:14,  1.58it/s] 67%|██████▋   | 607/912 [05:20<03:25,  1.49it/s] 67%|██████▋   | 608/912 [05:20<02:45,  1.84it/s] 67%|██████▋   | 609/912 [05:21<02:54,  1.74it/s] 67%|██████▋   | 610/912 [05:21<02:24,  2.09it/s] 67%|██████▋   | 611/912 [05:23<03:55,  1.28it/s] 67%|██████▋   | 612/912 [05:23<03:54,  1.28it/s] 67%|██████▋   | 613/912 [05:24<02:57,  1.68it/s] 67%|██████▋   | 614/912 [05:24<03:03,  1.62it/s] 67%|██████▋   | 615/912 [05:24<02:21,  2.10it/s] 68%|██████▊   | 616/912 [05:26<03:52,  1.28it/s] 68%|██████▊   | 617/912 [05:26<03:00,  1.64it/s] 68%|██████▊   | 618/912 [05:27<03:09,  1.55it/s] 68%|██████▊   | 619/912 [05:27<02:28,  1.97it/s] 68%|██████▊   | 620/912 [05:28<02:42,  1.79it/s] 68%|██████▊   | 621/912 [05:28<02:09,  2.24it/s] 68%|██████▊   | 622/912 [05:29<02:35,  1.86it/s] 68%|██████▊   | 623/912 [05:29<02:07,  2.26it/s] 68%|██████▊   | 624/912 [05:29<02:21,  2.03it/s] 69%|██████▊   | 625/912 [05:30<01:58,  2.41it/s] 69%|██████▊   | 626/912 [05:30<02:22,  2.01it/s] 69%|██████▉   | 627/912 [05:31<02:42,  1.76it/s] 69%|██████▉   | 628/912 [05:31<02:08,  2.20it/s] 69%|██████▉   | 629/912 [05:32<02:33,  1.84it/s] 69%|██████▉   | 630/912 [05:32<02:09,  2.18it/s] 69%|██████▉   | 631/912 [05:33<02:31,  1.85it/s] 69%|██████▉   | 632/912 [05:34<02:45,  1.69it/s] 69%|██████▉   | 633/912 [05:34<02:09,  2.15it/s] 70%|██████▉   | 634/912 [05:35<02:35,  1.79it/s] 70%|██████▉   | 635/912 [05:35<02:45,  1.67it/s] 70%|██████▉   | 636/912 [05:36<02:19,  1.97it/s] 70%|██████▉   | 637/912 [05:36<02:32,  1.80it/s] 70%|██████▉   | 638/912 [05:37<02:00,  2.27it/s] 70%|███████   | 639/912 [05:37<02:19,  1.96it/s] 70%|███████   | 640/912 [05:37<01:55,  2.35it/s] 70%|███████   | 641/912 [05:38<02:13,  2.03it/s] 70%|███████   | 642/912 [05:38<01:48,  2.50it/s] 71%|███████   | 643/912 [05:39<02:20,  1.92it/s] 71%|███████   | 644/912 [05:40<02:34,  1.73it/s] 71%|███████   | 645/912 [05:40<02:12,  2.01it/s] 71%|███████   | 646/912 [05:41<02:35,  1.72it/s] 71%|███████   | 647/912 [05:42<02:40,  1.66it/s] 71%|███████   | 648/912 [05:42<02:04,  2.12it/s] 71%|███████   | 649/912 [05:42<02:23,  1.83it/s] 71%|███████▏  | 650/912 [05:43<01:51,  2.35it/s] 71%|███████▏  | 651/912 [05:43<02:15,  1.93it/s] 71%|███████▏  | 652/912 [05:44<01:53,  2.28it/s] 72%|███████▏  | 653/912 [05:45<03:08,  1.37it/s] 72%|███████▏  | 654/912 [05:45<02:23,  1.80it/s] 72%|███████▏  | 655/912 [05:46<02:36,  1.64it/s] 72%|███████▏  | 656/912 [05:46<02:00,  2.13it/s] 72%|███████▏  | 657/912 [05:47<02:17,  1.85it/s] 72%|███████▏  | 658/912 [05:47<01:53,  2.24it/s] 72%|███████▏  | 659/912 [05:48<02:11,  1.93it/s] 72%|███████▏  | 660/912 [05:48<01:48,  2.33it/s] 72%|███████▏  | 661/912 [05:49<02:17,  1.83it/s] 73%|███████▎  | 662/912 [05:49<02:28,  1.69it/s] 73%|███████▎  | 663/912 [05:50<02:43,  1.53it/s] 73%|███████▎  | 664/912 [05:50<02:11,  1.89it/s] 73%|███████▎  | 665/912 [05:51<02:23,  1.72it/s] 73%|███████▎  | 666/912 [05:51<02:01,  2.03it/s] 73%|███████▎  | 667/912 [05:52<02:21,  1.74it/s] 73%|███████▎  | 668/912 [05:53<02:29,  1.63it/s] 73%|███████▎  | 669/912 [05:54<02:45,  1.47it/s] 73%|███████▎  | 670/912 [05:54<02:55,  1.38it/s] 74%|███████▎  | 671/912 [05:55<02:20,  1.72it/s] 74%|███████▎  | 672/912 [05:55<02:24,  1.66it/s] 74%|███████▍  | 673/912 [05:56<02:34,  1.55it/s] 74%|███████▍  | 674/912 [05:56<02:03,  1.92it/s] 74%|███████▍  | 675/912 [05:57<02:16,  1.73it/s] 74%|███████▍  | 676/912 [05:58<02:34,  1.53it/s] 74%|███████▍  | 677/912 [05:58<02:05,  1.88it/s] 74%|███████▍  | 678/912 [05:59<02:15,  1.73it/s] 74%|███████▍  | 679/912 [05:59<01:50,  2.12it/s] 75%|███████▍  | 680/912 [06:00<02:04,  1.87it/s] 75%|███████▍  | 681/912 [06:01<02:19,  1.66it/s] 75%|███████▍  | 682/912 [06:01<02:32,  1.50it/s] 75%|███████▍  | 683/912 [06:02<02:01,  1.88it/s] 75%|███████▌  | 684/912 [06:02<02:24,  1.57it/s] 75%|███████▌  | 685/912 [06:03<02:26,  1.54it/s] 75%|███████▌  | 686/912 [06:04<02:32,  1.48it/s] 75%|███████▌  | 687/912 [06:05<02:48,  1.34it/s] 75%|███████▌  | 688/912 [06:05<02:08,  1.74it/s] 76%|███████▌  | 689/912 [06:06<02:24,  1.54it/s] 76%|███████▌  | 690/912 [06:06<02:31,  1.47it/s] 76%|███████▌  | 691/912 [06:07<02:40,  1.38it/s] 76%|███████▌  | 692/912 [06:08<02:04,  1.77it/s] 76%|███████▌  | 693/912 [06:08<02:12,  1.66it/s] 76%|███████▌  | 694/912 [06:08<01:46,  2.04it/s] 76%|███████▌  | 695/912 [06:09<02:04,  1.74it/s] 76%|███████▋  | 696/912 [06:10<02:11,  1.64it/s] 76%|███████▋  | 697/912 [06:10<01:46,  2.01it/s] 77%|███████▋  | 698/912 [06:12<02:42,  1.32it/s] 77%|███████▋  | 699/912 [06:12<02:06,  1.68it/s] 77%|███████▋  | 700/912 [06:12<02:13,  1.59it/s] 77%|███████▋  | 701/912 [06:13<02:25,  1.45it/s] 77%|███████▋  | 702/912 [06:14<01:57,  1.79it/s] 77%|███████▋  | 703/912 [06:14<02:06,  1.65it/s] 77%|███████▋  | 704/912 [06:15<02:20,  1.48it/s] 77%|███████▋  | 705/912 [06:16<02:31,  1.37it/s] 77%|███████▋  | 706/912 [06:16<02:05,  1.65it/s] 78%|███████▊  | 707/912 [06:17<02:06,  1.63it/s] 78%|███████▊  | 708/912 [06:18<02:11,  1.55it/s] 78%|███████▊  | 709/912 [06:18<01:50,  1.84it/s] 78%|███████▊  | 710/912 [06:19<02:00,  1.68it/s] 78%|███████▊  | 711/912 [06:19<02:06,  1.59it/s] 78%|███████▊  | 712/912 [06:20<01:43,  1.93it/s] 78%|███████▊  | 713/912 [06:20<01:57,  1.69it/s] 78%|███████▊  | 714/912 [06:22<02:49,  1.17it/s] 78%|███████▊  | 715/912 [06:22<02:11,  1.50it/s] 79%|███████▊  | 716/912 [06:23<02:16,  1.43it/s] 79%|███████▊  | 717/912 [06:24<02:18,  1.41it/s] 79%|███████▊  | 718/912 [06:25<02:32,  1.27it/s] 79%|███████▉  | 719/912 [06:25<02:31,  1.28it/s] 79%|███████▉  | 720/912 [06:26<02:29,  1.28it/s] 79%|███████▉  | 721/912 [06:27<02:34,  1.23it/s] 79%|███████▉  | 722/912 [06:28<02:29,  1.27it/s] 79%|███████▉  | 723/912 [06:29<02:34,  1.23it/s] 79%|███████▉  | 724/912 [06:29<02:03,  1.53it/s] 79%|███████▉  | 725/912 [06:30<02:10,  1.44it/s] 80%|███████▉  | 726/912 [06:30<02:12,  1.41it/s] 80%|███████▉  | 727/912 [06:32<03:04,  1.00it/s] 80%|███████▉  | 728/912 [06:33<02:52,  1.07it/s] 80%|███████▉  | 729/912 [06:33<02:11,  1.40it/s] 80%|████████  | 730/912 [06:34<02:09,  1.41it/s] 80%|████████  | 731/912 [06:34<02:11,  1.38it/s] 80%|████████  | 732/912 [06:35<01:42,  1.76it/s] 80%|████████  | 733/912 [06:35<01:49,  1.63it/s] 80%|████████  | 734/912 [06:36<01:31,  1.95it/s] 81%|████████  | 735/912 [06:36<01:38,  1.80it/s] 81%|████████  | 736/912 [06:37<01:21,  2.15it/s] 81%|████████  | 737/912 [06:37<01:41,  1.72it/s] 81%|████████  | 738/912 [06:38<01:46,  1.63it/s] 81%|████████  | 739/912 [06:39<01:51,  1.55it/s] 81%|████████  | 740/912 [06:39<01:29,  1.92it/s] 81%|████████▏ | 741/912 [06:40<01:38,  1.73it/s] 81%|████████▏ | 742/912 [06:41<01:45,  1.61it/s] 81%|████████▏ | 743/912 [06:41<01:24,  2.00it/s] 82%|████████▏ | 744/912 [06:41<01:34,  1.78it/s] 82%|████████▏ | 745/912 [06:42<01:54,  1.46it/s] 82%|████████▏ | 746/912 [06:44<02:30,  1.10it/s] 82%|████████▏ | 747/912 [06:44<01:54,  1.44it/s] 82%|████████▏ | 748/912 [06:45<01:55,  1.42it/s] 82%|████████▏ | 749/912 [06:45<01:33,  1.75it/s] 82%|████████▏ | 750/912 [06:46<01:38,  1.65it/s] 82%|████████▏ | 751/912 [06:47<02:21,  1.14it/s] 82%|████████▏ | 752/912 [06:47<01:47,  1.49it/s] 83%|████████▎ | 753/912 [06:48<01:52,  1.41it/s] 83%|████████▎ | 754/912 [06:49<01:58,  1.34it/s] 83%|████████▎ | 755/912 [06:50<02:08,  1.22it/s] 83%|████████▎ | 756/912 [06:51<02:01,  1.28it/s] 83%|████████▎ | 757/912 [06:51<01:56,  1.33it/s] 83%|████████▎ | 758/912 [06:52<02:02,  1.26it/s] 83%|████████▎ | 759/912 [06:53<02:00,  1.27it/s] 83%|████████▎ | 760/912 [06:54<02:04,  1.22it/s] 83%|████████▎ | 761/912 [06:55<02:01,  1.24it/s] 84%|████████▎ | 762/912 [06:55<01:35,  1.57it/s] 84%|████████▎ | 763/912 [06:56<01:37,  1.53it/s] 84%|████████▍ | 764/912 [06:56<01:19,  1.86it/s] 84%|████████▍ | 765/912 [06:57<01:24,  1.75it/s] 84%|████████▍ | 766/912 [06:57<01:08,  2.12it/s] 84%|████████▍ | 767/912 [06:57<01:15,  1.92it/s] 84%|████████▍ | 768/912 [06:58<01:26,  1.67it/s] 84%|████████▍ | 769/912 [06:59<01:12,  1.97it/s] 84%|████████▍ | 770/912 [07:00<01:49,  1.30it/s] 85%|████████▍ | 771/912 [07:00<01:26,  1.63it/s] 85%|████████▍ | 772/912 [07:01<01:30,  1.55it/s] 85%|████████▍ | 773/912 [07:02<01:35,  1.45it/s] 85%|████████▍ | 774/912 [07:02<01:38,  1.40it/s] 85%|████████▍ | 775/912 [07:03<01:18,  1.74it/s] 85%|████████▌ | 776/912 [07:03<01:24,  1.61it/s] 85%|████████▌ | 777/912 [07:04<01:35,  1.41it/s] 85%|████████▌ | 778/912 [07:05<01:34,  1.42it/s] 85%|████████▌ | 779/912 [07:05<01:14,  1.78it/s] 86%|████████▌ | 780/912 [07:06<01:20,  1.63it/s] 86%|████████▌ | 781/912 [07:07<01:25,  1.54it/s] 86%|████████▌ | 782/912 [07:07<01:07,  1.94it/s] 86%|████████▌ | 783/912 [07:08<01:12,  1.78it/s] 86%|████████▌ | 784/912 [07:08<00:57,  2.21it/s] 86%|████████▌ | 785/912 [07:09<01:12,  1.76it/s] 86%|████████▌ | 786/912 [07:09<01:17,  1.63it/s] 86%|████████▋ | 787/912 [07:10<01:01,  2.04it/s] 86%|████████▋ | 788/912 [07:10<01:11,  1.73it/s] 87%|████████▋ | 789/912 [07:11<01:16,  1.62it/s] 87%|████████▋ | 790/912 [07:11<00:59,  2.04it/s] 87%|████████▋ | 791/912 [07:12<01:09,  1.75it/s] 87%|████████▋ | 792/912 [07:12<00:55,  2.15it/s] 87%|████████▋ | 793/912 [07:13<01:04,  1.85it/s] 87%|████████▋ | 794/912 [07:14<01:12,  1.63it/s] 87%|████████▋ | 795/912 [07:14<00:59,  1.96it/s] 87%|████████▋ | 796/912 [07:15<01:04,  1.80it/s] 87%|████████▋ | 797/912 [07:15<01:10,  1.64it/s] 88%|████████▊ | 798/912 [07:16<00:54,  2.08it/s] 88%|████████▊ | 799/912 [07:16<01:03,  1.77it/s] 88%|████████▊ | 800/912 [07:17<01:13,  1.52it/s] 88%|████████▊ | 801/912 [07:18<01:16,  1.45it/s] 88%|████████▊ | 802/912 [07:19<01:24,  1.31it/s] 88%|████████▊ | 803/912 [07:19<01:06,  1.63it/s] 88%|████████▊ | 804/912 [07:20<01:07,  1.59it/s] 88%|████████▊ | 805/912 [07:21<01:09,  1.54it/s] 88%|████████▊ | 806/912 [07:21<00:54,  1.95it/s] 88%|████████▊ | 807/912 [07:21<01:00,  1.74it/s] 89%|████████▊ | 808/912 [07:22<00:47,  2.19it/s] 89%|████████▊ | 809/912 [07:22<00:54,  1.88it/s] 89%|████████▉ | 810/912 [07:23<00:47,  2.14it/s] 89%|████████▉ | 811/912 [07:23<00:53,  1.88it/s] 89%|████████▉ | 812/912 [07:24<00:59,  1.69it/s] 89%|████████▉ | 813/912 [07:24<00:47,  2.08it/s] 89%|████████▉ | 814/912 [07:25<01:00,  1.63it/s] 89%|████████▉ | 815/912 [07:26<00:59,  1.63it/s] 89%|████████▉ | 816/912 [07:27<01:06,  1.45it/s] 90%|████████▉ | 817/912 [07:27<01:06,  1.44it/s] 90%|████████▉ | 818/912 [07:28<00:50,  1.87it/s] 90%|████████▉ | 819/912 [07:28<00:55,  1.68it/s] 90%|████████▉ | 820/912 [07:28<00:42,  2.18it/s] 90%|█████████ | 821/912 [07:29<00:48,  1.88it/s] 90%|█████████ | 822/912 [07:29<00:38,  2.33it/s] 90%|█████████ | 823/912 [07:30<00:44,  1.99it/s] 90%|█████████ | 824/912 [07:30<00:38,  2.31it/s] 90%|█████████ | 825/912 [07:31<00:45,  1.93it/s] 91%|█████████ | 826/912 [07:32<00:49,  1.74it/s] 91%|█████████ | 827/912 [07:32<00:38,  2.20it/s] 91%|█████████ | 828/912 [07:32<00:32,  2.60it/s] 91%|█████████ | 829/912 [07:33<00:38,  2.15it/s] 91%|█████████ | 830/912 [07:33<00:44,  1.84it/s] 91%|█████████ | 831/912 [07:34<00:51,  1.57it/s] 91%|█████████ | 832/912 [07:35<00:56,  1.42it/s] 91%|█████████▏| 833/912 [07:36<00:47,  1.68it/s] 91%|█████████▏| 834/912 [07:36<00:48,  1.62it/s] 92%|█████████▏| 835/912 [07:37<00:49,  1.54it/s] 92%|█████████▏| 836/912 [07:37<00:38,  1.98it/s] 92%|█████████▏| 837/912 [07:38<00:45,  1.65it/s] 92%|█████████▏| 838/912 [07:39<00:47,  1.55it/s] 92%|█████████▏| 839/912 [07:39<00:36,  2.03it/s] 92%|█████████▏| 840/912 [07:40<00:41,  1.73it/s] 92%|█████████▏| 841/912 [07:40<00:32,  2.19it/s] 92%|█████████▏| 842/912 [07:41<00:37,  1.87it/s] 92%|█████████▏| 843/912 [07:41<00:42,  1.63it/s] 93%|█████████▎| 844/912 [07:41<00:33,  2.04it/s] 93%|█████████▎| 845/912 [07:42<00:36,  1.84it/s] 93%|█████████▎| 846/912 [07:43<00:41,  1.58it/s] 93%|█████████▎| 847/912 [07:43<00:32,  1.97it/s] 93%|█████████▎| 848/912 [07:44<00:35,  1.80it/s] 93%|█████████▎| 849/912 [07:45<00:38,  1.62it/s] 93%|█████████▎| 850/912 [07:45<00:32,  1.90it/s] 93%|█████████▎| 851/912 [07:46<00:48,  1.26it/s] 93%|█████████▎| 852/912 [07:47<00:36,  1.67it/s] 94%|█████████▎| 853/912 [07:47<00:37,  1.57it/s] 94%|█████████▎| 854/912 [07:48<00:31,  1.87it/s] 94%|█████████▍| 855/912 [07:48<00:35,  1.60it/s] 94%|█████████▍| 856/912 [07:49<00:35,  1.59it/s] 94%|█████████▍| 857/912 [07:49<00:28,  1.96it/s] 94%|█████████▍| 858/912 [07:50<00:29,  1.82it/s] 94%|█████████▍| 859/912 [07:51<00:32,  1.62it/s] 94%|█████████▍| 860/912 [07:51<00:25,  2.02it/s] 94%|█████████▍| 861/912 [07:52<00:28,  1.81it/s] 95%|█████████▍| 862/912 [07:52<00:21,  2.32it/s] 95%|█████████▍| 863/912 [07:52<00:25,  1.93it/s] 95%|█████████▍| 864/912 [07:53<00:22,  2.16it/s] 95%|█████████▍| 865/912 [07:53<00:24,  1.93it/s] 95%|█████████▍| 866/912 [07:54<00:26,  1.76it/s] 95%|█████████▌| 867/912 [07:54<00:20,  2.19it/s] 95%|█████████▌| 868/912 [07:55<00:24,  1.78it/s] 95%|█████████▌| 869/912 [07:55<00:19,  2.18it/s] 95%|█████████▌| 870/912 [07:56<00:21,  1.92it/s] 96%|█████████▌| 871/912 [07:57<00:23,  1.72it/s] 96%|█████████▌| 872/912 [07:58<00:26,  1.49it/s] 96%|█████████▌| 873/912 [07:58<00:19,  1.96it/s] 96%|█████████▌| 874/912 [07:58<00:21,  1.75it/s] 96%|█████████▌| 875/912 [07:59<00:16,  2.25it/s] 96%|█████████▌| 876/912 [07:59<00:19,  1.83it/s] 96%|█████████▌| 877/912 [08:00<00:15,  2.29it/s] 96%|█████████▋| 878/912 [08:00<00:18,  1.88it/s] 96%|█████████▋| 879/912 [08:01<00:14,  2.28it/s] 96%|█████████▋| 880/912 [08:01<00:16,  1.97it/s] 97%|█████████▋| 881/912 [08:02<00:17,  1.77it/s] 97%|█████████▋| 882/912 [08:02<00:13,  2.20it/s] 97%|█████████▋| 883/912 [08:03<00:15,  1.86it/s] 97%|█████████▋| 884/912 [08:04<00:17,  1.57it/s] 97%|█████████▋| 885/912 [08:04<00:13,  2.03it/s] 97%|█████████▋| 886/912 [08:05<00:14,  1.81it/s] 97%|█████████▋| 887/912 [08:05<00:10,  2.30it/s] 97%|█████████▋| 888/912 [08:05<00:12,  1.93it/s] 97%|█████████▋| 889/912 [08:06<00:09,  2.43it/s] 98%|█████████▊| 890/912 [08:06<00:10,  2.00it/s] 98%|█████████▊| 891/912 [08:06<00:08,  2.45it/s] 98%|█████████▊| 892/912 [08:07<00:10,  1.84it/s] 98%|█████████▊| 893/912 [08:08<00:11,  1.66it/s] 98%|█████████▊| 894/912 [08:08<00:08,  2.04it/s] 98%|█████████▊| 895/912 [08:09<00:09,  1.81it/s] 98%|█████████▊| 896/912 [08:10<00:09,  1.66it/s] 98%|█████████▊| 897/912 [08:11<00:10,  1.48it/s] 98%|█████████▊| 898/912 [08:11<00:07,  1.95it/s] 99%|█████████▊| 899/912 [08:11<00:05,  2.34it/s] 99%|█████████▊| 900/912 [08:12<00:05,  2.03it/s] 99%|█████████▉| 901/912 [08:12<00:04,  2.44it/s] 99%|█████████▉| 902/912 [08:13<00:04,  2.01it/s] 99%|█████████▉| 903/912 [08:13<00:05,  1.59it/s] 99%|█████████▉| 904/912 [08:14<00:05,  1.57it/s] 99%|█████████▉| 905/912 [08:14<00:03,  1.98it/s] 99%|█████████▉| 906/912 [08:15<00:03,  1.76it/s] 99%|█████████▉| 907/912 [08:15<00:02,  2.13it/s]100%|█████████▉| 908/912 [08:16<00:02,  1.92it/s]100%|█████████▉| 909/912 [08:16<00:01,  2.25it/s]100%|█████████▉| 910/912 [08:17<00:01,  1.99it/s]100%|█████████▉| 911/912 [08:18<00:00,  1.70it/s]100%|██████████| 912/912 [08:18<00:00,  2.08it/s]100%|██████████| 912/912 [08:18<00:00,  1.83it/s]
  0%|          | 0/4152 [00:00<?, ?it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 1/4152 [00:02<2:49:05,  2.44s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 2/4152 [00:03<2:14:30,  1.94s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 3/4152 [00:03<1:49:07,  1.58s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 4/4152 [00:04<1:19:45,  1.15s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 5/4152 [00:04<1:10:57,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 6/4152 [00:05<1:06:55,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 7/4152 [00:07<1:15:38,  1.09s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 8/4152 [00:07<1:10:58,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 9/4152 [00:08<52:59,  1.30it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 10/4152 [00:08<51:42,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 11/4152 [00:09<50:18,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 12/4152 [00:09<39:33,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 13/4152 [00:11<56:24,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 14/4152 [00:11<43:58,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 15/4152 [00:11<43:17,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 16/4152 [00:12<34:22,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 17/4152 [00:12<40:57,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 18/4152 [00:13<42:19,  1.63it/s]Preprocessing training dataset
Training data: 4152
Validation data: 461
Test data: 912
Preprocessing testing dataset
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 19/4152 [00:13<35:13,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  0%|          | 20/4152 [00:14<38:11,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 21/4152 [00:15<41:30,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 22/4152 [00:16<46:04,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 23/4152 [00:16<48:26,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 24/4152 [00:17<52:40,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 25/4152 [00:17<39:48,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 26/4152 [00:19<54:01,  1.27it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 27/4152 [00:20<56:30,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 28/4152 [00:20<57:07,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 29/4152 [00:21<43:55,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 30/4152 [00:21<44:47,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 31/4152 [00:23<1:01:00,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 32/4152 [00:23<46:17,  1.48it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 33/4152 [00:24<44:54,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 34/4152 [00:24<33:42,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 35/4152 [00:24<26:24,  2.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 36/4152 [00:25<34:15,  2.00it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 37/4152 [00:25<40:11,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 38/4152 [00:27<1:03:06,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 39/4152 [00:28<57:06,  1.20it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 40/4152 [00:28<43:39,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 41/4152 [00:29<46:44,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 42/4152 [00:29<49:35,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 43/4152 [00:30<47:20,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 44/4152 [00:30<35:21,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 45/4152 [00:30<27:26,  2.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 46/4152 [00:31<31:31,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 47/4152 [00:31<34:04,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 48/4152 [00:32<29:06,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 49/4152 [00:33<55:35,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 50/4152 [00:34<52:05,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|          | 51/4152 [00:35<56:35,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 52/4152 [00:36<53:00,  1.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 53/4152 [00:37<53:30,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 54/4152 [00:37<40:44,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 55/4152 [00:38<45:40,  1.49it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 56/4152 [00:38<45:01,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 57/4152 [00:39<48:21,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 58/4152 [00:39<37:31,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 59/4152 [00:40<39:32,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 60/4152 [00:41<43:53,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 61/4152 [00:41<33:58,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  1%|▏         | 62/4152 [00:41<26:38,  2.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 63/4152 [00:42<45:07,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 64/4152 [00:42<37:38,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 65/4152 [00:43<38:43,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 66/4152 [00:45<59:09,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 67/4152 [00:45<45:44,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 68/4152 [00:46<44:58,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 69/4152 [00:46<36:36,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 70/4152 [00:47<56:06,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 71/4152 [00:48<52:21,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 72/4152 [00:48<40:42,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 73/4152 [00:49<45:01,  1.51it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 74/4152 [00:50<51:42,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 75/4152 [00:51<48:31,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 76/4152 [00:51<37:51,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 77/4152 [00:51<42:30,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 78/4152 [00:53<59:51,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 79/4152 [00:54<58:19,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 80/4152 [00:55<56:58,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 81/4152 [00:56<1:00:01,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 82/4152 [00:56<55:16,  1.23it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 83/4152 [00:56<43:53,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 84/4152 [00:57<46:48,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 85/4152 [00:58<45:30,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 86/4152 [00:58<35:50,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 87/4152 [00:59<44:02,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 88/4152 [01:00<42:14,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 89/4152 [01:00<32:20,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 90/4152 [01:00<35:47,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 91/4152 [01:00<27:54,  2.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 92/4152 [01:01<31:55,  2.12it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 93/4152 [01:01<25:20,  2.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 94/4152 [01:01<20:29,  3.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 95/4152 [01:02<30:35,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 96/4152 [01:03<33:45,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 97/4152 [01:05<1:17:14,  1.14s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 98/4152 [01:06<1:09:01,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 99/4152 [01:07<1:00:06,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 100/4152 [01:08<1:00:05,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 101/4152 [01:08<45:29,  1.48it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 102/4152 [01:09<58:31,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  2%|▏         | 103/4152 [01:09<46:09,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 104/4152 [01:10<45:27,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 105/4152 [01:11<49:21,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 106/4152 [01:11<37:47,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 107/4152 [01:12<40:12,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 108/4152 [01:13<46:18,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 109/4152 [01:13<45:41,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 110/4152 [01:14<36:13,  1.86it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 111/4152 [01:14<41:11,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 112/4152 [01:16<55:47,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 113/4152 [01:16<42:46,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 114/4152 [01:17<47:01,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 115/4152 [01:17<45:31,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 116/4152 [01:17<35:28,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 117/4152 [01:18<37:36,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 118/4152 [01:19<46:40,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 119/4152 [01:20<45:32,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 120/4152 [01:20<35:31,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 121/4152 [01:21<38:24,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 122/4152 [01:21<30:14,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 123/4152 [01:22<37:45,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 124/4152 [01:22<38:56,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 125/4152 [01:23<43:42,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 126/4152 [01:23<34:50,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 127/4152 [01:24<37:20,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 128/4152 [01:25<40:22,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 129/4152 [01:25<30:51,  2.17it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 130/4152 [01:25<24:51,  2.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 131/4152 [01:25<28:58,  2.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 132/4152 [01:26<35:38,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 133/4152 [01:26<27:42,  2.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 134/4152 [01:27<22:09,  3.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 135/4152 [01:27<28:54,  2.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 136/4152 [01:27<22:58,  2.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 137/4152 [01:28<31:32,  2.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 138/4152 [01:29<48:33,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 139/4152 [01:30<53:49,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 140/4152 [01:31<55:01,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 141/4152 [01:32<51:01,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 142/4152 [01:32<40:11,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 143/4152 [01:33<41:02,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 144/4152 [01:34<46:43,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  3%|▎         | 145/4152 [01:34<45:58,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 146/4152 [01:35<37:51,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 147/4152 [01:35<42:02,  1.59it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 148/4152 [01:36<45:07,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 149/4152 [01:37<48:11,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 150/4152 [01:38<45:51,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 151/4152 [01:38<36:04,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 152/4152 [01:39<40:19,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 153/4152 [01:39<40:56,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 154/4152 [01:39<31:05,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▎         | 155/4152 [01:40<34:33,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 156/4152 [01:41<42:01,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 157/4152 [01:41<32:25,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 158/4152 [01:42<50:59,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 159/4152 [01:43<56:52,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 160/4152 [01:44<52:05,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 161/4152 [01:45<49:50,  1.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 162/4152 [01:45<38:17,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 163/4152 [01:46<43:59,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 164/4152 [01:48<1:17:58,  1.17s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 165/4152 [01:49<1:09:21,  1.04s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 166/4152 [01:49<52:39,  1.26it/s]  P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 167/4152 [01:50<50:17,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 168/4152 [01:50<37:24,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 169/4152 [01:51<39:10,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 170/4152 [01:51<44:20,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 171/4152 [01:52<35:10,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 172/4152 [01:53<50:41,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 173/4152 [01:53<38:55,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 174/4152 [01:54<40:42,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 175/4152 [01:55<48:38,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 176/4152 [01:55<46:06,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 177/4152 [01:56<37:25,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 178/4152 [01:56<38:46,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 179/4152 [01:56<30:40,  2.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 180/4152 [01:57<37:08,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 181/4152 [01:58<39:05,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 182/4152 [01:58<30:18,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 183/4152 [01:59<36:36,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 184/4152 [01:59<38:28,  1.72it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 185/4152 [02:00<32:04,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  4%|▍         | 186/4152 [02:01<38:29,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 187/4152 [02:01<40:08,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 188/4152 [02:02<43:26,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 189/4152 [02:02<34:00,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 190/4152 [02:03<36:48,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 191/4152 [02:03<28:22,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 192/4152 [02:04<35:43,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 193/4152 [02:04<39:27,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 194/4152 [02:05<43:48,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 195/4152 [02:06<43:55,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 196/4152 [02:06<33:42,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 197/4152 [02:07<38:43,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 198/4152 [02:07<29:57,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 199/4152 [02:08<32:56,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 200/4152 [02:08<38:47,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 201/4152 [02:09<29:50,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 202/4152 [02:09<35:23,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 203/4152 [02:10<39:16,  1.68it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 204/4152 [02:10<30:46,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 205/4152 [02:13<1:10:48,  1.08s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 206/4152 [02:13<1:03:07,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▍         | 207/4152 [02:14<47:01,  1.40it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 208/4152 [02:14<48:51,  1.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 209/4152 [02:15<50:36,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 210/4152 [02:16<47:16,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 211/4152 [02:16<35:43,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 212/4152 [02:17<37:38,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 213/4152 [02:17<29:00,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 214/4152 [02:17<35:35,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 215/4152 [02:18<28:47,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 216/4152 [02:18<35:31,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 217/4152 [02:19<37:32,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 218/4152 [02:19<29:54,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 219/4152 [02:21<47:44,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 220/4152 [02:21<38:28,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 221/4152 [02:22<39:04,  1.68it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 222/4152 [02:23<47:10,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 223/4152 [02:23<45:08,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 224/4152 [02:23<34:25,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 225/4152 [02:25<1:07:29,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 226/4152 [02:26<1:03:02,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 227/4152 [02:27<1:00:31,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  5%|▌         | 228/4152 [02:27<44:56,  1.46it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 229/4152 [02:28<43:56,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 230/4152 [02:28<34:22,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 231/4152 [02:29<37:19,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 232/4152 [02:29<29:20,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 233/4152 [02:30<32:30,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 234/4152 [02:30<26:21,  2.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 235/4152 [02:30<33:26,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 236/4152 [02:31<38:24,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 237/4152 [02:32<41:16,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 238/4152 [02:32<32:32,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 239/4152 [02:33<48:29,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 240/4152 [02:34<36:50,  1.77it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 241/4152 [02:34<29:28,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 242/4152 [02:35<46:34,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 243/4152 [02:36<50:37,  1.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 244/4152 [02:36<38:17,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 245/4152 [02:37<42:59,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 246/4152 [02:38<41:44,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 247/4152 [02:38<32:42,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 248/4152 [02:39<50:21,  1.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 249/4152 [02:40<51:05,  1.27it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 250/4152 [02:40<39:09,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 251/4152 [02:42<53:59,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 252/4152 [02:43<56:49,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 253/4152 [02:43<52:40,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 254/4152 [02:44<54:10,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 255/4152 [02:44<42:06,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 256/4152 [02:46<54:22,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 257/4152 [02:46<41:07,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 258/4152 [02:46<32:17,  2.01it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▌         | 259/4152 [02:47<34:32,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 260/4152 [02:48<53:26,  1.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 261/4152 [02:48<40:39,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 262/4152 [02:49<43:18,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 263/4152 [02:50<43:41,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 264/4152 [02:50<34:31,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 265/4152 [02:51<36:25,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 266/4152 [02:51<28:39,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 267/4152 [02:51<32:56,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 268/4152 [02:52<39:57,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  6%|▋         | 269/4152 [02:52<31:30,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 270/4152 [02:53<34:35,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 271/4152 [02:54<41:10,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 272/4152 [02:55<41:08,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 273/4152 [02:55<43:21,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 274/4152 [02:55<33:14,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 275/4152 [02:56<39:20,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 276/4152 [02:57<42:01,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 277/4152 [02:57<32:51,  1.97it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 278/4152 [02:58<37:37,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 279/4152 [02:59<39:17,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 280/4152 [02:59<41:59,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 281/4152 [03:00<33:07,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 282/4152 [03:00<35:31,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 283/4152 [03:01<40:19,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 284/4152 [03:01<31:06,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 285/4152 [03:02<34:45,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 286/4152 [03:02<27:56,  2.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 287/4152 [03:03<33:20,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 288/4152 [03:03<25:57,  2.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 289/4152 [03:04<35:03,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 290/4152 [03:04<36:12,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 291/4152 [03:05<28:50,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 292/4152 [03:05<32:56,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 293/4152 [03:06<35:12,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 294/4152 [03:06<27:55,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 295/4152 [03:07<34:24,  1.87it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 296/4152 [03:07<26:07,  2.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 297/4152 [03:08<34:10,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 298/4152 [03:08<35:52,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 299/4152 [03:09<29:36,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 300/4152 [03:09<33:16,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 301/4152 [03:09<26:04,  2.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 302/4152 [03:10<33:47,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 303/4152 [03:11<35:38,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 304/4152 [03:12<42:25,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 305/4152 [03:12<42:39,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 306/4152 [03:13<32:47,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 307/4152 [03:13<34:58,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 308/4152 [03:13<27:20,  2.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 309/4152 [03:14<34:01,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 310/4152 [03:14<26:52,  2.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  7%|▋         | 311/4152 [03:15<35:39,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 312/4152 [03:16<38:17,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 313/4152 [03:16<38:31,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 314/4152 [03:17<30:45,  2.08it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 315/4152 [03:17<34:17,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 316/4152 [03:18<38:31,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 317/4152 [03:18<29:48,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 318/4152 [03:19<34:32,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 319/4152 [03:19<26:46,  2.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 320/4152 [03:20<30:48,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 321/4152 [03:20<24:56,  2.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 322/4152 [03:21<45:49,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 323/4152 [03:22<48:32,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 324/4152 [03:23<47:03,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 325/4152 [03:24<49:44,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 326/4152 [03:24<38:08,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 327/4152 [03:25<39:36,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 328/4152 [03:25<30:33,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 329/4152 [03:26<48:16,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 330/4152 [03:26<37:13,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 331/4152 [03:27<42:48,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 332/4152 [03:28<42:02,  1.51it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 333/4152 [03:28<33:50,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 334/4152 [03:29<34:55,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 335/4152 [03:29<28:05,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 336/4152 [03:29<31:27,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 337/4152 [03:30<25:43,  2.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 338/4152 [03:30<30:45,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 339/4152 [03:31<37:22,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 340/4152 [03:32<38:05,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 341/4152 [03:33<41:29,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 342/4152 [03:33<32:28,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 343/4152 [03:33<36:52,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 344/4152 [03:34<41:34,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 345/4152 [03:35<46:34,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 346/4152 [03:36<45:16,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 347/4152 [03:37<46:25,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 348/4152 [03:38<49:29,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 349/4152 [03:38<37:03,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 350/4152 [03:38<39:16,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 351/4152 [03:39<40:33,  1.56it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  8%|▊         | 352/4152 [03:39<31:03,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 353/4152 [03:40<33:27,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 354/4152 [03:40<26:42,  2.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 355/4152 [03:40<21:18,  2.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 356/4152 [03:41<27:47,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 357/4152 [03:41<31:05,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 358/4152 [03:42<25:46,  2.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 359/4152 [03:42<30:20,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 360/4152 [03:43<39:48,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 361/4152 [03:44<39:24,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 362/4152 [03:45<46:07,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▊         | 363/4152 [03:45<35:12,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 364/4152 [03:46<36:28,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 365/4152 [03:46<28:25,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 366/4152 [03:46<31:48,  1.98it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 367/4152 [03:47<26:31,  2.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 368/4152 [03:47<31:12,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 369/4152 [03:47<24:32,  2.57it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 370/4152 [03:48<32:30,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 371/4152 [03:49<34:34,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 372/4152 [03:50<36:45,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 373/4152 [03:50<42:04,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 374/4152 [03:51<32:22,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 375/4152 [03:51<35:15,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 376/4152 [03:52<39:36,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 377/4152 [03:52<30:31,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 378/4152 [03:53<33:09,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 379/4152 [03:53<26:09,  2.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 380/4152 [03:54<32:24,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 381/4152 [03:54<26:39,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 382/4152 [03:55<30:25,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 383/4152 [03:55<24:29,  2.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 384/4152 [03:55<29:13,  2.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 385/4152 [03:56<23:29,  2.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 386/4152 [03:57<41:46,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 387/4152 [03:57<33:18,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 388/4152 [03:58<35:01,  1.79it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 389/4152 [03:58<26:59,  2.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 390/4152 [03:59<32:04,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 391/4152 [03:59<25:46,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 392/4152 [03:59<31:38,  1.98it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 393/4152 [04:00<35:21,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
  9%|▉         | 394/4152 [04:00<27:18,  2.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 395/4152 [04:01<30:28,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 396/4152 [04:01<25:14,  2.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 397/4152 [04:02<32:41,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 398/4152 [04:03<35:40,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 399/4152 [04:03<28:37,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 400/4152 [04:03<32:08,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 401/4152 [04:04<36:20,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 402/4152 [04:04<30:18,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 403/4152 [04:06<45:44,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 404/4152 [04:06<35:03,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 405/4152 [04:07<37:30,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 406/4152 [04:07<28:56,  2.16it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 407/4152 [04:07<32:59,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 408/4152 [04:08<37:59,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 409/4152 [04:10<57:15,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 410/4152 [04:10<43:58,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 411/4152 [04:11<55:18,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 412/4152 [04:12<42:07,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 413/4152 [04:12<44:44,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 414/4152 [04:13<34:53,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|▉         | 415/4152 [04:13<35:50,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 416/4152 [04:13<29:30,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 417/4152 [04:15<45:16,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 418/4152 [04:15<34:05,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 419/4152 [04:16<36:35,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 420/4152 [04:16<27:40,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 421/4152 [04:17<36:02,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 422/4152 [04:17<37:01,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 423/4152 [04:18<42:25,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 424/4152 [04:18<33:30,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 425/4152 [04:19<36:10,  1.72it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 426/4152 [04:19<28:25,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 427/4152 [04:20<31:39,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 428/4152 [04:20<25:09,  2.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 429/4152 [04:21<44:19,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 430/4152 [04:22<34:46,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 431/4152 [04:23<49:21,  1.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 432/4152 [04:23<38:08,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 433/4152 [04:24<39:08,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 434/4152 [04:25<44:01,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 10%|█         | 435/4152 [04:25<45:13,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 436/4152 [04:26<34:35,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 437/4152 [04:26<38:39,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 438/4152 [04:27<42:20,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 439/4152 [04:28<40:53,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 440/4152 [04:28<31:29,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 441/4152 [04:29<33:05,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 442/4152 [04:29<28:23,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 443/4152 [04:29<32:00,  1.93it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 444/4152 [04:30<26:13,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 445/4152 [04:31<42:33,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 446/4152 [04:31<33:20,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 447/4152 [04:32<34:57,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 448/4152 [04:32<26:55,  2.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 449/4152 [04:32<22:41,  2.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 450/4152 [04:33<27:53,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 451/4152 [04:33<21:41,  2.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 452/4152 [04:34<26:30,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 453/4152 [04:34<21:28,  2.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 454/4152 [04:34<28:43,  2.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 455/4152 [04:35<23:02,  2.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 456/4152 [04:35<30:23,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 457/4152 [04:36<32:19,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 458/4152 [04:36<25:18,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 459/4152 [04:37<30:09,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 460/4152 [04:37<24:11,  2.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 461/4152 [04:38<29:52,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 462/4152 [04:38<35:31,  1.73it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 463/4152 [04:39<40:39,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 464/4152 [04:40<32:16,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 465/4152 [04:40<35:49,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 466/4152 [04:41<38:47,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█         | 467/4152 [04:41<29:47,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 468/4152 [04:42<36:28,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 469/4152 [04:43<38:14,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 470/4152 [04:43<38:14,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 471/4152 [04:43<29:13,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 472/4152 [04:44<32:51,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 473/4152 [04:44<27:07,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 474/4152 [04:45<29:39,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 475/4152 [04:45<24:45,  2.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 476/4152 [04:46<32:11,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 11%|█▏        | 477/4152 [04:47<33:38,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 478/4152 [04:47<38:38,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 479/4152 [04:47<29:51,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 480/4152 [04:48<32:31,  1.88it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 481/4152 [04:48<24:57,  2.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 482/4152 [04:49<32:34,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 483/4152 [04:49<25:14,  2.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 484/4152 [04:50<29:19,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 485/4152 [04:50<23:16,  2.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 486/4152 [04:51<28:28,  2.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 487/4152 [04:51<23:08,  2.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 488/4152 [04:51<27:24,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 489/4152 [04:52<34:01,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 490/4152 [04:52<26:00,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 491/4152 [04:53<33:28,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 492/4152 [04:54<35:18,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 493/4152 [04:54<27:53,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 494/4152 [04:55<30:48,  1.98it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 495/4152 [04:55<23:56,  2.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 496/4152 [04:56<30:22,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 497/4152 [04:56<36:01,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 498/4152 [04:58<56:36,  1.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 499/4152 [04:59<50:56,  1.20it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 500/4152 [04:59<40:12,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 501/4152 [05:00<40:23,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 502/4152 [05:00<31:43,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 503/4152 [05:01<36:12,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 504/4152 [05:01<39:51,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 505/4152 [05:02<41:28,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 506/4152 [05:03<40:59,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 507/4152 [05:03<31:38,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 508/4152 [05:04<34:27,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 509/4152 [05:04<39:14,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 510/4152 [05:05<42:25,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 511/4152 [05:05<32:25,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 512/4152 [05:06<35:44,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 513/4152 [05:06<27:34,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 514/4152 [05:09<1:02:15,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 515/4152 [05:09<58:01,  1.04it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 516/4152 [05:10<55:31,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 517/4152 [05:11<51:55,  1.17it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▏        | 518/4152 [05:11<39:05,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 12%|█▎        | 519/4152 [05:11<30:00,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 520/4152 [05:12<31:59,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 521/4152 [05:12<25:57,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 522/4152 [05:15<1:15:42,  1.25s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 523/4152 [05:16<1:04:24,  1.07s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 524/4152 [05:17<1:00:09,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 525/4152 [05:17<45:28,  1.33it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 526/4152 [05:18<44:03,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 527/4152 [05:18<34:30,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 528/4152 [05:18<34:59,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 529/4152 [05:20<54:45,  1.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 530/4152 [05:20<40:32,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 531/4152 [05:21<40:24,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 532/4152 [05:21<31:32,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 533/4152 [05:22<33:50,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 534/4152 [05:22<38:52,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 535/4152 [05:23<42:09,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 536/4152 [05:24<41:04,  1.47it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 537/4152 [05:24<32:17,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 538/4152 [05:25<33:54,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 539/4152 [05:26<38:38,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 540/4152 [05:26<30:13,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 541/4152 [05:26<23:37,  2.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 542/4152 [05:27<30:39,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 543/4152 [05:27<33:37,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 544/4152 [05:28<36:17,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 545/4152 [05:29<40:35,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 546/4152 [05:29<32:01,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 547/4152 [05:30<33:36,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 548/4152 [05:30<26:36,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 549/4152 [05:31<44:58,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 550/4152 [05:32<34:55,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 551/4152 [05:32<35:33,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 552/4152 [05:32<28:01,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 553/4152 [05:33<32:53,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 554/4152 [05:34<34:54,  1.72it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 555/4152 [05:35<39:01,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 556/4152 [05:35<41:37,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 557/4152 [05:36<42:42,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 558/4152 [05:37<44:00,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 559/4152 [05:37<32:55,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 13%|█▎        | 560/4152 [05:38<36:00,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 561/4152 [05:38<29:39,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 562/4152 [05:39<34:18,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 563/4152 [05:39<35:16,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 564/4152 [05:40<28:03,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 565/4152 [05:40<32:38,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 566/4152 [05:41<34:21,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 567/4152 [05:41<27:05,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 568/4152 [05:42<33:01,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 569/4152 [05:43<36:05,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▎        | 570/4152 [05:43<27:58,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 571/4152 [05:43<32:27,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 572/4152 [05:44<26:30,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 573/4152 [05:45<42:18,  1.41it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 574/4152 [05:45<33:03,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 575/4152 [05:47<47:47,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 576/4152 [05:48<51:21,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 577/4152 [05:48<51:45,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 578/4152 [05:49<51:06,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 579/4152 [05:50<50:21,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 580/4152 [05:51<59:14,  1.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 581/4152 [05:52<43:44,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 582/4152 [05:52<42:21,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 583/4152 [05:53<44:00,  1.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 584/4152 [05:53<33:42,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 585/4152 [05:53<26:20,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 586/4152 [05:55<47:34,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 587/4152 [05:56<44:33,  1.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 588/4152 [05:56<35:43,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 589/4152 [05:57<36:52,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 590/4152 [05:57<28:25,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 591/4152 [05:58<45:54,  1.29it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 592/4152 [05:58<34:42,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 593/4152 [05:59<37:39,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 594/4152 [06:00<37:27,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 595/4152 [06:00<28:47,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 596/4152 [06:01<32:21,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 597/4152 [06:01<25:42,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 598/4152 [06:01<31:54,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 599/4152 [06:02<34:22,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 600/4152 [06:02<27:02,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 601/4152 [06:03<30:10,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 14%|█▍        | 602/4152 [06:04<37:20,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 603/4152 [06:04<28:41,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 604/4152 [06:05<33:43,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 605/4152 [06:05<34:35,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 606/4152 [06:06<27:39,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 607/4152 [06:06<33:55,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 608/4152 [06:08<53:07,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 609/4152 [06:09<51:06,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 610/4152 [06:09<46:43,  1.26it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 611/4152 [06:10<36:14,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 612/4152 [06:11<48:58,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 613/4152 [06:12<51:09,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 614/4152 [06:12<38:18,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 615/4152 [06:13<38:41,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 616/4152 [06:13<30:12,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 617/4152 [06:14<31:38,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 618/4152 [06:14<35:52,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 619/4152 [06:15<28:48,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 620/4152 [06:17<59:12,  1.01s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 621/4152 [06:17<43:39,  1.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▍        | 622/4152 [06:19<1:00:06,  1.02s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 623/4152 [06:19<52:34,  1.12it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 624/4152 [06:19<39:34,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 625/4152 [06:20<43:51,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 626/4152 [06:22<54:50,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 627/4152 [06:23<1:09:04,  1.18s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 628/4152 [06:24<1:03:27,  1.08s/it]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 629/4152 [06:26<1:08:09,  1.16s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 630/4152 [06:26<50:47,  1.16it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 631/4152 [06:26<38:12,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 632/4152 [06:27<38:11,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 633/4152 [06:28<55:42,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 634/4152 [06:28<42:01,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 635/4152 [06:29<40:51,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 636/4152 [06:30<42:39,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 637/4152 [06:30<32:36,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 638/4152 [06:31<34:00,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 639/4152 [06:31<26:22,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 640/4152 [06:31<29:26,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 641/4152 [06:32<34:35,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 642/4152 [06:32<26:59,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 15%|█▌        | 643/4152 [06:33<34:03,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 644/4152 [06:34<38:13,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 645/4152 [06:35<40:59,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 646/4152 [06:36<55:02,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 647/4152 [06:37<50:34,  1.16it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 648/4152 [06:37<37:59,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 649/4152 [06:38<37:20,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 650/4152 [06:38<29:18,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 651/4152 [06:39<31:16,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 652/4152 [06:39<24:29,  2.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 653/4152 [06:39<28:55,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 654/4152 [06:40<23:42,  2.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 655/4152 [06:40<27:47,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 656/4152 [06:40<22:29,  2.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 657/4152 [06:41<30:36,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 658/4152 [06:43<44:41,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 659/4152 [06:43<34:09,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 660/4152 [06:44<37:48,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 661/4152 [06:44<38:26,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 662/4152 [06:44<30:16,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 663/4152 [06:45<32:16,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 664/4152 [06:45<25:54,  2.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 665/4152 [06:46<29:36,  1.96it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 666/4152 [06:46<24:37,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 667/4152 [06:47<28:19,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 668/4152 [06:47<22:58,  2.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 669/4152 [06:48<42:07,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 670/4152 [06:49<42:55,  1.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 671/4152 [06:49<33:38,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 672/4152 [06:50<35:27,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 673/4152 [06:50<28:17,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▌        | 674/4152 [06:51<32:38,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 675/4152 [06:52<35:04,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 676/4152 [06:52<27:18,  2.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 677/4152 [06:53<31:27,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 678/4152 [06:53<24:31,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 679/4152 [06:53<28:51,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 680/4152 [06:54<32:39,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 681/4152 [06:54<26:18,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 682/4152 [06:55<33:02,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 683/4152 [06:56<35:43,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 684/4152 [06:56<28:32,  2.03it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 16%|█▋        | 685/4152 [06:57<31:21,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 686/4152 [06:57<34:08,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 687/4152 [06:58<27:18,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 688/4152 [06:58<29:38,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 689/4152 [06:58<23:38,  2.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 690/4152 [07:01<54:40,  1.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 691/4152 [07:01<40:13,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 692/4152 [07:01<30:17,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 693/4152 [07:02<45:22,  1.27it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 694/4152 [07:03<48:11,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 695/4152 [07:04<45:35,  1.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 696/4152 [07:04<36:41,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 697/4152 [07:05<36:11,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 698/4152 [07:06<42:05,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 699/4152 [07:06<41:02,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 700/4152 [07:07<41:59,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 701/4152 [07:08<41:44,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 702/4152 [07:08<32:47,  1.75it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 703/4152 [07:09<33:42,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 704/4152 [07:09<26:25,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 705/4152 [07:10<29:35,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 706/4152 [07:10<23:51,  2.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 707/4152 [07:10<28:16,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 709/4152 [07:11<21:33,  2.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 710/4152 [07:11<26:05,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 711/4152 [07:11<20:24,  2.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 712/4152 [07:13<39:55,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 713/4152 [07:15<57:28,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 714/4152 [07:15<43:05,  1.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 715/4152 [07:15<41:07,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 717/4152 [07:16<35:28,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 718/4152 [07:16<27:43,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 719/4152 [07:18<44:50,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 720/4152 [07:18<34:43,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 721/4152 [07:18<28:41,  1.99it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 722/4152 [07:20<45:37,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 723/4152 [07:20<41:49,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 724/4152 [07:21<31:47,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 725/4152 [07:21<36:15,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 17%|█▋        | 726/4152 [07:22<38:58,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 727/4152 [07:23<37:55,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 728/4152 [07:24<43:40,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 729/4152 [07:24<42:46,  1.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 730/4152 [07:25<44:16,  1.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 731/4152 [07:25<33:20,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 732/4152 [07:26<34:44,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 733/4152 [07:26<26:59,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 734/4152 [07:27<29:56,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 735/4152 [07:27<23:38,  2.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 736/4152 [07:28<30:05,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 737/4152 [07:28<31:06,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 738/4152 [07:29<35:18,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 739/4152 [07:30<38:02,  1.50it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 740/4152 [07:30<29:27,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 741/4152 [07:31<34:36,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 742/4152 [07:32<35:27,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 743/4152 [07:32<27:16,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 744/4152 [07:32<30:15,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 745/4152 [07:33<23:42,  2.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 746/4152 [07:33<30:27,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 747/4152 [07:34<32:29,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 748/4152 [07:35<37:58,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 749/4152 [07:36<40:09,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 750/4152 [07:37<54:29,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 751/4152 [07:38<50:53,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 752/4152 [07:38<38:10,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 753/4152 [07:39<37:44,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 754/4152 [07:40<41:27,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 755/4152 [07:40<31:46,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 756/4152 [07:41<33:12,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 757/4152 [07:41<35:19,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 758/4152 [07:42<29:23,  1.92it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 759/4152 [07:42<31:14,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 760/4152 [07:43<35:28,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 761/4152 [07:43<27:16,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 762/4152 [07:44<30:50,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 763/4152 [07:45<34:54,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 764/4152 [07:45<28:03,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 765/4152 [07:46<33:22,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 766/4152 [07:46<37:39,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 767/4152 [07:47<35:45,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 18%|█▊        | 768/4152 [07:47<27:43,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 769/4152 [07:48<30:15,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 770/4152 [07:48<23:29,  2.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 771/4152 [07:49<27:19,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 772/4152 [07:49<22:08,  2.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 773/4152 [07:50<28:56,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 774/4152 [07:50<22:29,  2.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 775/4152 [07:50<26:49,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 776/4152 [07:51<31:29,  1.79it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 777/4152 [07:52<34:03,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▊        | 778/4152 [07:52<28:46,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 779/4152 [07:53<31:33,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 780/4152 [07:53<24:59,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 781/4152 [07:54<29:46,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 782/4152 [07:55<34:22,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 783/4152 [07:55<35:50,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 784/4152 [07:55<28:00,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 785/4152 [07:56<30:38,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 786/4152 [07:57<34:26,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 787/4152 [07:58<51:37,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 788/4152 [07:59<39:08,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 789/4152 [07:59<37:15,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 790/4152 [07:59<29:00,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 791/4152 [08:00<32:55,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 792/4152 [08:01<34:30,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 793/4152 [08:01<27:17,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 794/4152 [08:02<32:45,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 795/4152 [08:02<33:27,  1.67it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 796/4152 [08:03<37:06,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 797/4152 [08:03<28:51,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 798/4152 [08:04<31:30,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 799/4152 [08:05<35:24,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 800/4152 [08:05<29:18,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 801/4152 [08:06<30:53,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 802/4152 [08:06<24:44,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 803/4152 [08:07<39:33,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 804/4152 [08:07<29:53,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 805/4152 [08:08<32:23,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 806/4152 [08:11<1:18:05,  1.40s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 807/4152 [08:12<1:09:00,  1.24s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 808/4152 [08:12<50:57,  1.09it/s]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 19%|█▉        | 809/4152 [08:13<49:34,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 810/4152 [08:14<46:46,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 811/4152 [08:15<43:11,  1.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 812/4152 [08:16<58:19,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 813/4152 [08:17<56:09,  1.01s/it]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 814/4152 [08:17<41:15,  1.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 815/4152 [08:18<33:07,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 816/4152 [08:18<32:39,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 817/4152 [08:19<33:14,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 818/4152 [08:19<25:59,  2.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 819/4152 [08:20<32:21,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 820/4152 [08:20<33:05,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 821/4152 [08:21<38:14,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 822/4152 [08:23<55:34,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 823/4152 [08:24<52:56,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 824/4152 [08:25<48:58,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 825/4152 [08:25<37:42,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 826/4152 [08:26<39:12,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 827/4152 [08:26<38:22,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 828/4152 [08:27<30:03,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 829/4152 [08:27<32:27,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|█▉        | 830/4152 [08:27<26:18,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 831/4152 [08:28<29:11,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 832/4152 [08:28<24:07,  2.29it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 833/4152 [08:29<26:51,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 834/4152 [08:29<21:21,  2.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 835/4152 [08:30<25:31,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 836/4152 [08:30<30:10,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 837/4152 [08:31<23:59,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 838/4152 [08:32<40:13,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 839/4152 [08:32<30:36,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 840/4152 [08:32<24:30,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 841/4152 [08:34<38:11,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 842/4152 [08:34<29:26,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 843/4152 [08:35<35:26,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 844/4152 [08:35<35:39,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 845/4152 [08:35<27:45,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 846/4152 [08:36<32:50,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 847/4152 [08:37<34:12,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 848/4152 [08:38<37:45,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 849/4152 [08:39<40:37,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 850/4152 [08:39<41:36,  1.32it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 20%|██        | 851/4152 [08:40<31:32,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 852/4152 [08:40<31:38,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 853/4152 [08:40<25:27,  2.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 854/4152 [08:41<28:16,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 855/4152 [08:42<31:03,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 856/4152 [08:42<26:25,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 857/4152 [08:43<28:27,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 858/4152 [08:43<22:42,  2.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 859/4152 [08:44<27:59,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 860/4152 [08:44<21:44,  2.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 861/4152 [08:44<25:15,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 862/4152 [08:45<32:19,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 863/4152 [08:46<37:16,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 864/4152 [08:47<36:21,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 865/4152 [08:47<29:33,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 866/4152 [08:48<30:37,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 867/4152 [08:48<24:18,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 868/4152 [08:48<27:26,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 869/4152 [08:49<23:14,  2.35it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 870/4152 [08:49<27:12,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 871/4152 [08:49<21:35,  2.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 872/4152 [08:51<37:00,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 873/4152 [08:51<28:10,  1.94it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 874/4152 [08:52<30:27,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 875/4152 [08:52<24:32,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 876/4152 [08:52<27:46,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 877/4152 [08:53<22:26,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 878/4152 [08:53<28:36,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 879/4152 [08:53<22:28,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 880/4152 [08:54<25:37,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 881/4152 [08:54<20:18,  2.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██        | 882/4152 [08:55<25:50,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 883/4152 [08:56<28:58,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 884/4152 [08:56<23:03,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 885/4152 [08:57<28:43,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 886/4152 [08:57<32:58,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 887/4152 [08:58<37:04,  1.47it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 888/4152 [08:59<37:06,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 889/4152 [08:59<29:24,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 890/4152 [09:00<33:47,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 891/4152 [09:01<46:16,  1.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 21%|██▏       | 892/4152 [09:01<35:01,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 893/4152 [09:02<38:03,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 894/4152 [09:03<38:31,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 895/4152 [09:03<30:39,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 896/4152 [09:04<32:03,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 897/4152 [09:05<48:16,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 898/4152 [09:06<36:23,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 899/4152 [09:06<36:17,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 900/4152 [09:07<39:11,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 901/4152 [09:07<29:33,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 902/4152 [09:08<31:13,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 903/4152 [09:09<34:57,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 904/4152 [09:09<26:22,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 905/4152 [09:10<28:52,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 906/4152 [09:10<34:14,  1.58it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 907/4152 [09:11<26:14,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 908/4152 [09:11<29:33,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 909/4152 [09:12<31:20,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 910/4152 [09:13<36:01,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 911/4152 [09:13<27:35,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 912/4152 [09:14<29:53,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 913/4152 [09:14<24:16,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 914/4152 [09:15<38:14,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 915/4152 [09:15<28:26,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 916/4152 [09:16<31:24,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 917/4152 [09:16<26:17,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 918/4152 [09:17<29:02,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 919/4152 [09:17<22:53,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 920/4152 [09:18<26:21,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 921/4152 [09:18<22:02,  2.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 922/4152 [09:18<25:20,  2.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 923/4152 [09:19<19:54,  2.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 924/4152 [09:19<24:25,  2.20it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 925/4152 [09:19<20:00,  2.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 926/4152 [09:20<24:46,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 927/4152 [09:20<20:12,  2.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 928/4152 [09:22<35:23,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 929/4152 [09:22<29:24,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 930/4152 [09:23<31:30,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 931/4152 [09:23<35:34,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 932/4152 [09:24<35:56,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 933/4152 [09:24<27:44,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 22%|██▏       | 934/4152 [09:25<30:03,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 935/4152 [09:25<23:28,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 936/4152 [09:26<28:19,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 937/4152 [09:27<32:05,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 938/4152 [09:27<36:40,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 939/4152 [09:28<36:35,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 940/4152 [09:28<28:04,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 941/4152 [09:29<33:07,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 942/4152 [09:30<36:02,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 943/4152 [09:31<35:45,  1.50it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 944/4152 [09:32<53:41,  1.00s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 945/4152 [09:33<50:43,  1.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 946/4152 [09:34<45:24,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 947/4152 [09:35<43:29,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 948/4152 [09:35<32:48,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 949/4152 [09:35<33:03,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 950/4152 [09:35<25:44,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 951/4152 [09:36<32:14,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 952/4152 [09:37<32:20,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 953/4152 [09:38<36:32,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 954/4152 [09:38<27:42,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 955/4152 [09:39<29:59,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 956/4152 [09:40<36:44,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 957/4152 [09:40<35:15,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 958/4152 [09:40<27:05,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 959/4152 [09:41<29:00,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 960/4152 [09:41<22:36,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 961/4152 [09:42<26:28,  2.01it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 962/4152 [09:42<21:05,  2.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 963/4152 [09:43<25:31,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 964/4152 [09:43<20:35,  2.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 965/4152 [09:43<23:47,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 966/4152 [09:44<20:03,  2.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 967/4152 [09:44<25:02,  2.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 968/4152 [09:45<32:08,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 969/4152 [09:46<33:52,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 970/4152 [09:47<35:10,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 971/4152 [09:47<28:27,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 972/4152 [09:48<42:29,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 973/4152 [09:48<31:53,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 974/4152 [09:49<32:51,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 23%|██▎       | 975/4152 [09:49<26:30,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 976/4152 [09:50<28:45,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 977/4152 [09:50<23:10,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 978/4152 [09:51<27:06,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 979/4152 [09:52<44:29,  1.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 980/4152 [09:53<41:29,  1.27it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 981/4152 [09:53<31:29,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 982/4152 [09:54<34:42,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 983/4152 [09:54<26:29,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 984/4152 [09:55<28:50,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 985/4152 [09:55<22:28,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▎       | 986/4152 [09:56<25:27,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 987/4152 [09:56<20:06,  2.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 988/4152 [09:56<24:05,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 989/4152 [09:57<21:17,  2.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 990/4152 [09:57<24:41,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 991/4152 [09:58<30:36,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 992/4152 [09:59<32:31,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 993/4152 [10:00<36:24,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 994/4152 [10:00<27:58,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 995/4152 [10:00<29:28,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 996/4152 [10:01<23:04,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 997/4152 [10:02<30:14,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 998/4152 [10:02<30:52,  1.70it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 999/4152 [10:02<24:03,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1000/4152 [10:03<26:47,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1001/4152 [10:03<20:46,  2.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1002/4152 [10:04<27:16,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1003/4152 [10:05<29:02,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1004/4152 [10:05<22:49,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1005/4152 [10:05<18:17,  2.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1006/4152 [10:05<23:06,  2.27it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1007/4152 [10:06<18:02,  2.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1008/4152 [10:06<23:14,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1009/4152 [10:06<18:23,  2.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1010/4152 [10:07<23:21,  2.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1011/4152 [10:07<18:57,  2.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1012/4152 [10:08<24:34,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1013/4152 [10:08<19:52,  2.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1014/4152 [10:09<24:04,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1015/4152 [10:09<18:59,  2.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1016/4152 [10:10<26:12,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 24%|██▍       | 1017/4152 [10:11<31:16,  1.67it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1018/4152 [10:11<30:51,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1019/4152 [10:11<23:13,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1020/4152 [10:12<25:48,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1021/4152 [10:12<21:18,  2.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1022/4152 [10:13<25:02,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1023/4152 [10:13<29:54,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1024/4152 [10:14<23:44,  2.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1025/4152 [10:14<26:26,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1026/4152 [10:14<20:38,  2.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1027/4152 [10:15<17:05,  3.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1028/4152 [10:15<21:49,  2.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1029/4152 [10:15<17:20,  3.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1030/4152 [10:16<22:01,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1031/4152 [10:17<27:51,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1032/4152 [10:17<22:27,  2.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1033/4152 [10:18<25:05,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1034/4152 [10:18<28:40,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1035/4152 [10:18<22:31,  2.31it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1036/4152 [10:19<27:40,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▍       | 1037/4152 [10:20<30:17,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1038/4152 [10:20<24:00,  2.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1039/4152 [10:21<26:20,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1040/4152 [10:21<22:31,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1041/4152 [10:22<27:25,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1042/4152 [10:22<29:27,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1043/4152 [10:23<23:37,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1044/4152 [10:23<30:12,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1045/4152 [10:25<41:44,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1046/4152 [10:26<41:45,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1047/4152 [10:26<32:01,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1048/4152 [10:27<35:17,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1049/4152 [10:27<35:51,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1050/4152 [10:28<38:40,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1051/4152 [10:29<36:35,  1.41it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1052/4152 [10:30<38:42,  1.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1053/4152 [10:30<28:52,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1054/4152 [10:30<30:13,  1.71it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1055/4152 [10:31<33:29,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1056/4152 [10:31<25:54,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1057/4152 [10:32<30:03,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 25%|██▌       | 1058/4152 [10:33<31:21,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1059/4152 [10:33<25:10,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1060/4152 [10:34<28:12,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1061/4152 [10:34<31:20,  1.64it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1062/4152 [10:35<24:27,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1063/4152 [10:35<27:09,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1064/4152 [10:35<20:41,  2.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1065/4152 [10:36<25:12,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1066/4152 [10:36<21:03,  2.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1067/4152 [10:37<27:41,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1068/4152 [10:38<32:51,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1069/4152 [10:39<32:30,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1070/4152 [10:39<25:19,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1071/4152 [10:40<31:47,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1072/4152 [10:40<32:13,  1.59it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1073/4152 [10:41<24:49,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1074/4152 [10:41<29:36,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1075/4152 [10:42<33:44,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1076/4152 [10:43<36:07,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1077/4152 [10:45<49:05,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1078/4152 [10:45<37:02,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1079/4152 [10:45<35:18,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1080/4152 [10:46<37:44,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1081/4152 [10:47<39:29,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1083/4152 [10:48<32:56,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1084/4152 [10:48<26:34,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1085/4152 [10:49<28:08,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1086/4152 [10:49<22:21,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1087/4152 [10:49<25:12,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1088/4152 [10:49<19:44,  2.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▌       | 1089/4152 [10:50<23:37,  2.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1090/4152 [10:50<18:58,  2.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1091/4152 [10:51<25:00,  2.04it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1092/4152 [10:52<27:53,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1093/4152 [10:53<31:47,  1.60it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1094/4152 [10:53<35:35,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1095/4152 [10:54<27:16,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1096/4152 [10:54<22:53,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1097/4152 [10:54<24:43,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1098/4152 [10:55<27:35,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1099/4152 [10:55<21:58,  2.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 26%|██▋       | 1100/4152 [10:56<25:14,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1101/4152 [10:56<20:30,  2.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1102/4152 [10:57<24:09,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1103/4152 [10:57<18:34,  2.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1104/4152 [10:58<25:58,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1105/4152 [10:58<30:08,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1106/4152 [10:59<33:41,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1107/4152 [11:00<35:21,  1.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1108/4152 [11:00<27:29,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1109/4152 [11:01<28:53,  1.76it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1110/4152 [11:01<23:13,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1111/4152 [11:02<28:25,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1112/4152 [11:02<22:03,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1113/4152 [11:03<25:02,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1114/4152 [11:03<28:05,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1115/4152 [11:04<24:26,  2.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1116/4152 [11:04<26:40,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1117/4152 [11:05<30:07,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1118/4152 [11:08<1:09:30,  1.37s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1119/4152 [11:08<50:59,  1.01s/it]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1120/4152 [11:09<48:48,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1121/4152 [11:10<45:44,  1.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1122/4152 [11:11<41:30,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1123/4152 [11:11<40:50,  1.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1124/4152 [11:12<44:37,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1125/4152 [11:13<39:56,  1.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1126/4152 [11:13<30:23,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1127/4152 [11:14<31:07,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1128/4152 [11:14<24:10,  2.08it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1129/4152 [11:15<27:34,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1130/4152 [11:15<22:09,  2.27it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1131/4152 [11:16<26:34,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1132/4152 [11:16<31:00,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1133/4152 [11:18<45:17,  1.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1134/4152 [11:18<33:42,  1.49it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1135/4152 [11:19<36:23,  1.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1136/4152 [11:20<36:13,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1137/4152 [11:20<27:48,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1138/4152 [11:21<29:23,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1139/4152 [11:21<23:07,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1140/4152 [11:21<27:22,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 27%|██▋       | 1141/4152 [11:22<20:43,  2.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1142/4152 [11:25<1:02:04,  1.24s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1143/4152 [11:25<52:29,  1.05s/it]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1144/4152 [11:26<49:07,  1.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1145/4152 [11:27<48:23,  1.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1146/4152 [11:28<43:55,  1.14it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1147/4152 [11:29<44:53,  1.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1148/4152 [11:29<33:27,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1149/4152 [11:30<43:54,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1150/4152 [11:30<32:49,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1151/4152 [11:31<25:11,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1152/4152 [11:31<29:47,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1153/4152 [11:32<31:55,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1154/4152 [11:33<35:16,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1155/4152 [11:34<34:15,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1156/4152 [11:34<26:32,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1157/4152 [11:34<28:07,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1158/4152 [11:35<22:11,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1159/4152 [11:35<24:32,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1160/4152 [11:35<19:35,  2.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1161/4152 [11:36<23:58,  2.08it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1162/4152 [11:36<19:06,  2.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1163/4152 [11:37<22:58,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1164/4152 [11:37<19:13,  2.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1165/4152 [11:38<22:32,  2.21it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1166/4152 [11:38<17:42,  2.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1167/4152 [11:38<21:20,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1168/4152 [11:38<17:22,  2.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1169/4152 [11:40<35:46,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1170/4152 [11:41<36:20,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1171/4152 [11:41<27:44,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1172/4152 [11:42<29:21,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1173/4152 [11:42<23:19,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1174/4152 [11:43<28:10,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1175/4152 [11:43<29:07,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1176/4152 [11:44<32:36,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1177/4152 [11:44<25:48,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1178/4152 [11:45<27:07,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1179/4152 [11:45<22:41,  2.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1180/4152 [11:46<26:42,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1181/4152 [11:47<31:27,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1182/4152 [11:47<32:53,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 28%|██▊       | 1183/4152 [11:48<32:54,  1.50it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1184/4152 [11:48<25:50,  1.91it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1185/4152 [11:49<27:59,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1186/4152 [11:49<21:36,  2.29it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1187/4152 [11:50<25:06,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1188/4152 [11:50<20:21,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1189/4152 [11:51<23:36,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1190/4152 [11:51<28:00,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1191/4152 [11:52<22:21,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1192/4152 [11:52<25:10,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▊       | 1193/4152 [11:52<19:59,  2.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1194/4152 [11:53<24:01,  2.05it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1195/4152 [11:54<28:44,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1196/4152 [11:55<35:07,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1197/4152 [11:56<35:23,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1198/4152 [11:56<34:39,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1199/4152 [11:56<26:24,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1200/4152 [11:57<31:22,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1201/4152 [11:58<30:59,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1202/4152 [11:59<33:51,  1.45it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1203/4152 [11:59<25:58,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1204/4152 [12:00<29:26,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1205/4152 [12:01<42:41,  1.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1206/4152 [12:02<41:44,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1207/4152 [12:03<40:50,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1208/4152 [12:03<30:47,  1.59it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1209/4152 [12:03<23:47,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1210/4152 [12:04<26:22,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1211/4152 [12:05<32:34,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1212/4152 [12:05<32:22,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1213/4152 [12:05<24:50,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1214/4152 [12:06<20:10,  2.43it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1215/4152 [12:07<26:46,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1216/4152 [12:07<28:19,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1217/4152 [12:08<31:21,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1218/4152 [12:08<24:30,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1219/4152 [12:09<27:57,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1220/4152 [12:10<30:14,  1.62it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1221/4152 [12:10<31:01,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1222/4152 [12:11<26:23,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1223/4152 [12:12<39:12,  1.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 29%|██▉       | 1224/4152 [12:12<29:29,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1225/4152 [12:13<29:37,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1226/4152 [12:13<23:19,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1227/4152 [12:14<37:01,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1228/4152 [12:15<28:22,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1229/4152 [12:15<31:29,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1230/4152 [12:15<24:13,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1231/4152 [12:16<28:49,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1232/4152 [12:17<28:31,  1.71it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1233/4152 [12:17<21:57,  2.21it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1234/4152 [12:18<24:47,  1.96it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1235/4152 [12:18<19:52,  2.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1236/4152 [12:19<25:37,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1237/4152 [12:19<28:54,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1238/4152 [12:20<29:44,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1239/4152 [12:20<22:33,  2.15it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1240/4152 [12:21<26:25,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1241/4152 [12:22<30:06,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1242/4152 [12:23<36:08,  1.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1243/4152 [12:24<37:19,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1244/4152 [12:25<45:15,  1.07it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|██▉       | 1245/4152 [12:25<34:39,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1246/4152 [12:26<33:07,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1247/4152 [12:27<35:33,  1.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1248/4152 [12:27<26:39,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1249/4152 [12:27<20:42,  2.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1250/4152 [12:27<23:06,  2.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1251/4152 [12:28<19:07,  2.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1252/4152 [12:29<33:36,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1253/4152 [12:29<25:41,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1254/4152 [12:30<31:31,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1255/4152 [12:31<31:45,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1256/4152 [12:31<31:34,  1.53it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1257/4152 [12:32<23:50,  2.02it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1258/4152 [12:32<28:37,  1.68it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1259/4152 [12:32<22:03,  2.19it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1260/4152 [12:33<25:31,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1261/4152 [12:34<30:49,  1.56it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1262/4152 [12:35<30:58,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1263/4152 [12:35<24:05,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1264/4152 [12:36<26:18,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1265/4152 [12:36<20:56,  2.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 30%|███       | 1266/4152 [12:36<23:57,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1267/4152 [12:37<29:29,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1268/4152 [12:38<31:46,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1269/4152 [12:39<33:26,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1270/4152 [12:39<26:31,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1271/4152 [12:40<28:49,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1272/4152 [12:40<29:23,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1273/4152 [12:41<22:31,  2.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1274/4152 [12:41<24:59,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1275/4152 [12:41<21:10,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1276/4152 [12:42<24:28,  1.96it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1277/4152 [12:43<27:16,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1278/4152 [12:43<21:00,  2.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1279/4152 [12:43<16:34,  2.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1280/4152 [12:44<20:44,  2.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1281/4152 [12:44<26:06,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1282/4152 [12:45<20:37,  2.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1283/4152 [12:46<26:42,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1284/4152 [12:46<27:28,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1286/4152 [12:47<24:12,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1287/4152 [12:48<28:37,  1.67it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1288/4152 [12:48<23:29,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1289/4152 [12:49<27:23,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1290/4152 [12:49<29:37,  1.61it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1291/4152 [12:50<30:09,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1292/4152 [12:50<25:17,  1.88it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1293/4152 [12:51<27:17,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1294/4152 [12:51<20:47,  2.29it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1295/4152 [12:52<27:05,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1296/4152 [12:53<30:19,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███       | 1297/4152 [12:53<30:17,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1298/4152 [12:54<32:26,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1299/4152 [12:54<25:29,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1300/4152 [12:55<27:10,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1301/4152 [12:55<20:33,  2.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1302/4152 [12:56<23:14,  2.04it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1303/4152 [12:57<28:10,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1304/4152 [12:57<30:03,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1305/4152 [12:58<23:04,  2.06it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1306/4152 [12:58<25:30,  1.86it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 31%|███▏      | 1307/4152 [12:58<19:44,  2.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1308/4152 [12:58<16:22,  2.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1309/4152 [12:59<20:19,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1310/4152 [12:59<16:18,  2.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1311/4152 [13:00<20:14,  2.34it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1312/4152 [13:00<17:23,  2.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1313/4152 [13:01<21:25,  2.21it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1314/4152 [13:01<17:10,  2.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1315/4152 [13:02<21:16,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1316/4152 [13:02<17:07,  2.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1317/4152 [13:02<20:58,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1318/4152 [13:03<17:31,  2.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1319/4152 [13:03<20:18,  2.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1320/4152 [13:03<16:07,  2.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1321/4152 [13:04<20:02,  2.35it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1322/4152 [13:05<26:05,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1323/4152 [13:05<20:52,  2.26it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1324/4152 [13:06<25:55,  1.82it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1325/4152 [13:06<26:59,  1.75it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1326/4152 [13:07<32:09,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1327/4152 [13:08<33:38,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1328/4152 [13:09<32:37,  1.44it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1329/4152 [13:09<24:20,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1330/4152 [13:09<19:50,  2.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1331/4152 [13:10<23:45,  1.98it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1332/4152 [13:10<26:23,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1333/4152 [13:11<21:01,  2.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1334/4152 [13:11<24:21,  1.93it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1335/4152 [13:11<19:41,  2.38it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1336/4152 [13:12<25:02,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1337/4152 [13:13<28:21,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1338/4152 [13:14<28:54,  1.62it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1339/4152 [13:14<31:44,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1340/4152 [13:15<32:15,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1341/4152 [13:15<24:40,  1.90it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1342/4152 [13:16<26:38,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1343/4152 [13:17<33:03,  1.42it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1344/4152 [13:18<32:15,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1345/4152 [13:18<33:31,  1.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1346/4152 [13:19<25:35,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1347/4152 [13:20<39:06,  1.20it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1348/4152 [13:21<39:37,  1.18it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 32%|███▏      | 1349/4152 [13:27<1:47:53,  2.31s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1350/4152 [13:28<1:27:33,  1.87s/it]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1351/4152 [13:29<1:22:00,  1.76s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1352/4152 [13:29<59:38,  1.28s/it]  /home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1353/4152 [13:30<50:31,  1.08s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1354/4152 [13:31<48:48,  1.05s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1355/4152 [13:32<46:11,  1.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1356/4152 [13:32<41:21,  1.13it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1357/4152 [13:33<40:13,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1358/4152 [13:33<30:16,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1359/4152 [13:33<23:18,  2.00it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1360/4152 [13:34<25:09,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1361/4152 [13:35<29:34,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1362/4152 [13:36<32:02,  1.45it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1363/4152 [13:36<31:28,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1364/4152 [13:37<33:27,  1.39it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1365/4152 [13:37<26:07,  1.78it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1366/4152 [13:38<26:58,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1367/4152 [13:39<29:38,  1.57it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1368/4152 [13:39<23:24,  1.98it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1369/4152 [13:40<25:06,  1.85it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1370/4152 [13:40<21:22,  2.17it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1371/4152 [13:41<23:48,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1372/4152 [13:41<19:37,  2.36it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1373/4152 [13:41<21:54,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1374/4152 [13:44<47:51,  1.03s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1375/4152 [13:45<44:56,  1.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1376/4152 [13:45<35:19,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1377/4152 [13:46<35:01,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1378/4152 [13:46<34:57,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1379/4152 [13:47<35:06,  1.32it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1380/4152 [13:47<27:06,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1381/4152 [13:48<29:44,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1382/4152 [13:49<29:56,  1.54it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1383/4152 [13:49<23:37,  1.95it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1384/4152 [13:50<25:43,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1385/4152 [13:50<19:47,  2.33it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1386/4152 [13:50<23:26,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1387/4152 [13:51<19:12,  2.40it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1388/4152 [13:51<22:45,  2.02it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1389/4152 [13:52<27:05,  1.70it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 33%|███▎      | 1390/4152 [13:52<21:43,  2.12it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1391/4152 [13:53<23:06,  1.99it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1392/4152 [13:54<26:08,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1393/4152 [13:54<30:20,  1.52it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1394/4152 [13:55<23:57,  1.92it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1395/4152 [13:55<25:37,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1396/4152 [13:56<28:05,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1397/4152 [13:56<21:43,  2.11it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1398/4152 [13:56<16:50,  2.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1399/4152 [13:57<22:39,  2.03it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1400/4152 [13:58<24:18,  1.89it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▎      | 1401/4152 [13:59<31:10,  1.47it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1402/4152 [13:59<31:03,  1.48it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1403/4152 [14:00<25:39,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1404/4152 [14:00<28:07,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1405/4152 [14:02<39:34,  1.16it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1406/4152 [14:02<30:33,  1.50it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1407/4152 [14:03<40:05,  1.14it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1408/4152 [14:04<39:15,  1.16it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1409/4152 [14:04<29:31,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1410/4152 [14:05<22:45,  2.01it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1411/4152 [14:05<25:18,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1412/4152 [14:06<28:01,  1.63it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1413/4152 [14:07<29:27,  1.55it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1414/4152 [14:07<24:51,  1.84it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1415/4152 [14:08<26:56,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1416/4152 [14:08<21:09,  2.15it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1417/4152 [14:09<25:55,  1.76it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1418/4152 [14:09<26:28,  1.72it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1419/4152 [14:09<20:28,  2.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1420/4152 [14:10<25:29,  1.79it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1421/4152 [14:11<27:35,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1422/4152 [14:12<28:45,  1.58it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1423/4152 [14:13<41:41,  1.09it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1424/4152 [14:14<41:56,  1.08it/s]P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1425/4152 [14:14<31:10,  1.46it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1426/4152 [14:15<33:04,  1.37it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1427/4152 [14:15<25:02,  1.81it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1428/4152 [14:16<26:10,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1429/4152 [14:16<20:07,  2.25it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1430/4152 [14:17<25:12,  1.80it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1431/4152 [14:17<26:13,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 34%|███▍      | 1432/4152 [14:18<20:13,  2.24it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1433/4152 [14:18<25:33,  1.77it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1434/4152 [14:19<26:14,  1.73it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1435/4152 [14:20<29:57,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1436/4152 [14:20<22:56,  1.97it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1437/4152 [14:21<25:57,  1.74it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1438/4152 [14:21<27:29,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1439/4152 [14:22<21:34,  2.10it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1440/4152 [14:22<24:07,  1.87it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1441/4152 [14:22<18:47,  2.40it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1442/4152 [14:24<32:41,  1.38it/s]P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
P2: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
-------------------------- HERE -------------------------
P1: dict_keys(['labels', 'batch', 'xyz', 'normals', 'atoms', 'batch_atoms', 'atom_xyz', 'atomtypes', 'atomflex', 'rand_rot', 'atom_center', 'input_features', 'embedding_1', 'embedding_2'])
/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1443/4152 [14:24<24:43,  1.83it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1444/4152 [14:25<26:38,  1.69it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1445/4152 [14:26<29:47,  1.51it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1446/4152 [14:26<22:47,  1.98it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1447/4152 [14:28<46:48,  1.04s/it]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1448/4152 [14:28<35:08,  1.28it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1449/4152 [14:29<36:48,  1.22it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1450/4152 [14:30<36:32,  1.23it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1451/4152 [14:31<34:25,  1.31it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1452/4152 [14:31<34:40,  1.30it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▍      | 1453/4152 [14:32<27:12,  1.65it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▌      | 1454/4152 [14:32<27:06,  1.66it/s]/home/s.joubbi/miniconda3/envs/dmasif/lib/python3.8/site-packages/torch/cuda/memory.py:278: FutureWarning: torch.cuda.reset_max_memory_allocated now calls torch.cuda.reset_peak_memory_stats, which resets /all/ peak memory stats.
  warnings.warn(
/disk1/fingerprint/dmasif/model.py:374: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  v2 = P2[key]
/disk1/fingerprint/dmasif/model.py:375: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if v1 is None:
/disk1/fingerprint/dmasif/model.py:377: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  
/disk1/fingerprint/dmasif/model.py:378: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  if key == "batch" or key == "batch_atoms":
 35%|███▌      | 1455/4152 [14:32<21:44,  2.07it/s]